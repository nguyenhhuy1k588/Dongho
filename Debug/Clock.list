
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005728  08005728  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005728  08005728  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005728  08005728  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000070  080057a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080057a0  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9b6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002199  00000000  00000000  0002ea4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  00030be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  00031a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000289c  00000000  00000000  000327a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c911  00000000  00000000  0003503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063f5d  00000000  00000000  0004194d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a58aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003778  00000000  00000000  000a5928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005648 	.word	0x08005648

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005648 	.word	0x08005648

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_dmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4657      	mov	r7, sl
 80003f8:	46de      	mov	lr, fp
 80003fa:	464e      	mov	r6, r9
 80003fc:	4645      	mov	r5, r8
 80003fe:	b5e0      	push	{r5, r6, r7, lr}
 8000400:	4683      	mov	fp, r0
 8000402:	0006      	movs	r6, r0
 8000404:	030f      	lsls	r7, r1, #12
 8000406:	0048      	lsls	r0, r1, #1
 8000408:	b087      	sub	sp, #28
 800040a:	4692      	mov	sl, r2
 800040c:	001d      	movs	r5, r3
 800040e:	0b3f      	lsrs	r7, r7, #12
 8000410:	0d40      	lsrs	r0, r0, #21
 8000412:	0fcc      	lsrs	r4, r1, #31
 8000414:	2800      	cmp	r0, #0
 8000416:	d100      	bne.n	800041a <__aeabi_dmul+0x26>
 8000418:	e06f      	b.n	80004fa <__aeabi_dmul+0x106>
 800041a:	4bde      	ldr	r3, [pc, #888]	; (8000794 <__aeabi_dmul+0x3a0>)
 800041c:	4298      	cmp	r0, r3
 800041e:	d038      	beq.n	8000492 <__aeabi_dmul+0x9e>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	00ff      	lsls	r7, r7, #3
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	431f      	orrs	r7, r3
 8000428:	0f73      	lsrs	r3, r6, #29
 800042a:	433b      	orrs	r3, r7
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	4bda      	ldr	r3, [pc, #872]	; (8000798 <__aeabi_dmul+0x3a4>)
 8000430:	2700      	movs	r7, #0
 8000432:	4699      	mov	r9, r3
 8000434:	2300      	movs	r3, #0
 8000436:	469b      	mov	fp, r3
 8000438:	00f6      	lsls	r6, r6, #3
 800043a:	4481      	add	r9, r0
 800043c:	032b      	lsls	r3, r5, #12
 800043e:	0069      	lsls	r1, r5, #1
 8000440:	0b1b      	lsrs	r3, r3, #12
 8000442:	4652      	mov	r2, sl
 8000444:	4698      	mov	r8, r3
 8000446:	0d49      	lsrs	r1, r1, #21
 8000448:	0fed      	lsrs	r5, r5, #31
 800044a:	2900      	cmp	r1, #0
 800044c:	d100      	bne.n	8000450 <__aeabi_dmul+0x5c>
 800044e:	e085      	b.n	800055c <__aeabi_dmul+0x168>
 8000450:	4bd0      	ldr	r3, [pc, #832]	; (8000794 <__aeabi_dmul+0x3a0>)
 8000452:	4299      	cmp	r1, r3
 8000454:	d100      	bne.n	8000458 <__aeabi_dmul+0x64>
 8000456:	e073      	b.n	8000540 <__aeabi_dmul+0x14c>
 8000458:	4643      	mov	r3, r8
 800045a:	00da      	lsls	r2, r3, #3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4313      	orrs	r3, r2
 8000462:	4652      	mov	r2, sl
 8000464:	48cc      	ldr	r0, [pc, #816]	; (8000798 <__aeabi_dmul+0x3a4>)
 8000466:	0f52      	lsrs	r2, r2, #29
 8000468:	4684      	mov	ip, r0
 800046a:	4313      	orrs	r3, r2
 800046c:	4652      	mov	r2, sl
 800046e:	2000      	movs	r0, #0
 8000470:	4461      	add	r1, ip
 8000472:	00d2      	lsls	r2, r2, #3
 8000474:	4489      	add	r9, r1
 8000476:	0021      	movs	r1, r4
 8000478:	4069      	eors	r1, r5
 800047a:	9100      	str	r1, [sp, #0]
 800047c:	468c      	mov	ip, r1
 800047e:	2101      	movs	r1, #1
 8000480:	4449      	add	r1, r9
 8000482:	468a      	mov	sl, r1
 8000484:	2f0f      	cmp	r7, #15
 8000486:	d900      	bls.n	800048a <__aeabi_dmul+0x96>
 8000488:	e090      	b.n	80005ac <__aeabi_dmul+0x1b8>
 800048a:	49c4      	ldr	r1, [pc, #784]	; (800079c <__aeabi_dmul+0x3a8>)
 800048c:	00bf      	lsls	r7, r7, #2
 800048e:	59cf      	ldr	r7, [r1, r7]
 8000490:	46bf      	mov	pc, r7
 8000492:	465b      	mov	r3, fp
 8000494:	433b      	orrs	r3, r7
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	d000      	beq.n	800049c <__aeabi_dmul+0xa8>
 800049a:	e16a      	b.n	8000772 <__aeabi_dmul+0x37e>
 800049c:	2302      	movs	r3, #2
 800049e:	2708      	movs	r7, #8
 80004a0:	2600      	movs	r6, #0
 80004a2:	4681      	mov	r9, r0
 80004a4:	469b      	mov	fp, r3
 80004a6:	e7c9      	b.n	800043c <__aeabi_dmul+0x48>
 80004a8:	0032      	movs	r2, r6
 80004aa:	4658      	mov	r0, fp
 80004ac:	9b01      	ldr	r3, [sp, #4]
 80004ae:	4661      	mov	r1, ip
 80004b0:	9100      	str	r1, [sp, #0]
 80004b2:	2802      	cmp	r0, #2
 80004b4:	d100      	bne.n	80004b8 <__aeabi_dmul+0xc4>
 80004b6:	e075      	b.n	80005a4 <__aeabi_dmul+0x1b0>
 80004b8:	2803      	cmp	r0, #3
 80004ba:	d100      	bne.n	80004be <__aeabi_dmul+0xca>
 80004bc:	e1fe      	b.n	80008bc <__aeabi_dmul+0x4c8>
 80004be:	2801      	cmp	r0, #1
 80004c0:	d000      	beq.n	80004c4 <__aeabi_dmul+0xd0>
 80004c2:	e12c      	b.n	800071e <__aeabi_dmul+0x32a>
 80004c4:	2300      	movs	r3, #0
 80004c6:	2700      	movs	r7, #0
 80004c8:	2600      	movs	r6, #0
 80004ca:	2500      	movs	r5, #0
 80004cc:	033f      	lsls	r7, r7, #12
 80004ce:	0d2a      	lsrs	r2, r5, #20
 80004d0:	0b3f      	lsrs	r7, r7, #12
 80004d2:	48b3      	ldr	r0, [pc, #716]	; (80007a0 <__aeabi_dmul+0x3ac>)
 80004d4:	0512      	lsls	r2, r2, #20
 80004d6:	433a      	orrs	r2, r7
 80004d8:	4002      	ands	r2, r0
 80004da:	051b      	lsls	r3, r3, #20
 80004dc:	4313      	orrs	r3, r2
 80004de:	9a00      	ldr	r2, [sp, #0]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	07d1      	lsls	r1, r2, #31
 80004e4:	085b      	lsrs	r3, r3, #1
 80004e6:	430b      	orrs	r3, r1
 80004e8:	0030      	movs	r0, r6
 80004ea:	0019      	movs	r1, r3
 80004ec:	b007      	add	sp, #28
 80004ee:	bc3c      	pop	{r2, r3, r4, r5}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	46a2      	mov	sl, r4
 80004f6:	46ab      	mov	fp, r5
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	465b      	mov	r3, fp
 80004fc:	433b      	orrs	r3, r7
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	d100      	bne.n	8000504 <__aeabi_dmul+0x110>
 8000502:	e12f      	b.n	8000764 <__aeabi_dmul+0x370>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x116>
 8000508:	e1a5      	b.n	8000856 <__aeabi_dmul+0x462>
 800050a:	0038      	movs	r0, r7
 800050c:	f000 fa9a 	bl	8000a44 <__clzsi2>
 8000510:	0003      	movs	r3, r0
 8000512:	3b0b      	subs	r3, #11
 8000514:	2b1c      	cmp	r3, #28
 8000516:	dd00      	ble.n	800051a <__aeabi_dmul+0x126>
 8000518:	e196      	b.n	8000848 <__aeabi_dmul+0x454>
 800051a:	221d      	movs	r2, #29
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	465a      	mov	r2, fp
 8000520:	0001      	movs	r1, r0
 8000522:	40da      	lsrs	r2, r3
 8000524:	465e      	mov	r6, fp
 8000526:	3908      	subs	r1, #8
 8000528:	408f      	lsls	r7, r1
 800052a:	0013      	movs	r3, r2
 800052c:	408e      	lsls	r6, r1
 800052e:	433b      	orrs	r3, r7
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	4b9c      	ldr	r3, [pc, #624]	; (80007a4 <__aeabi_dmul+0x3b0>)
 8000534:	2700      	movs	r7, #0
 8000536:	1a1b      	subs	r3, r3, r0
 8000538:	4699      	mov	r9, r3
 800053a:	2300      	movs	r3, #0
 800053c:	469b      	mov	fp, r3
 800053e:	e77d      	b.n	800043c <__aeabi_dmul+0x48>
 8000540:	4641      	mov	r1, r8
 8000542:	4653      	mov	r3, sl
 8000544:	430b      	orrs	r3, r1
 8000546:	4993      	ldr	r1, [pc, #588]	; (8000794 <__aeabi_dmul+0x3a0>)
 8000548:	468c      	mov	ip, r1
 800054a:	44e1      	add	r9, ip
 800054c:	2b00      	cmp	r3, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_dmul+0x15e>
 8000550:	e11a      	b.n	8000788 <__aeabi_dmul+0x394>
 8000552:	2202      	movs	r2, #2
 8000554:	2002      	movs	r0, #2
 8000556:	4317      	orrs	r7, r2
 8000558:	2200      	movs	r2, #0
 800055a:	e78c      	b.n	8000476 <__aeabi_dmul+0x82>
 800055c:	4313      	orrs	r3, r2
 800055e:	d100      	bne.n	8000562 <__aeabi_dmul+0x16e>
 8000560:	e10d      	b.n	800077e <__aeabi_dmul+0x38a>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d100      	bne.n	800056a <__aeabi_dmul+0x176>
 8000568:	e181      	b.n	800086e <__aeabi_dmul+0x47a>
 800056a:	4640      	mov	r0, r8
 800056c:	f000 fa6a 	bl	8000a44 <__clzsi2>
 8000570:	0002      	movs	r2, r0
 8000572:	3a0b      	subs	r2, #11
 8000574:	2a1c      	cmp	r2, #28
 8000576:	dd00      	ble.n	800057a <__aeabi_dmul+0x186>
 8000578:	e172      	b.n	8000860 <__aeabi_dmul+0x46c>
 800057a:	0001      	movs	r1, r0
 800057c:	4643      	mov	r3, r8
 800057e:	3908      	subs	r1, #8
 8000580:	408b      	lsls	r3, r1
 8000582:	4698      	mov	r8, r3
 8000584:	231d      	movs	r3, #29
 8000586:	1a9a      	subs	r2, r3, r2
 8000588:	4653      	mov	r3, sl
 800058a:	40d3      	lsrs	r3, r2
 800058c:	001a      	movs	r2, r3
 800058e:	4643      	mov	r3, r8
 8000590:	4313      	orrs	r3, r2
 8000592:	4652      	mov	r2, sl
 8000594:	408a      	lsls	r2, r1
 8000596:	4649      	mov	r1, r9
 8000598:	1a08      	subs	r0, r1, r0
 800059a:	4982      	ldr	r1, [pc, #520]	; (80007a4 <__aeabi_dmul+0x3b0>)
 800059c:	4689      	mov	r9, r1
 800059e:	4481      	add	r9, r0
 80005a0:	2000      	movs	r0, #0
 80005a2:	e768      	b.n	8000476 <__aeabi_dmul+0x82>
 80005a4:	4b7b      	ldr	r3, [pc, #492]	; (8000794 <__aeabi_dmul+0x3a0>)
 80005a6:	2700      	movs	r7, #0
 80005a8:	2600      	movs	r6, #0
 80005aa:	e78e      	b.n	80004ca <__aeabi_dmul+0xd6>
 80005ac:	0c14      	lsrs	r4, r2, #16
 80005ae:	0412      	lsls	r2, r2, #16
 80005b0:	0c12      	lsrs	r2, r2, #16
 80005b2:	0011      	movs	r1, r2
 80005b4:	0c37      	lsrs	r7, r6, #16
 80005b6:	0436      	lsls	r6, r6, #16
 80005b8:	0c35      	lsrs	r5, r6, #16
 80005ba:	4379      	muls	r1, r7
 80005bc:	0028      	movs	r0, r5
 80005be:	468c      	mov	ip, r1
 80005c0:	002e      	movs	r6, r5
 80005c2:	4360      	muls	r0, r4
 80005c4:	4460      	add	r0, ip
 80005c6:	4683      	mov	fp, r0
 80005c8:	4356      	muls	r6, r2
 80005ca:	0021      	movs	r1, r4
 80005cc:	0c30      	lsrs	r0, r6, #16
 80005ce:	4680      	mov	r8, r0
 80005d0:	4658      	mov	r0, fp
 80005d2:	4379      	muls	r1, r7
 80005d4:	4440      	add	r0, r8
 80005d6:	9102      	str	r1, [sp, #8]
 80005d8:	4584      	cmp	ip, r0
 80005da:	d906      	bls.n	80005ea <__aeabi_dmul+0x1f6>
 80005dc:	4688      	mov	r8, r1
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0249      	lsls	r1, r1, #9
 80005e2:	468c      	mov	ip, r1
 80005e4:	44e0      	add	r8, ip
 80005e6:	4641      	mov	r1, r8
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	0436      	lsls	r6, r6, #16
 80005ec:	0c01      	lsrs	r1, r0, #16
 80005ee:	0c36      	lsrs	r6, r6, #16
 80005f0:	0400      	lsls	r0, r0, #16
 80005f2:	468b      	mov	fp, r1
 80005f4:	1981      	adds	r1, r0, r6
 80005f6:	0c1e      	lsrs	r6, r3, #16
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	9103      	str	r1, [sp, #12]
 80005fe:	0019      	movs	r1, r3
 8000600:	4379      	muls	r1, r7
 8000602:	468c      	mov	ip, r1
 8000604:	0028      	movs	r0, r5
 8000606:	4375      	muls	r5, r6
 8000608:	4465      	add	r5, ip
 800060a:	46a8      	mov	r8, r5
 800060c:	4358      	muls	r0, r3
 800060e:	0c05      	lsrs	r5, r0, #16
 8000610:	4445      	add	r5, r8
 8000612:	4377      	muls	r7, r6
 8000614:	42a9      	cmp	r1, r5
 8000616:	d903      	bls.n	8000620 <__aeabi_dmul+0x22c>
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0249      	lsls	r1, r1, #9
 800061c:	468c      	mov	ip, r1
 800061e:	4467      	add	r7, ip
 8000620:	0c29      	lsrs	r1, r5, #16
 8000622:	468c      	mov	ip, r1
 8000624:	0039      	movs	r1, r7
 8000626:	0400      	lsls	r0, r0, #16
 8000628:	0c00      	lsrs	r0, r0, #16
 800062a:	042d      	lsls	r5, r5, #16
 800062c:	182d      	adds	r5, r5, r0
 800062e:	4461      	add	r1, ip
 8000630:	44ab      	add	fp, r5
 8000632:	9105      	str	r1, [sp, #20]
 8000634:	4659      	mov	r1, fp
 8000636:	9104      	str	r1, [sp, #16]
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	040f      	lsls	r7, r1, #16
 800063c:	0c3f      	lsrs	r7, r7, #16
 800063e:	0c08      	lsrs	r0, r1, #16
 8000640:	0039      	movs	r1, r7
 8000642:	4351      	muls	r1, r2
 8000644:	4342      	muls	r2, r0
 8000646:	4690      	mov	r8, r2
 8000648:	0002      	movs	r2, r0
 800064a:	468c      	mov	ip, r1
 800064c:	0c09      	lsrs	r1, r1, #16
 800064e:	468b      	mov	fp, r1
 8000650:	4362      	muls	r2, r4
 8000652:	437c      	muls	r4, r7
 8000654:	4444      	add	r4, r8
 8000656:	445c      	add	r4, fp
 8000658:	45a0      	cmp	r8, r4
 800065a:	d903      	bls.n	8000664 <__aeabi_dmul+0x270>
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0249      	lsls	r1, r1, #9
 8000660:	4688      	mov	r8, r1
 8000662:	4442      	add	r2, r8
 8000664:	0c21      	lsrs	r1, r4, #16
 8000666:	4688      	mov	r8, r1
 8000668:	4661      	mov	r1, ip
 800066a:	0409      	lsls	r1, r1, #16
 800066c:	0c09      	lsrs	r1, r1, #16
 800066e:	468c      	mov	ip, r1
 8000670:	0039      	movs	r1, r7
 8000672:	4359      	muls	r1, r3
 8000674:	4343      	muls	r3, r0
 8000676:	4370      	muls	r0, r6
 8000678:	437e      	muls	r6, r7
 800067a:	0c0f      	lsrs	r7, r1, #16
 800067c:	18f6      	adds	r6, r6, r3
 800067e:	0424      	lsls	r4, r4, #16
 8000680:	19be      	adds	r6, r7, r6
 8000682:	4464      	add	r4, ip
 8000684:	4442      	add	r2, r8
 8000686:	468c      	mov	ip, r1
 8000688:	42b3      	cmp	r3, r6
 800068a:	d903      	bls.n	8000694 <__aeabi_dmul+0x2a0>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	4698      	mov	r8, r3
 8000692:	4440      	add	r0, r8
 8000694:	9b02      	ldr	r3, [sp, #8]
 8000696:	4661      	mov	r1, ip
 8000698:	4698      	mov	r8, r3
 800069a:	9b04      	ldr	r3, [sp, #16]
 800069c:	0437      	lsls	r7, r6, #16
 800069e:	4443      	add	r3, r8
 80006a0:	469b      	mov	fp, r3
 80006a2:	45ab      	cmp	fp, r5
 80006a4:	41ad      	sbcs	r5, r5
 80006a6:	426b      	negs	r3, r5
 80006a8:	040d      	lsls	r5, r1, #16
 80006aa:	9905      	ldr	r1, [sp, #20]
 80006ac:	0c2d      	lsrs	r5, r5, #16
 80006ae:	468c      	mov	ip, r1
 80006b0:	197f      	adds	r7, r7, r5
 80006b2:	4467      	add	r7, ip
 80006b4:	18fd      	adds	r5, r7, r3
 80006b6:	46a8      	mov	r8, r5
 80006b8:	465d      	mov	r5, fp
 80006ba:	192d      	adds	r5, r5, r4
 80006bc:	42a5      	cmp	r5, r4
 80006be:	41a4      	sbcs	r4, r4
 80006c0:	4693      	mov	fp, r2
 80006c2:	4264      	negs	r4, r4
 80006c4:	46a4      	mov	ip, r4
 80006c6:	44c3      	add	fp, r8
 80006c8:	44dc      	add	ip, fp
 80006ca:	428f      	cmp	r7, r1
 80006cc:	41bf      	sbcs	r7, r7
 80006ce:	4598      	cmp	r8, r3
 80006d0:	419b      	sbcs	r3, r3
 80006d2:	4593      	cmp	fp, r2
 80006d4:	4192      	sbcs	r2, r2
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	41a4      	sbcs	r4, r4
 80006da:	425b      	negs	r3, r3
 80006dc:	427f      	negs	r7, r7
 80006de:	431f      	orrs	r7, r3
 80006e0:	0c36      	lsrs	r6, r6, #16
 80006e2:	4252      	negs	r2, r2
 80006e4:	4264      	negs	r4, r4
 80006e6:	19bf      	adds	r7, r7, r6
 80006e8:	4322      	orrs	r2, r4
 80006ea:	18bf      	adds	r7, r7, r2
 80006ec:	4662      	mov	r2, ip
 80006ee:	1838      	adds	r0, r7, r0
 80006f0:	0243      	lsls	r3, r0, #9
 80006f2:	0dd2      	lsrs	r2, r2, #23
 80006f4:	9903      	ldr	r1, [sp, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	026a      	lsls	r2, r5, #9
 80006fa:	430a      	orrs	r2, r1
 80006fc:	1e50      	subs	r0, r2, #1
 80006fe:	4182      	sbcs	r2, r0
 8000700:	4661      	mov	r1, ip
 8000702:	0ded      	lsrs	r5, r5, #23
 8000704:	432a      	orrs	r2, r5
 8000706:	024e      	lsls	r6, r1, #9
 8000708:	4332      	orrs	r2, r6
 800070a:	01d9      	lsls	r1, r3, #7
 800070c:	d400      	bmi.n	8000710 <__aeabi_dmul+0x31c>
 800070e:	e0b3      	b.n	8000878 <__aeabi_dmul+0x484>
 8000710:	2601      	movs	r6, #1
 8000712:	0850      	lsrs	r0, r2, #1
 8000714:	4032      	ands	r2, r6
 8000716:	4302      	orrs	r2, r0
 8000718:	07de      	lsls	r6, r3, #31
 800071a:	4332      	orrs	r2, r6
 800071c:	085b      	lsrs	r3, r3, #1
 800071e:	4c22      	ldr	r4, [pc, #136]	; (80007a8 <__aeabi_dmul+0x3b4>)
 8000720:	4454      	add	r4, sl
 8000722:	2c00      	cmp	r4, #0
 8000724:	dd62      	ble.n	80007ec <__aeabi_dmul+0x3f8>
 8000726:	0751      	lsls	r1, r2, #29
 8000728:	d009      	beq.n	800073e <__aeabi_dmul+0x34a>
 800072a:	200f      	movs	r0, #15
 800072c:	4010      	ands	r0, r2
 800072e:	2804      	cmp	r0, #4
 8000730:	d005      	beq.n	800073e <__aeabi_dmul+0x34a>
 8000732:	1d10      	adds	r0, r2, #4
 8000734:	4290      	cmp	r0, r2
 8000736:	4192      	sbcs	r2, r2
 8000738:	4252      	negs	r2, r2
 800073a:	189b      	adds	r3, r3, r2
 800073c:	0002      	movs	r2, r0
 800073e:	01d9      	lsls	r1, r3, #7
 8000740:	d504      	bpl.n	800074c <__aeabi_dmul+0x358>
 8000742:	2480      	movs	r4, #128	; 0x80
 8000744:	4819      	ldr	r0, [pc, #100]	; (80007ac <__aeabi_dmul+0x3b8>)
 8000746:	00e4      	lsls	r4, r4, #3
 8000748:	4003      	ands	r3, r0
 800074a:	4454      	add	r4, sl
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <__aeabi_dmul+0x3bc>)
 800074e:	4284      	cmp	r4, r0
 8000750:	dd00      	ble.n	8000754 <__aeabi_dmul+0x360>
 8000752:	e727      	b.n	80005a4 <__aeabi_dmul+0x1b0>
 8000754:	075e      	lsls	r6, r3, #29
 8000756:	025b      	lsls	r3, r3, #9
 8000758:	08d2      	lsrs	r2, r2, #3
 800075a:	0b1f      	lsrs	r7, r3, #12
 800075c:	0563      	lsls	r3, r4, #21
 800075e:	4316      	orrs	r6, r2
 8000760:	0d5b      	lsrs	r3, r3, #21
 8000762:	e6b2      	b.n	80004ca <__aeabi_dmul+0xd6>
 8000764:	2300      	movs	r3, #0
 8000766:	4699      	mov	r9, r3
 8000768:	3301      	adds	r3, #1
 800076a:	2704      	movs	r7, #4
 800076c:	2600      	movs	r6, #0
 800076e:	469b      	mov	fp, r3
 8000770:	e664      	b.n	800043c <__aeabi_dmul+0x48>
 8000772:	2303      	movs	r3, #3
 8000774:	9701      	str	r7, [sp, #4]
 8000776:	4681      	mov	r9, r0
 8000778:	270c      	movs	r7, #12
 800077a:	469b      	mov	fp, r3
 800077c:	e65e      	b.n	800043c <__aeabi_dmul+0x48>
 800077e:	2201      	movs	r2, #1
 8000780:	2001      	movs	r0, #1
 8000782:	4317      	orrs	r7, r2
 8000784:	2200      	movs	r2, #0
 8000786:	e676      	b.n	8000476 <__aeabi_dmul+0x82>
 8000788:	2303      	movs	r3, #3
 800078a:	2003      	movs	r0, #3
 800078c:	431f      	orrs	r7, r3
 800078e:	4643      	mov	r3, r8
 8000790:	e671      	b.n	8000476 <__aeabi_dmul+0x82>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	000007ff 	.word	0x000007ff
 8000798:	fffffc01 	.word	0xfffffc01
 800079c:	080056a4 	.word	0x080056a4
 80007a0:	800fffff 	.word	0x800fffff
 80007a4:	fffffc0d 	.word	0xfffffc0d
 80007a8:	000003ff 	.word	0x000003ff
 80007ac:	feffffff 	.word	0xfeffffff
 80007b0:	000007fe 	.word	0x000007fe
 80007b4:	2300      	movs	r3, #0
 80007b6:	2780      	movs	r7, #128	; 0x80
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	033f      	lsls	r7, r7, #12
 80007bc:	2600      	movs	r6, #0
 80007be:	4b43      	ldr	r3, [pc, #268]	; (80008cc <__aeabi_dmul+0x4d8>)
 80007c0:	e683      	b.n	80004ca <__aeabi_dmul+0xd6>
 80007c2:	9b01      	ldr	r3, [sp, #4]
 80007c4:	0032      	movs	r2, r6
 80007c6:	46a4      	mov	ip, r4
 80007c8:	4658      	mov	r0, fp
 80007ca:	e670      	b.n	80004ae <__aeabi_dmul+0xba>
 80007cc:	46ac      	mov	ip, r5
 80007ce:	e66e      	b.n	80004ae <__aeabi_dmul+0xba>
 80007d0:	2780      	movs	r7, #128	; 0x80
 80007d2:	9901      	ldr	r1, [sp, #4]
 80007d4:	033f      	lsls	r7, r7, #12
 80007d6:	4239      	tst	r1, r7
 80007d8:	d02d      	beq.n	8000836 <__aeabi_dmul+0x442>
 80007da:	423b      	tst	r3, r7
 80007dc:	d12b      	bne.n	8000836 <__aeabi_dmul+0x442>
 80007de:	431f      	orrs	r7, r3
 80007e0:	033f      	lsls	r7, r7, #12
 80007e2:	0b3f      	lsrs	r7, r7, #12
 80007e4:	9500      	str	r5, [sp, #0]
 80007e6:	0016      	movs	r6, r2
 80007e8:	4b38      	ldr	r3, [pc, #224]	; (80008cc <__aeabi_dmul+0x4d8>)
 80007ea:	e66e      	b.n	80004ca <__aeabi_dmul+0xd6>
 80007ec:	2501      	movs	r5, #1
 80007ee:	1b2d      	subs	r5, r5, r4
 80007f0:	2d38      	cmp	r5, #56	; 0x38
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dmul+0x402>
 80007f4:	e666      	b.n	80004c4 <__aeabi_dmul+0xd0>
 80007f6:	2d1f      	cmp	r5, #31
 80007f8:	dc40      	bgt.n	800087c <__aeabi_dmul+0x488>
 80007fa:	4835      	ldr	r0, [pc, #212]	; (80008d0 <__aeabi_dmul+0x4dc>)
 80007fc:	001c      	movs	r4, r3
 80007fe:	4450      	add	r0, sl
 8000800:	0016      	movs	r6, r2
 8000802:	4082      	lsls	r2, r0
 8000804:	4084      	lsls	r4, r0
 8000806:	40ee      	lsrs	r6, r5
 8000808:	1e50      	subs	r0, r2, #1
 800080a:	4182      	sbcs	r2, r0
 800080c:	4334      	orrs	r4, r6
 800080e:	4314      	orrs	r4, r2
 8000810:	40eb      	lsrs	r3, r5
 8000812:	0762      	lsls	r2, r4, #29
 8000814:	d009      	beq.n	800082a <__aeabi_dmul+0x436>
 8000816:	220f      	movs	r2, #15
 8000818:	4022      	ands	r2, r4
 800081a:	2a04      	cmp	r2, #4
 800081c:	d005      	beq.n	800082a <__aeabi_dmul+0x436>
 800081e:	0022      	movs	r2, r4
 8000820:	1d14      	adds	r4, r2, #4
 8000822:	4294      	cmp	r4, r2
 8000824:	4180      	sbcs	r0, r0
 8000826:	4240      	negs	r0, r0
 8000828:	181b      	adds	r3, r3, r0
 800082a:	021a      	lsls	r2, r3, #8
 800082c:	d53e      	bpl.n	80008ac <__aeabi_dmul+0x4b8>
 800082e:	2301      	movs	r3, #1
 8000830:	2700      	movs	r7, #0
 8000832:	2600      	movs	r6, #0
 8000834:	e649      	b.n	80004ca <__aeabi_dmul+0xd6>
 8000836:	2780      	movs	r7, #128	; 0x80
 8000838:	9b01      	ldr	r3, [sp, #4]
 800083a:	033f      	lsls	r7, r7, #12
 800083c:	431f      	orrs	r7, r3
 800083e:	033f      	lsls	r7, r7, #12
 8000840:	0b3f      	lsrs	r7, r7, #12
 8000842:	9400      	str	r4, [sp, #0]
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <__aeabi_dmul+0x4d8>)
 8000846:	e640      	b.n	80004ca <__aeabi_dmul+0xd6>
 8000848:	0003      	movs	r3, r0
 800084a:	465a      	mov	r2, fp
 800084c:	3b28      	subs	r3, #40	; 0x28
 800084e:	409a      	lsls	r2, r3
 8000850:	2600      	movs	r6, #0
 8000852:	9201      	str	r2, [sp, #4]
 8000854:	e66d      	b.n	8000532 <__aeabi_dmul+0x13e>
 8000856:	4658      	mov	r0, fp
 8000858:	f000 f8f4 	bl	8000a44 <__clzsi2>
 800085c:	3020      	adds	r0, #32
 800085e:	e657      	b.n	8000510 <__aeabi_dmul+0x11c>
 8000860:	0003      	movs	r3, r0
 8000862:	4652      	mov	r2, sl
 8000864:	3b28      	subs	r3, #40	; 0x28
 8000866:	409a      	lsls	r2, r3
 8000868:	0013      	movs	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	e693      	b.n	8000596 <__aeabi_dmul+0x1a2>
 800086e:	4650      	mov	r0, sl
 8000870:	f000 f8e8 	bl	8000a44 <__clzsi2>
 8000874:	3020      	adds	r0, #32
 8000876:	e67b      	b.n	8000570 <__aeabi_dmul+0x17c>
 8000878:	46ca      	mov	sl, r9
 800087a:	e750      	b.n	800071e <__aeabi_dmul+0x32a>
 800087c:	201f      	movs	r0, #31
 800087e:	001e      	movs	r6, r3
 8000880:	4240      	negs	r0, r0
 8000882:	1b04      	subs	r4, r0, r4
 8000884:	40e6      	lsrs	r6, r4
 8000886:	2d20      	cmp	r5, #32
 8000888:	d003      	beq.n	8000892 <__aeabi_dmul+0x49e>
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <__aeabi_dmul+0x4e0>)
 800088c:	4454      	add	r4, sl
 800088e:	40a3      	lsls	r3, r4
 8000890:	431a      	orrs	r2, r3
 8000892:	1e50      	subs	r0, r2, #1
 8000894:	4182      	sbcs	r2, r0
 8000896:	4332      	orrs	r2, r6
 8000898:	2607      	movs	r6, #7
 800089a:	2700      	movs	r7, #0
 800089c:	4016      	ands	r6, r2
 800089e:	d009      	beq.n	80008b4 <__aeabi_dmul+0x4c0>
 80008a0:	200f      	movs	r0, #15
 80008a2:	2300      	movs	r3, #0
 80008a4:	4010      	ands	r0, r2
 80008a6:	0014      	movs	r4, r2
 80008a8:	2804      	cmp	r0, #4
 80008aa:	d1b9      	bne.n	8000820 <__aeabi_dmul+0x42c>
 80008ac:	0022      	movs	r2, r4
 80008ae:	075e      	lsls	r6, r3, #29
 80008b0:	025b      	lsls	r3, r3, #9
 80008b2:	0b1f      	lsrs	r7, r3, #12
 80008b4:	08d2      	lsrs	r2, r2, #3
 80008b6:	4316      	orrs	r6, r2
 80008b8:	2300      	movs	r3, #0
 80008ba:	e606      	b.n	80004ca <__aeabi_dmul+0xd6>
 80008bc:	2780      	movs	r7, #128	; 0x80
 80008be:	033f      	lsls	r7, r7, #12
 80008c0:	431f      	orrs	r7, r3
 80008c2:	033f      	lsls	r7, r7, #12
 80008c4:	0b3f      	lsrs	r7, r7, #12
 80008c6:	0016      	movs	r6, r2
 80008c8:	4b00      	ldr	r3, [pc, #0]	; (80008cc <__aeabi_dmul+0x4d8>)
 80008ca:	e5fe      	b.n	80004ca <__aeabi_dmul+0xd6>
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	0000041e 	.word	0x0000041e
 80008d4:	0000043e 	.word	0x0000043e

080008d8 <__aeabi_ui2d>:
 80008d8:	b510      	push	{r4, lr}
 80008da:	1e04      	subs	r4, r0, #0
 80008dc:	d025      	beq.n	800092a <__aeabi_ui2d+0x52>
 80008de:	f000 f8b1 	bl	8000a44 <__clzsi2>
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <__aeabi_ui2d+0x5c>)
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	055b      	lsls	r3, r3, #21
 80008e8:	0d5b      	lsrs	r3, r3, #21
 80008ea:	280a      	cmp	r0, #10
 80008ec:	dd12      	ble.n	8000914 <__aeabi_ui2d+0x3c>
 80008ee:	380b      	subs	r0, #11
 80008f0:	4084      	lsls	r4, r0
 80008f2:	2200      	movs	r2, #0
 80008f4:	0324      	lsls	r4, r4, #12
 80008f6:	0b24      	lsrs	r4, r4, #12
 80008f8:	2100      	movs	r1, #0
 80008fa:	0010      	movs	r0, r2
 80008fc:	0324      	lsls	r4, r4, #12
 80008fe:	0d0a      	lsrs	r2, r1, #20
 8000900:	0b24      	lsrs	r4, r4, #12
 8000902:	0512      	lsls	r2, r2, #20
 8000904:	4322      	orrs	r2, r4
 8000906:	4c0c      	ldr	r4, [pc, #48]	; (8000938 <__aeabi_ui2d+0x60>)
 8000908:	051b      	lsls	r3, r3, #20
 800090a:	4022      	ands	r2, r4
 800090c:	4313      	orrs	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	0859      	lsrs	r1, r3, #1
 8000912:	bd10      	pop	{r4, pc}
 8000914:	0002      	movs	r2, r0
 8000916:	0021      	movs	r1, r4
 8000918:	3215      	adds	r2, #21
 800091a:	4091      	lsls	r1, r2
 800091c:	000a      	movs	r2, r1
 800091e:	210b      	movs	r1, #11
 8000920:	1a08      	subs	r0, r1, r0
 8000922:	40c4      	lsrs	r4, r0
 8000924:	0324      	lsls	r4, r4, #12
 8000926:	0b24      	lsrs	r4, r4, #12
 8000928:	e7e6      	b.n	80008f8 <__aeabi_ui2d+0x20>
 800092a:	2300      	movs	r3, #0
 800092c:	2400      	movs	r4, #0
 800092e:	2200      	movs	r2, #0
 8000930:	e7e2      	b.n	80008f8 <__aeabi_ui2d+0x20>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	0000041e 	.word	0x0000041e
 8000938:	800fffff 	.word	0x800fffff

0800093c <__aeabi_d2f>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	004c      	lsls	r4, r1, #1
 8000940:	0d64      	lsrs	r4, r4, #21
 8000942:	030b      	lsls	r3, r1, #12
 8000944:	1c62      	adds	r2, r4, #1
 8000946:	0a5b      	lsrs	r3, r3, #9
 8000948:	0f46      	lsrs	r6, r0, #29
 800094a:	0552      	lsls	r2, r2, #21
 800094c:	0fc9      	lsrs	r1, r1, #31
 800094e:	431e      	orrs	r6, r3
 8000950:	00c5      	lsls	r5, r0, #3
 8000952:	0d52      	lsrs	r2, r2, #21
 8000954:	2a01      	cmp	r2, #1
 8000956:	dd29      	ble.n	80009ac <__aeabi_d2f+0x70>
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <__aeabi_d2f+0xfc>)
 800095a:	18e7      	adds	r7, r4, r3
 800095c:	2ffe      	cmp	r7, #254	; 0xfe
 800095e:	dc1c      	bgt.n	800099a <__aeabi_d2f+0x5e>
 8000960:	2f00      	cmp	r7, #0
 8000962:	dd3b      	ble.n	80009dc <__aeabi_d2f+0xa0>
 8000964:	0180      	lsls	r0, r0, #6
 8000966:	1e43      	subs	r3, r0, #1
 8000968:	4198      	sbcs	r0, r3
 800096a:	2207      	movs	r2, #7
 800096c:	00f3      	lsls	r3, r6, #3
 800096e:	0f6d      	lsrs	r5, r5, #29
 8000970:	4303      	orrs	r3, r0
 8000972:	432b      	orrs	r3, r5
 8000974:	401a      	ands	r2, r3
 8000976:	2a00      	cmp	r2, #0
 8000978:	d004      	beq.n	8000984 <__aeabi_d2f+0x48>
 800097a:	220f      	movs	r2, #15
 800097c:	401a      	ands	r2, r3
 800097e:	2a04      	cmp	r2, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_d2f+0x48>
 8000982:	3304      	adds	r3, #4
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	04d2      	lsls	r2, r2, #19
 8000988:	401a      	ands	r2, r3
 800098a:	d024      	beq.n	80009d6 <__aeabi_d2f+0x9a>
 800098c:	3701      	adds	r7, #1
 800098e:	b2fa      	uxtb	r2, r7
 8000990:	2fff      	cmp	r7, #255	; 0xff
 8000992:	d002      	beq.n	800099a <__aeabi_d2f+0x5e>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	0a58      	lsrs	r0, r3, #9
 8000998:	e001      	b.n	800099e <__aeabi_d2f+0x62>
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	2000      	movs	r0, #0
 800099e:	0240      	lsls	r0, r0, #9
 80009a0:	05d2      	lsls	r2, r2, #23
 80009a2:	0a40      	lsrs	r0, r0, #9
 80009a4:	07c9      	lsls	r1, r1, #31
 80009a6:	4310      	orrs	r0, r2
 80009a8:	4308      	orrs	r0, r1
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ac:	4335      	orrs	r5, r6
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d104      	bne.n	80009bc <__aeabi_d2f+0x80>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d10a      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009b6:	2200      	movs	r2, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	e7f0      	b.n	800099e <__aeabi_d2f+0x62>
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d0ec      	beq.n	800099a <__aeabi_d2f+0x5e>
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	03c0      	lsls	r0, r0, #15
 80009c4:	4330      	orrs	r0, r6
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	e7e9      	b.n	800099e <__aeabi_d2f+0x62>
 80009ca:	2400      	movs	r4, #0
 80009cc:	2300      	movs	r3, #0
 80009ce:	025b      	lsls	r3, r3, #9
 80009d0:	0a58      	lsrs	r0, r3, #9
 80009d2:	b2e2      	uxtb	r2, r4
 80009d4:	e7e3      	b.n	800099e <__aeabi_d2f+0x62>
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	003c      	movs	r4, r7
 80009da:	e7f8      	b.n	80009ce <__aeabi_d2f+0x92>
 80009dc:	003b      	movs	r3, r7
 80009de:	3317      	adds	r3, #23
 80009e0:	dbf3      	blt.n	80009ca <__aeabi_d2f+0x8e>
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	041b      	lsls	r3, r3, #16
 80009e6:	4333      	orrs	r3, r6
 80009e8:	261e      	movs	r6, #30
 80009ea:	1bf6      	subs	r6, r6, r7
 80009ec:	2e1f      	cmp	r6, #31
 80009ee:	dd14      	ble.n	8000a1a <__aeabi_d2f+0xde>
 80009f0:	2202      	movs	r2, #2
 80009f2:	4252      	negs	r2, r2
 80009f4:	1bd7      	subs	r7, r2, r7
 80009f6:	001a      	movs	r2, r3
 80009f8:	40fa      	lsrs	r2, r7
 80009fa:	0017      	movs	r7, r2
 80009fc:	2e20      	cmp	r6, #32
 80009fe:	d004      	beq.n	8000a0a <__aeabi_d2f+0xce>
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <__aeabi_d2f+0x100>)
 8000a02:	4694      	mov	ip, r2
 8000a04:	4464      	add	r4, ip
 8000a06:	40a3      	lsls	r3, r4
 8000a08:	431d      	orrs	r5, r3
 8000a0a:	002b      	movs	r3, r5
 8000a0c:	1e5d      	subs	r5, r3, #1
 8000a0e:	41ab      	sbcs	r3, r5
 8000a10:	2207      	movs	r2, #7
 8000a12:	433b      	orrs	r3, r7
 8000a14:	401a      	ands	r2, r3
 8000a16:	2700      	movs	r7, #0
 8000a18:	e7ad      	b.n	8000976 <__aeabi_d2f+0x3a>
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <__aeabi_d2f+0x104>)
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	18a2      	adds	r2, r4, r2
 8000a20:	4095      	lsls	r5, r2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	1e6c      	subs	r4, r5, #1
 8000a26:	41a5      	sbcs	r5, r4
 8000a28:	40f0      	lsrs	r0, r6
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	432b      	orrs	r3, r5
 8000a2e:	4303      	orrs	r3, r0
 8000a30:	401a      	ands	r2, r3
 8000a32:	2700      	movs	r7, #0
 8000a34:	e79f      	b.n	8000976 <__aeabi_d2f+0x3a>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	fffffc80 	.word	0xfffffc80
 8000a3c:	fffffca2 	.word	0xfffffca2
 8000a40:	fffffc82 	.word	0xfffffc82

08000a44 <__clzsi2>:
 8000a44:	211c      	movs	r1, #28
 8000a46:	2301      	movs	r3, #1
 8000a48:	041b      	lsls	r3, r3, #16
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d301      	bcc.n	8000a52 <__clzsi2+0xe>
 8000a4e:	0c00      	lsrs	r0, r0, #16
 8000a50:	3910      	subs	r1, #16
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	4298      	cmp	r0, r3
 8000a56:	d301      	bcc.n	8000a5c <__clzsi2+0x18>
 8000a58:	0a00      	lsrs	r0, r0, #8
 8000a5a:	3908      	subs	r1, #8
 8000a5c:	091b      	lsrs	r3, r3, #4
 8000a5e:	4298      	cmp	r0, r3
 8000a60:	d301      	bcc.n	8000a66 <__clzsi2+0x22>
 8000a62:	0900      	lsrs	r0, r0, #4
 8000a64:	3904      	subs	r1, #4
 8000a66:	a202      	add	r2, pc, #8	; (adr r2, 8000a70 <__clzsi2+0x2c>)
 8000a68:	5c10      	ldrb	r0, [r2, r0]
 8000a6a:	1840      	adds	r0, r0, r1
 8000a6c:	4770      	bx	lr
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	02020304 	.word	0x02020304
 8000a74:	01010101 	.word	0x01010101
	...

08000a80 <dectobcd>:

#define DS3231 0xD0

// Convert normal decimal numbers to binary coded decimal
uint8_t dectobcd(int val)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	210a      	movs	r1, #10
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fbc5 	bl	800021c <__divsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	b2dc      	uxtb	r4, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	210a      	movs	r1, #10
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fca2 	bl	80003e8 <__aeabi_idivmod>
 8000aa4:	000b      	movs	r3, r1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	18e3      	adds	r3, r4, r3
 8000aaa:	b2db      	uxtb	r3, r3
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}

08000ab4 <bcdtodec>:
// Convert binary coded decimal to normal decimal numbers
int bcdtodec(uint8_t val)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
  return (int)( (val/16*10) + (val%16) );
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	001a      	movs	r2, r3
 8000aca:	0013      	movs	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	220f      	movs	r2, #15
 8000ada:	4013      	ands	r3, r2
 8000adc:	18cb      	adds	r3, r1, r3
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <Set_Time_function>:
}
TIME;
TIME time;

void Set_Time_function (uint8_t min, uint8_t hour, uint8_t day, uint8_t date, uint8_t month, uint8_t year)
{
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af04      	add	r7, sp, #16
 8000aee:	0005      	movs	r5, r0
 8000af0:	000c      	movs	r4, r1
 8000af2:	0010      	movs	r0, r2
 8000af4:	0019      	movs	r1, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	1c2a      	adds	r2, r5, #0
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	1c22      	adds	r2, r4, #0
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	1c02      	adds	r2, r0, #0
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	1c0a      	adds	r2, r1, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
	uint8_t set_time[6];
	set_time[0] = dectobcd(min);
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ffb4 	bl	8000a80 <dectobcd>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2408      	movs	r4, #8
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	701a      	strb	r2, [r3, #0]
	set_time[1] = dectobcd(hour);
 8000b22:	1dbb      	adds	r3, r7, #6
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ffaa 	bl	8000a80 <dectobcd>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	001a      	movs	r2, r3
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	705a      	strb	r2, [r3, #1]
	set_time[2] = dectobcd(day);
 8000b34:	1d7b      	adds	r3, r7, #5
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ffa1 	bl	8000a80 <dectobcd>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	001a      	movs	r2, r3
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	709a      	strb	r2, [r3, #2]
	set_time[3] = dectobcd(date);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff ff98 	bl	8000a80 <dectobcd>
 8000b50:	0003      	movs	r3, r0
 8000b52:	001a      	movs	r2, r3
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	70da      	strb	r2, [r3, #3]
	set_time[4] = dectobcd(month);
 8000b58:	2320      	movs	r3, #32
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff8e 	bl	8000a80 <dectobcd>
 8000b64:	0003      	movs	r3, r0
 8000b66:	001a      	movs	r2, r3
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	711a      	strb	r2, [r3, #4]
	set_time[5] = dectobcd(year);
 8000b6c:	2324      	movs	r3, #36	; 0x24
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff84 	bl	8000a80 <dectobcd>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Mem_Write(&hi2c1, DS3231, 0x01, 1, set_time, 6, 1000);
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <Set_Time_function+0xbc>)
 8000b82:	23fa      	movs	r3, #250	; 0xfa
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	9302      	str	r3, [sp, #8]
 8000b88:	2306      	movs	r3, #6
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	2201      	movs	r2, #1
 8000b94:	21d0      	movs	r1, #208	; 0xd0
 8000b96:	f002 fa11 	bl	8002fbc <HAL_I2C_Mem_Write>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	200002a0 	.word	0x200002a0

08000ba8 <Get_Time_function>:

void Get_Time_function (void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
	uint8_t get_time[6];
	HAL_I2C_Mem_Read(&hi2c1, DS3231, 0x01, 1, get_time, 6, 1000);
 8000bae:	4823      	ldr	r0, [pc, #140]	; (8000c3c <Get_Time_function+0x94>)
 8000bb0:	23fa      	movs	r3, #250	; 0xfa
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	9302      	str	r3, [sp, #8]
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	003b      	movs	r3, r7
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	21d0      	movs	r1, #208	; 0xd0
 8000bc4:	f002 fb28 	bl	8003218 <HAL_I2C_Mem_Read>
	time.Minutes = bcdtodec(get_time[0]);
 8000bc8:	003b      	movs	r3, r7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff71 	bl	8000ab4 <bcdtodec>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <Get_Time_function+0x98>)
 8000bd8:	701a      	strb	r2, [r3, #0]
	time.Hour = bcdtodec(get_time[1]);
 8000bda:	003b      	movs	r3, r7
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff68 	bl	8000ab4 <bcdtodec>
 8000be4:	0003      	movs	r3, r0
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <Get_Time_function+0x98>)
 8000bea:	705a      	strb	r2, [r3, #1]
	time.Day = bcdtodec(get_time[2]);
 8000bec:	003b      	movs	r3, r7
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff5f 	bl	8000ab4 <bcdtodec>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <Get_Time_function+0x98>)
 8000bfc:	709a      	strb	r2, [r3, #2]
	time.Date = bcdtodec(get_time[3]);
 8000bfe:	003b      	movs	r3, r7
 8000c00:	78db      	ldrb	r3, [r3, #3]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff56 	bl	8000ab4 <bcdtodec>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <Get_Time_function+0x98>)
 8000c0e:	70da      	strb	r2, [r3, #3]
	time.Month = bcdtodec(get_time[4]);
 8000c10:	003b      	movs	r3, r7
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff4d 	bl	8000ab4 <bcdtodec>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <Get_Time_function+0x98>)
 8000c20:	711a      	strb	r2, [r3, #4]
	time.Year = bcdtodec(get_time[5]);
 8000c22:	003b      	movs	r3, r7
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff ff44 	bl	8000ab4 <bcdtodec>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <Get_Time_function+0x98>)
 8000c32:	715a      	strb	r2, [r3, #5]
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200002a0 	.word	0x200002a0
 8000c40:	20000348 	.word	0x20000348

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 ff99 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f87d 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f000 fa13 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c56:	f000 f9f3 	bl	8001040 <MX_DMA_Init>
  MX_ADC_Init();
 8000c5a:	f000 f8e1 	bl	8000e20 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c5e:	f000 f939 	bl	8000ed4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000c62:	f000 f977 	bl	8000f54 <MX_TIM3_Init>
  SSD1306_Init();
 8000c66:	f000 fa85 	bl	8001174 <SSD1306_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc,&bat,1);
 8000c6a:	492e      	ldr	r1, [pc, #184]	; (8000d24 <main+0xe0>)
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <main+0xe4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 f94b 	bl	8001f0c <HAL_ADC_Start_DMA>
  Set_Time_function(00,10,4,17,2,21);
 8000c76:	2315      	movs	r3, #21
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2311      	movs	r3, #17
 8000c80:	2204      	movs	r2, #4
 8000c82:	210a      	movs	r1, #10
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff ff2f 	bl	8000ae8 <Set_Time_function>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  float v=(bat/4096)*4.2;
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <main+0xe0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0b1b      	lsrs	r3, r3, #12
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fe21 	bl	80008d8 <__aeabi_ui2d>
 8000c96:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <main+0xe8>)
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <main+0xec>)
 8000c9a:	f7ff fbab 	bl	80003f4 <__aeabi_dmul>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	000c      	movs	r4, r1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	0021      	movs	r1, r4
 8000ca6:	f7ff fe49 	bl	800093c <__aeabi_d2f>
 8000caa:	1c03      	adds	r3, r0, #0
 8000cac:	607b      	str	r3, [r7, #4]
	  Get_Time_function();
 8000cae:	f7ff ff7b 	bl	8000ba8 <Get_Time_function>
	  sprintf(string,"%02d:%02d", time.Hour, time.Minutes);
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <main+0xf0>)
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <main+0xf0>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	491e      	ldr	r1, [pc, #120]	; (8000d38 <main+0xf4>)
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xf8>)
 8000cc0:	f004 f8ba 	bl	8004e38 <siprintf>
	  SSD1306_GotoXY(0,2);
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fbd0 	bl	800146c <SSD1306_GotoXY>
	  SSD1306_Puts(string,&SSD1306_Puts,1);
 8000ccc:	491c      	ldr	r1, [pc, #112]	; (8000d40 <main+0xfc>)
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <main+0xf8>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 fc64 	bl	80015a0 <SSD1306_Puts>

	  sprintf(string,"%02d-%02d-%02d", time.Date, time.Month,time.Year);
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <main+0xf0>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <main+0xf0>)
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	001c      	movs	r4, r3
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <main+0xf0>)
 8000ce6:	795b      	ldrb	r3, [r3, #5]
 8000ce8:	4916      	ldr	r1, [pc, #88]	; (8000d44 <main+0x100>)
 8000cea:	4814      	ldr	r0, [pc, #80]	; (8000d3c <main+0xf8>)
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	0023      	movs	r3, r4
 8000cf0:	f004 f8a2 	bl	8004e38 <siprintf>
	  SSD1306_GotoXY(0,20);
 8000cf4:	2114      	movs	r1, #20
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 fbb8 	bl	800146c <SSD1306_GotoXY>
	  SSD1306_Puts(string,&SSD1306_Puts,1);
 8000cfc:	4910      	ldr	r1, [pc, #64]	; (8000d40 <main+0xfc>)
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <main+0xf8>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fc4c 	bl	80015a0 <SSD1306_Puts>

	  sprintf(string,"V=%5.2f",bat);
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <main+0xe0>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	490e      	ldr	r1, [pc, #56]	; (8000d48 <main+0x104>)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <main+0xf8>)
 8000d10:	0018      	movs	r0, r3
 8000d12:	f004 f891 	bl	8004e38 <siprintf>
	  HAL_Delay(500);
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 ff94 	bl	8001c48 <HAL_Delay>
  {
 8000d20:	e7b3      	b.n	8000c8a <main+0x46>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000350 	.word	0x20000350
 8000d28:	20000398 	.word	0x20000398
 8000d2c:	cccccccd 	.word	0xcccccccd
 8000d30:	4010cccc 	.word	0x4010cccc
 8000d34:	20000348 	.word	0x20000348
 8000d38:	08005660 	.word	0x08005660
 8000d3c:	200002ec 	.word	0x200002ec
 8000d40:	080015a1 	.word	0x080015a1
 8000d44:	0800566c 	.word	0x0800566c
 8000d48:	0800567c 	.word	0x0800567c

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b095      	sub	sp, #84	; 0x54
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	2420      	movs	r4, #32
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	0018      	movs	r0, r3
 8000d58:	2330      	movs	r3, #48	; 0x30
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f004 f863 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d62:	2310      	movs	r3, #16
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	0018      	movs	r0, r3
 8000d68:	2310      	movs	r3, #16
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f004 f85b 	bl	8004e28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d72:	003b      	movs	r3, r7
 8000d74:	0018      	movs	r0, r3
 8000d76:	2310      	movs	r3, #16
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f004 f854 	bl	8004e28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000d80:	0021      	movs	r1, r4
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2213      	movs	r2, #19
 8000d86:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2201      	movs	r2, #1
 8000d98:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2210      	movs	r2, #16
 8000da4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	0252      	lsls	r2, r2, #9
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 ff4c 	bl	8003c60 <HAL_RCC_OscConfig>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000dcc:	f000 f9ce 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2100      	movs	r1, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f003 fa52 	bl	8004298 <HAL_RCC_ClockConfig>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000df8:	f000 f9b8 	bl	800116c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dfc:	003b      	movs	r3, r7
 8000dfe:	2220      	movs	r2, #32
 8000e00:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	003b      	movs	r3, r7
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f003 fb76 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e14:	f000 f9aa 	bl	800116c <Error_Handler>
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b015      	add	sp, #84	; 0x54
 8000e1e:	bd90      	pop	{r4, r7, pc}

08000e20 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f003 fffa 	bl	8004e28 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e36:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <MX_ADC_Init+0xb0>)
 8000e38:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e54:	2204      	movs	r2, #4
 8000e56:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e72:	22c2      	movs	r2, #194	; 0xc2
 8000e74:	32ff      	adds	r2, #255	; 0xff
 8000e76:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e80:	2224      	movs	r2, #36	; 0x24
 8000e82:	2100      	movs	r1, #0
 8000e84:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_ADC_Init+0xac>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 fefc 	bl	8001c8c <HAL_ADC_Init>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e98:	f000 f968 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	0152      	lsls	r2, r2, #5
 8000ea8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2203      	movs	r2, #3
 8000eae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb0:	1d3a      	adds	r2, r7, #4
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_ADC_Init+0xac>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 f8c2 	bl	8002040 <HAL_ADC_ConfigChannel>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000ec0:	f000 f954 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000398 	.word	0x20000398
 8000ed0:	40012400 	.word	0x40012400

08000ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <MX_I2C1_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <MX_I2C1_Init+0x7c>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 feb5 	bl	8002c80 <HAL_I2C_Init>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f1a:	f000 f927 	bl	800116c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 fe04 	bl	8003b30 <HAL_I2CEx_ConfigAnalogFilter>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f2c:	f000 f91e 	bl	800116c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <MX_I2C1_Init+0x74>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	0018      	movs	r0, r3
 8000f36:	f002 fe47 	bl	8003bc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 f915 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200002a0 	.word	0x200002a0
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	2000090e 	.word	0x2000090e

08000f54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2308      	movs	r3, #8
 8000f62:	001a      	movs	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f003 ff5f 	bl	8004e28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	231c      	movs	r3, #28
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f003 ff58 	bl	8004e28 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f78:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <MX_TIM3_Init+0xe4>)
 8000f7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <MX_TIM3_Init+0xe8>)
 8000f8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 fb7a 	bl	8004698 <HAL_TIM_PWM_Init>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000fa8:	f000 f8e0 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2120      	movs	r1, #32
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fba:	187a      	adds	r2, r7, r1
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 feb5 	bl	8004d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000fca:	f000 f8cf 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2260      	movs	r2, #96	; 0x60
 8000fd2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	1d39      	adds	r1, r7, #4
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	0018      	movs	r0, r3
 8000fee:	f003 fba3 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000ff6:	f000 f8b9 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffa:	1d39      	adds	r1, r7, #4
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_TIM3_Init+0xe0>)
 8000ffe:	2208      	movs	r2, #8
 8001000:	0018      	movs	r0, r3
 8001002:	f003 fb99 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800100a:	f000 f8af 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800100e:	1d39      	adds	r1, r7, #4
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_TIM3_Init+0xe0>)
 8001012:	220c      	movs	r2, #12
 8001014:	0018      	movs	r0, r3
 8001016:	f003 fb8f 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800101e:	f000 f8a5 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <MX_TIM3_Init+0xe0>)
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fca7 	bl	8001978 <HAL_TIM_MspPostInit>

}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b00a      	add	sp, #40	; 0x28
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000300 	.word	0x20000300
 8001038:	40000400 	.word	0x40000400
 800103c:	0000ffff 	.word	0x0000ffff

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_DMA_Init+0x38>)
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_DMA_Init+0x38>)
 800104c:	2101      	movs	r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_DMA_Init+0x38>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2201      	movs	r2, #1
 8001058:	4013      	ands	r3, r2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2009      	movs	r0, #9
 8001064:	f001 fa8e 	bl	8002584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001068:	2009      	movs	r0, #9
 800106a:	f001 faa0 	bl	80025ae <HAL_NVIC_EnableIRQ>

}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	240c      	movs	r4, #12
 8001084:	193b      	adds	r3, r7, r4
 8001086:	0018      	movs	r0, r3
 8001088:	2314      	movs	r3, #20
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f003 fecb 	bl	8004e28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <MX_GPIO_Init+0xe8>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <MX_GPIO_Init+0xe8>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	03c9      	lsls	r1, r1, #15
 800109c:	430a      	orrs	r2, r1
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	03db      	lsls	r3, r3, #15
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0289      	lsls	r1, r1, #10
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	02c9      	lsls	r1, r1, #11
 80010d4:	430a      	orrs	r2, r1
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <MX_GPIO_Init+0xe8>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	02db      	lsls	r3, r3, #11
 80010e0:	4013      	ands	r3, r2
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80010e6:	2390      	movs	r3, #144	; 0x90
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 fd82 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2201      	movs	r2, #1
 80010fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	193b      	adds	r3, r7, r4
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800110c:	193a      	adds	r2, r7, r4
 800110e:	2390      	movs	r3, #144	; 0x90
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	0011      	movs	r1, r2
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fbff 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin INT_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|INT_Pin|BTN_3_Pin|BTN_4_Pin;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	223c      	movs	r2, #60	; 0x3c
 800111e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001120:	193b      	adds	r3, r7, r4
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <MX_GPIO_Init+0xec>)
 8001124:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	193b      	adds	r3, r7, r4
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	193a      	adds	r2, r7, r4
 800112e:	2390      	movs	r3, #144	; 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fbef 	bl	8002918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2006      	movs	r0, #6
 8001140:	f001 fa20 	bl	8002584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001144:	2006      	movs	r0, #6
 8001146:	f001 fa32 	bl	80025ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2007      	movs	r0, #7
 8001150:	f001 fa18 	bl	8002584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001154:	2007      	movs	r0, #7
 8001156:	f001 fa2a 	bl	80025ae <HAL_NVIC_EnableIRQ>

}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b009      	add	sp, #36	; 0x24
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40021000 	.word	0x40021000
 8001168:	10210000 	.word	0x10210000

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001172:	e7fe      	b.n	8001172 <Error_Handler+0x6>

08001174 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800117a:	f000 fa37 	bl	80015ec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800117e:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <SSD1306_Init+0x170>)
 8001180:	4859      	ldr	r0, [pc, #356]	; (80012e8 <SSD1306_Init+0x174>)
 8001182:	2201      	movs	r2, #1
 8001184:	2178      	movs	r1, #120	; 0x78
 8001186:	f002 f97b 	bl	8003480 <HAL_I2C_IsDeviceReady>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800118e:	2300      	movs	r3, #0
 8001190:	e0a3      	b.n	80012da <SSD1306_Init+0x166>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <SSD1306_Init+0x178>)
 8001194:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001196:	e002      	b.n	800119e <SSD1306_Init+0x2a>
		p--;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f9      	bne.n	8001198 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011a4:	22ae      	movs	r2, #174	; 0xae
 80011a6:	2100      	movs	r1, #0
 80011a8:	2078      	movs	r0, #120	; 0x78
 80011aa:	f000 fabb 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80011ae:	2220      	movs	r2, #32
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fab6 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011b8:	2210      	movs	r2, #16
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fab1 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011c2:	22b0      	movs	r2, #176	; 0xb0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 faac 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011cc:	22c8      	movs	r2, #200	; 0xc8
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 faa7 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 faa2 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011e0:	2210      	movs	r2, #16
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 fa9d 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011ea:	2240      	movs	r2, #64	; 0x40
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 fa98 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011f4:	2281      	movs	r2, #129	; 0x81
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	; 0x78
 80011fa:	f000 fa93 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 fa8e 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001208:	22a1      	movs	r2, #161	; 0xa1
 800120a:	2100      	movs	r1, #0
 800120c:	2078      	movs	r0, #120	; 0x78
 800120e:	f000 fa89 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001212:	22a6      	movs	r2, #166	; 0xa6
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 fa84 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800121c:	22a8      	movs	r2, #168	; 0xa8
 800121e:	2100      	movs	r1, #0
 8001220:	2078      	movs	r0, #120	; 0x78
 8001222:	f000 fa7f 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001226:	223f      	movs	r2, #63	; 0x3f
 8001228:	2100      	movs	r1, #0
 800122a:	2078      	movs	r0, #120	; 0x78
 800122c:	f000 fa7a 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001230:	22a4      	movs	r2, #164	; 0xa4
 8001232:	2100      	movs	r1, #0
 8001234:	2078      	movs	r0, #120	; 0x78
 8001236:	f000 fa75 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800123a:	22d3      	movs	r2, #211	; 0xd3
 800123c:	2100      	movs	r1, #0
 800123e:	2078      	movs	r0, #120	; 0x78
 8001240:	f000 fa70 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2078      	movs	r0, #120	; 0x78
 800124a:	f000 fa6b 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800124e:	22d5      	movs	r2, #213	; 0xd5
 8001250:	2100      	movs	r1, #0
 8001252:	2078      	movs	r0, #120	; 0x78
 8001254:	f000 fa66 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001258:	22f0      	movs	r2, #240	; 0xf0
 800125a:	2100      	movs	r1, #0
 800125c:	2078      	movs	r0, #120	; 0x78
 800125e:	f000 fa61 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001262:	22d9      	movs	r2, #217	; 0xd9
 8001264:	2100      	movs	r1, #0
 8001266:	2078      	movs	r0, #120	; 0x78
 8001268:	f000 fa5c 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800126c:	2222      	movs	r2, #34	; 0x22
 800126e:	2100      	movs	r1, #0
 8001270:	2078      	movs	r0, #120	; 0x78
 8001272:	f000 fa57 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001276:	22da      	movs	r2, #218	; 0xda
 8001278:	2100      	movs	r1, #0
 800127a:	2078      	movs	r0, #120	; 0x78
 800127c:	f000 fa52 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001280:	2212      	movs	r2, #18
 8001282:	2100      	movs	r1, #0
 8001284:	2078      	movs	r0, #120	; 0x78
 8001286:	f000 fa4d 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800128a:	22db      	movs	r2, #219	; 0xdb
 800128c:	2100      	movs	r1, #0
 800128e:	2078      	movs	r0, #120	; 0x78
 8001290:	f000 fa48 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	2078      	movs	r0, #120	; 0x78
 800129a:	f000 fa43 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800129e:	228d      	movs	r2, #141	; 0x8d
 80012a0:	2100      	movs	r1, #0
 80012a2:	2078      	movs	r0, #120	; 0x78
 80012a4:	f000 fa3e 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012a8:	2214      	movs	r2, #20
 80012aa:	2100      	movs	r1, #0
 80012ac:	2078      	movs	r0, #120	; 0x78
 80012ae:	f000 fa39 	bl	8001724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012b2:	22af      	movs	r2, #175	; 0xaf
 80012b4:	2100      	movs	r1, #0
 80012b6:	2078      	movs	r0, #120	; 0x78
 80012b8:	f000 fa34 	bl	8001724 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f84d 	bl	800135c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80012c2:	f000 f817 	bl	80012f4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <SSD1306_Init+0x17c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <SSD1306_Init+0x17c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <SSD1306_Init+0x17c>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	00004e20 	.word	0x00004e20
 80012e8:	200002a0 	.word	0x200002a0
 80012ec:	000009c4 	.word	0x000009c4
 80012f0:	2000028c 	.word	0x2000028c

080012f4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e021      	b.n	8001346 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3b50      	subs	r3, #80	; 0x50
 8001308:	b2db      	uxtb	r3, r3
 800130a:	001a      	movs	r2, r3
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	; 0x78
 8001310:	f000 fa08 	bl	8001724 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	; 0x78
 800131a:	f000 fa03 	bl	8001724 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800131e:	2210      	movs	r2, #16
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	; 0x78
 8001324:	f000 f9fe 	bl	8001724 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	01da      	lsls	r2, r3, #7
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <SSD1306_UpdateScreen+0x64>)
 8001330:	18d2      	adds	r2, r2, r3
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	2078      	movs	r0, #120	; 0x78
 8001338:	f000 f96a 	bl	8001610 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	3201      	adds	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d9d9      	bls.n	8001302 <SSD1306_UpdateScreen+0xe>
	}
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	2000008c 	.word	0x2000008c

0800135c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <SSD1306_Fill+0x18>
 8001370:	2100      	movs	r1, #0
 8001372:	e000      	b.n	8001376 <SSD1306_Fill+0x1a>
 8001374:	21ff      	movs	r1, #255	; 0xff
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	009a      	lsls	r2, r3, #2
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SSD1306_Fill+0x30>)
 800137c:	0018      	movs	r0, r3
 800137e:	f003 fd53 	bl	8004e28 <memset>
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	2000008c 	.word	0x2000008c

08001390 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	0004      	movs	r4, r0
 8001398:	0008      	movs	r0, r1
 800139a:	0011      	movs	r1, r2
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	1c22      	adds	r2, r4, #0
 80013a0:	801a      	strh	r2, [r3, #0]
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	1c02      	adds	r2, r0, #0
 80013a6:	801a      	strh	r2, [r3, #0]
 80013a8:	1cfb      	adds	r3, r7, #3
 80013aa:	1c0a      	adds	r2, r1, #0
 80013ac:	701a      	strb	r2, [r3, #0]
	if (
 80013ae:	1dbb      	adds	r3, r7, #6
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	2b7f      	cmp	r3, #127	; 0x7f
 80013b4:	d852      	bhi.n	800145c <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	2b1f      	cmp	r3, #31
 80013bc:	d84e      	bhi.n	800145c <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <SSD1306_DrawPixel+0xd4>)
 80013c0:	791b      	ldrb	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80013c6:	1cfb      	adds	r3, r7, #3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	425a      	negs	r2, r3
 80013cc:	4153      	adcs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	1cfb      	adds	r3, r7, #3
 80013d2:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013d4:	1cfb      	adds	r3, r7, #3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d11e      	bne.n	800141a <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013dc:	1dbb      	adds	r3, r7, #6
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	b298      	uxth	r0, r3
 80013e8:	0003      	movs	r3, r0
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <SSD1306_DrawPixel+0xd8>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	b25a      	sxtb	r2, r3
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	2107      	movs	r1, #7
 80013fa:	400b      	ands	r3, r1
 80013fc:	2101      	movs	r1, #1
 80013fe:	4099      	lsls	r1, r3
 8001400:	000b      	movs	r3, r1
 8001402:	b25b      	sxtb	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b259      	sxtb	r1, r3
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	0003      	movs	r3, r0
 800140e:	01db      	lsls	r3, r3, #7
 8001410:	18d3      	adds	r3, r2, r3
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <SSD1306_DrawPixel+0xd8>)
 8001416:	54d1      	strb	r1, [r2, r3]
 8001418:	e021      	b.n	800145e <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800141a:	1dbb      	adds	r3, r7, #6
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	b298      	uxth	r0, r3
 8001426:	0003      	movs	r3, r0
 8001428:	01db      	lsls	r3, r3, #7
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <SSD1306_DrawPixel+0xd8>)
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	1d3a      	adds	r2, r7, #4
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	2107      	movs	r1, #7
 8001438:	400a      	ands	r2, r1
 800143a:	2101      	movs	r1, #1
 800143c:	4091      	lsls	r1, r2
 800143e:	000a      	movs	r2, r1
 8001440:	b252      	sxtb	r2, r2
 8001442:	43d2      	mvns	r2, r2
 8001444:	b252      	sxtb	r2, r2
 8001446:	4013      	ands	r3, r2
 8001448:	b259      	sxtb	r1, r3
 800144a:	1dbb      	adds	r3, r7, #6
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	0003      	movs	r3, r0
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	18d3      	adds	r3, r2, r3
 8001454:	b2c9      	uxtb	r1, r1
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <SSD1306_DrawPixel+0xd8>)
 8001458:	54d1      	strb	r1, [r2, r3]
 800145a:	e000      	b.n	800145e <SSD1306_DrawPixel+0xce>
		return;
 800145c:	46c0      	nop			; (mov r8, r8)
	}
}
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	2000028c 	.word	0x2000028c
 8001468:	2000008c 	.word	0x2000008c

0800146c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	0002      	movs	r2, r0
 8001474:	1dbb      	adds	r3, r7, #6
 8001476:	801a      	strh	r2, [r3, #0]
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	1c0a      	adds	r2, r1, #0
 800147c:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SSD1306_GotoXY+0x2c>)
 8001480:	1dba      	adds	r2, r7, #6
 8001482:	8812      	ldrh	r2, [r2, #0]
 8001484:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SSD1306_GotoXY+0x2c>)
 8001488:	1d3a      	adds	r2, r7, #4
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	805a      	strh	r2, [r3, #2]
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	2000028c 	.word	0x2000028c

0800149c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6039      	str	r1, [r7, #0]
 80014a4:	0011      	movs	r1, r2
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	1c02      	adds	r2, r0, #0
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	1dbb      	adds	r3, r7, #6
 80014ae:	1c0a      	adds	r2, r1, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <SSD1306_Putc+0x100>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	18d3      	adds	r3, r2, r3
	if (
 80014be:	2b7f      	cmp	r3, #127	; 0x7f
 80014c0:	dc07      	bgt.n	80014d2 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <SSD1306_Putc+0x100>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	001a      	movs	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014ce:	2b1f      	cmp	r3, #31
 80014d0:	dd01      	ble.n	80014d6 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e05e      	b.n	8001594 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e04a      	b.n	8001572 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3b20      	subs	r3, #32
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	7849      	ldrb	r1, [r1, #1]
 80014ea:	434b      	muls	r3, r1
 80014ec:	0019      	movs	r1, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	18cb      	adds	r3, r1, r3
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	e02f      	b.n	8001560 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	409a      	lsls	r2, r3
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	4013      	ands	r3, r2
 800150c:	d011      	beq.n	8001532 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <SSD1306_Putc+0x100>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	b29b      	uxth	r3, r3
 8001516:	18d3      	adds	r3, r2, r3
 8001518:	b298      	uxth	r0, r3
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <SSD1306_Putc+0x100>)
 800151c:	885a      	ldrh	r2, [r3, #2]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	b29b      	uxth	r3, r3
 8001522:	18d3      	adds	r3, r2, r3
 8001524:	b299      	uxth	r1, r3
 8001526:	1dbb      	adds	r3, r7, #6
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001a      	movs	r2, r3
 800152c:	f7ff ff30 	bl	8001390 <SSD1306_DrawPixel>
 8001530:	e013      	b.n	800155a <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <SSD1306_Putc+0x100>)
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	b29b      	uxth	r3, r3
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	b298      	uxth	r0, r3
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <SSD1306_Putc+0x100>)
 8001540:	885a      	ldrh	r2, [r3, #2]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	b29b      	uxth	r3, r3
 8001546:	18d3      	adds	r3, r2, r3
 8001548:	b299      	uxth	r1, r3
 800154a:	1dbb      	adds	r3, r7, #6
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	425a      	negs	r2, r3
 8001550:	4153      	adcs	r3, r2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	001a      	movs	r2, r3
 8001556:	f7ff ff1b 	bl	8001390 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	3301      	adds	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4293      	cmp	r3, r2
 800156a:	d3c9      	bcc.n	8001500 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	001a      	movs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4293      	cmp	r3, r2
 800157c:	d3ae      	bcc.n	80014dc <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <SSD1306_Putc+0x100>)
 8001580:	881a      	ldrh	r2, [r3, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <SSD1306_Putc+0x100>)
 800158e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b006      	add	sp, #24
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000028c 	.word	0x2000028c

080015a0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 80015ae:	e013      	b.n	80015d8 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	7818      	ldrb	r0, [r3, #0]
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	0019      	movs	r1, r3
 80015bc:	f7ff ff6e 	bl	800149c <SSD1306_Putc>
 80015c0:	0003      	movs	r3, r0
 80015c2:	001a      	movs	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d002      	beq.n	80015d2 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	e008      	b.n	80015e4 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e7      	bne.n	80015b0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	781b      	ldrb	r3, [r3, #0]
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}

080015ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <ssd1306_I2C_Init+0x20>)
 80015f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015f6:	e002      	b.n	80015fe <ssd1306_I2C_Init+0x12>
		p--;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f9      	bne.n	80015f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	0003d090 	.word	0x0003d090

08001610 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b091      	sub	sp, #68	; 0x44
 8001614:	af02      	add	r7, sp, #8
 8001616:	0006      	movs	r6, r0
 8001618:	0008      	movs	r0, r1
 800161a:	623a      	str	r2, [r7, #32]
 800161c:	0019      	movs	r1, r3
 800161e:	2327      	movs	r3, #39	; 0x27
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	1c32      	adds	r2, r6, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	2326      	movs	r3, #38	; 0x26
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	1c02      	adds	r2, r0, #0
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	2324      	movs	r3, #36	; 0x24
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	1c0a      	adds	r2, r1, #0
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	466b      	mov	r3, sp
 8001638:	607b      	str	r3, [r7, #4]
	uint8_t dt[count + 1];
 800163a:	2324      	movs	r3, #36	; 0x24
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	633a      	str	r2, [r7, #48]	; 0x30
 8001646:	001a      	movs	r2, r3
 8001648:	613a      	str	r2, [r7, #16]
 800164a:	2200      	movs	r2, #0
 800164c:	617a      	str	r2, [r7, #20]
 800164e:	6938      	ldr	r0, [r7, #16]
 8001650:	6979      	ldr	r1, [r7, #20]
 8001652:	0002      	movs	r2, r0
 8001654:	0f52      	lsrs	r2, r2, #29
 8001656:	000e      	movs	r6, r1
 8001658:	00f6      	lsls	r6, r6, #3
 800165a:	61fe      	str	r6, [r7, #28]
 800165c:	69fe      	ldr	r6, [r7, #28]
 800165e:	4316      	orrs	r6, r2
 8001660:	61fe      	str	r6, [r7, #28]
 8001662:	0002      	movs	r2, r0
 8001664:	00d2      	lsls	r2, r2, #3
 8001666:	61ba      	str	r2, [r7, #24]
 8001668:	001a      	movs	r2, r3
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	2200      	movs	r2, #0
 800166e:	60fa      	str	r2, [r7, #12]
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	0002      	movs	r2, r0
 8001676:	0f52      	lsrs	r2, r2, #29
 8001678:	000e      	movs	r6, r1
 800167a:	00f5      	lsls	r5, r6, #3
 800167c:	4315      	orrs	r5, r2
 800167e:	0002      	movs	r2, r0
 8001680:	00d4      	lsls	r4, r2, #3
 8001682:	3307      	adds	r3, #7
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	466a      	mov	r2, sp
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	469d      	mov	sp, r3
 800168e:	ab02      	add	r3, sp, #8
 8001690:	3300      	adds	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
	dt[0] = reg;
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	2226      	movs	r2, #38	; 0x26
 8001698:	18ba      	adds	r2, r7, r2
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800169e:	2317      	movs	r3, #23
 80016a0:	2220      	movs	r2, #32
 80016a2:	4694      	mov	ip, r2
 80016a4:	44bc      	add	ip, r7
 80016a6:	4463      	add	r3, ip
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e017      	b.n	80016de <ssd1306_I2C_WriteMulti+0xce>
		dt[i] = data[i-1];
 80016ae:	2017      	movs	r0, #23
 80016b0:	2320      	movs	r3, #32
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	181b      	adds	r3, r3, r0
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	6a3a      	ldr	r2, [r7, #32]
 80016bc:	18d2      	adds	r2, r2, r3
 80016be:	2320      	movs	r3, #32
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	181b      	adds	r3, r3, r0
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	7811      	ldrb	r1, [r2, #0]
 80016c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ca:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80016cc:	2320      	movs	r3, #32
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	181b      	adds	r3, r3, r0
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	2320      	movs	r3, #32
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	181b      	adds	r3, r3, r0
 80016da:	3201      	adds	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	2317      	movs	r3, #23
 80016e0:	2220      	movs	r2, #32
 80016e2:	4694      	mov	ip, r2
 80016e4:	44bc      	add	ip, r7
 80016e6:	4463      	add	r3, ip
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2224      	movs	r2, #36	; 0x24
 80016ee:	18ba      	adds	r2, r7, r2
 80016f0:	8812      	ldrh	r2, [r2, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d2db      	bcs.n	80016ae <ssd1306_I2C_WriteMulti+0x9e>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80016f6:	2327      	movs	r3, #39	; 0x27
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b299      	uxth	r1, r3
 80016fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001700:	2324      	movs	r3, #36	; 0x24
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	881c      	ldrh	r4, [r3, #0]
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <ssd1306_I2C_WriteMulti+0x110>)
 8001708:	230a      	movs	r3, #10
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	0023      	movs	r3, r4
 800170e:	f001 fb4d 	bl	8002dac <HAL_I2C_Master_Transmit>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	469d      	mov	sp, r3
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b00f      	add	sp, #60	; 0x3c
 800171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	200002a0 	.word	0x200002a0

08001724 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b087      	sub	sp, #28
 8001728:	af02      	add	r7, sp, #8
 800172a:	0004      	movs	r4, r0
 800172c:	0008      	movs	r0, r1
 800172e:	0011      	movs	r1, r2
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	1c22      	adds	r2, r4, #0
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	1dbb      	adds	r3, r7, #6
 8001738:	1c02      	adds	r2, r0, #0
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	1d7b      	adds	r3, r7, #5
 800173e:	1c0a      	adds	r2, r1, #0
 8001740:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001742:	200c      	movs	r0, #12
 8001744:	183b      	adds	r3, r7, r0
 8001746:	1dba      	adds	r2, r7, #6
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 800174c:	183b      	adds	r3, r7, r0
 800174e:	1d7a      	adds	r2, r7, #5
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b299      	uxth	r1, r3
 800175a:	183a      	adds	r2, r7, r0
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <ssd1306_I2C_Write+0x4c>)
 800175e:	230a      	movs	r3, #10
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2302      	movs	r3, #2
 8001764:	f001 fb22 	bl	8002dac <HAL_I2C_Master_Transmit>
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b005      	add	sp, #20
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	200002a0 	.word	0x200002a0

08001774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x44>)
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_MspInit+0x44>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	619a      	str	r2, [r3, #24]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x44>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x44>)
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_MspInit+0x44>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	61da      	str	r2, [r3, #28]
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_MspInit+0x44>)
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	2314      	movs	r3, #20
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	0018      	movs	r0, r3
 80017ca:	2314      	movs	r3, #20
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f003 fb2a 	bl	8004e28 <memset>
  if(hadc->Instance==ADC1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <HAL_ADC_MspInit+0xd4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d154      	bne.n	8001888 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_ADC_MspInit+0xd8>)
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_ADC_MspInit+0xd8>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0089      	lsls	r1, r1, #2
 80017e8:	430a      	orrs	r2, r1
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <HAL_ADC_MspInit+0xd8>)
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_ADC_MspInit+0xd8>)
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_ADC_MspInit+0xd8>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0289      	lsls	r1, r1, #10
 8001804:	430a      	orrs	r2, r1
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_ADC_MspInit+0xd8>)
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BAT__Pin;
 8001816:	2114      	movs	r1, #20
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2203      	movs	r2, #3
 8001822:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT__GPIO_Port, &GPIO_InitStruct);
 800182a:	187a      	adds	r2, r7, r1
 800182c:	2390      	movs	r3, #144	; 0x90
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f001 f870 	bl	8002918 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_ADC_MspInit+0xe0>)
 800183c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	0052      	lsls	r2, r2, #1
 8001856:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001862:	2220      	movs	r2, #32
 8001864:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 800186e:	0018      	movs	r0, r3
 8001870:	f000 feba 	bl	80025e8 <HAL_DMA_Init>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d001      	beq.n	800187c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001878:	f7ff fc78 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_ADC_MspInit+0xdc>)
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b00a      	add	sp, #40	; 0x28
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40012400 	.word	0x40012400
 8001894:	40021000 	.word	0x40021000
 8001898:	20000354 	.word	0x20000354
 800189c:	40020008 	.word	0x40020008

080018a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2314      	movs	r3, #20
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f003 fab8 	bl	8004e28 <memset>
  if(hi2c->Instance==I2C1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_I2C_MspInit+0x90>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d131      	bne.n	8001926 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_I2C_MspInit+0x94>)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_I2C_MspInit+0x94>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	02c9      	lsls	r1, r1, #11
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_I2C_MspInit+0x94>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	02db      	lsls	r3, r3, #11
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80018de:	2114      	movs	r1, #20
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	22c0      	movs	r2, #192	; 0xc0
 80018e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2212      	movs	r2, #18
 80018ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2201      	movs	r2, #1
 80018f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2203      	movs	r2, #3
 80018f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2201      	movs	r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_I2C_MspInit+0x98>)
 8001902:	0019      	movs	r1, r3
 8001904:	0010      	movs	r0, r2
 8001906:	f001 f807 	bl	8002918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_I2C_MspInit+0x94>)
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_I2C_MspInit+0x94>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0389      	lsls	r1, r1, #14
 8001914:	430a      	orrs	r2, r1
 8001916:	61da      	str	r2, [r3, #28]
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_I2C_MspInit+0x94>)
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	039b      	lsls	r3, r3, #14
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b00a      	add	sp, #40	; 0x28
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40005400 	.word	0x40005400
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400

0800193c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_TIM_PWM_MspInit+0x34>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10b      	bne.n	8001966 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_TIM_PWM_MspInit+0x38>)
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_TIM_PWM_MspInit+0x38>)
 8001954:	2102      	movs	r1, #2
 8001956:	430a      	orrs	r2, r1
 8001958:	61da      	str	r2, [r3, #28]
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_TIM_PWM_MspInit+0x38>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40000400 	.word	0x40000400
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	2314      	movs	r3, #20
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	0018      	movs	r0, r3
 8001986:	2314      	movs	r3, #20
 8001988:	001a      	movs	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f003 fa4c 	bl	8004e28 <memset>
  if(htim->Instance==TIM3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <HAL_TIM_MspPostInit+0xbc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d148      	bne.n	8001a2c <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_TIM_MspPostInit+0xc0>)
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_TIM_MspPostInit+0xc0>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0289      	lsls	r1, r1, #10
 80019a4:	430a      	orrs	r2, r1
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_TIM_MspPostInit+0xc0>)
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_TIM_MspPostInit+0xc0>)
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_TIM_MspPostInit+0xc0>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	02c9      	lsls	r1, r1, #11
 80019c0:	430a      	orrs	r2, r1
 80019c2:	615a      	str	r2, [r3, #20]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_TIM_MspPostInit+0xc0>)
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	02db      	lsls	r3, r3, #11
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWMR_Pin;
 80019d2:	2414      	movs	r4, #20
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2202      	movs	r2, #2
 80019de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	2201      	movs	r2, #1
 80019f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWMR_GPIO_Port, &GPIO_InitStruct);
 80019f2:	193a      	adds	r2, r7, r4
 80019f4:	2390      	movs	r3, #144	; 0x90
 80019f6:	05db      	lsls	r3, r3, #23
 80019f8:	0011      	movs	r1, r2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 ff8c 	bl	8002918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWMG_Pin|PWMB_Pin;
 8001a00:	0021      	movs	r1, r4
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2203      	movs	r2, #3
 8001a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_TIM_MspPostInit+0xc4>)
 8001a24:	0019      	movs	r1, r3
 8001a26:	0010      	movs	r0, r2
 8001a28:	f000 ff76 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b00b      	add	sp, #44	; 0x2c
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f8d4 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a72:	2004      	movs	r0, #4
 8001a74:	f001 f8de 	bl	8002c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a78:	2008      	movs	r0, #8
 8001a7a:	f001 f8db 	bl	8002c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001a88:	2010      	movs	r0, #16
 8001a8a:	f001 f8d3 	bl	8002c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a8e:	2020      	movs	r0, #32
 8001a90:	f001 f8d0 	bl	8002c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <DMA1_Channel1_IRQHandler+0x14>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 fe4e 	bl	8002744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000354 	.word	0x20000354

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	18d3      	adds	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f003 f976 	bl	8004dd4 <__errno>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	425b      	negs	r3, r3
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	18d2      	adds	r2, r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b006      	add	sp, #24
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20001000 	.word	0x20001000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	20000294 	.word	0x20000294
 8001b1c:	200003e0 	.word	0x200003e0

08001b20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b2c:	480d      	ldr	r0, [pc, #52]	; (8001b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b32:	490e      	ldr	r1, [pc, #56]	; (8001b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <LoopForever+0xe>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b48:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <LoopForever+0x16>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b56:	f7ff ffe3 	bl	8001b20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b5a:	f003 f941 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff f871 	bl	8000c44 <main>

08001b62 <LoopForever>:

LoopForever:
    b LoopForever
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
  ldr   r0, =_estack
 8001b64:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b70:	08005730 	.word	0x08005730
  ldr r2, =_sbss
 8001b74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b78:	200003e0 	.word	0x200003e0

08001b7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_IRQHandler>
	...

08001b80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_Init+0x24>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_Init+0x24>)
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 f809 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b96:	f7ff fded 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bb2:	681c      	ldr	r4, [r3, #0]
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_InitTick+0x60>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	0019      	movs	r1, r3
 8001bba:	23fa      	movs	r3, #250	; 0xfa
 8001bbc:	0098      	lsls	r0, r3, #2
 8001bbe:	f7fe faa3 	bl	8000108 <__udivsi3>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	f7fe fa9e 	bl	8000108 <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 fcfd 	bl	80025ce <HAL_SYSTICK_Config>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e00f      	b.n	8001bfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d80b      	bhi.n	8001bfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	2301      	movs	r3, #1
 8001be6:	425b      	negs	r3, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 fcca 	bl	8002584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_InitTick+0x64>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b003      	add	sp, #12
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x1c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	001a      	movs	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_IncTick+0x20>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	18d2      	adds	r2, r2, r3
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_IncTick+0x20>)
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200003d8 	.word	0x200003d8

08001c34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_GetTick+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	200003d8 	.word	0x200003d8

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_Delay+0x40>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	001a      	movs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	f7ff ffe0 	bl	8001c34 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000008 	.word	0x20000008

08001c8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	230f      	movs	r3, #15
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e125      	b.n	8001ef6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2234      	movs	r2, #52	; 0x34
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff fd7a 	bl	80017bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d000      	beq.n	8001cd4 <HAL_ADC_Init+0x48>
 8001cd2:	e103      	b.n	8001edc <HAL_ADC_Init+0x250>
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d000      	beq.n	8001ce0 <HAL_ADC_Init+0x54>
 8001cde:	e0fd      	b.n	8001edc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001cea:	d000      	beq.n	8001cee <HAL_ADC_Init+0x62>
 8001cec:	e0f6      	b.n	8001edc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	4a83      	ldr	r2, [pc, #524]	; (8001f00 <HAL_ADC_Init+0x274>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d112      	bne.n	8001d32 <HAL_ADC_Init+0xa6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d009      	beq.n	8001d2e <HAL_ADC_Init+0xa2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	401a      	ands	r2, r3
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_Init+0xa6>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_Init+0xa8>
 8001d32:	2300      	movs	r3, #0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d116      	bne.n	8001d66 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2218      	movs	r2, #24
 8001d40:	4393      	bics	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	0899      	lsrs	r1, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4964      	ldr	r1, [pc, #400]	; (8001f04 <HAL_ADC_Init+0x278>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
 8001d7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e5b      	ldrb	r3, [r3, #25]
 8001d80:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d82:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7e9b      	ldrb	r3, [r3, #26]
 8001d88:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d002      	beq.n	8001d9a <HAL_ADC_Init+0x10e>
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	e000      	b.n	8001d9c <HAL_ADC_Init+0x110>
 8001d9a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d9c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001da2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_Init+0x124>
 8001dac:	2304      	movs	r3, #4
 8001dae:	e000      	b.n	8001db2 <HAL_ADC_Init+0x126>
 8001db0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001db2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2124      	movs	r1, #36	; 0x24
 8001db8:	5c5b      	ldrb	r3, [r3, r1]
 8001dba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001dbc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7edb      	ldrb	r3, [r3, #27]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d115      	bne.n	8001df8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7e9b      	ldrb	r3, [r3, #26]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	0252      	lsls	r2, r2, #9
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	e00b      	b.n	8001df8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	2220      	movs	r2, #32
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2201      	movs	r2, #1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	23c2      	movs	r3, #194	; 0xc2
 8001dfe:	33ff      	adds	r3, #255	; 0xff
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d007      	beq.n	8001e14 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d01b      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d017      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d013      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d00f      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d00b      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d007      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d003      	beq.n	8001e68 <HAL_ADC_Init+0x1dc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2b07      	cmp	r3, #7
 8001e66:	d112      	bne.n	8001e8e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2107      	movs	r1, #7
 8001e74:	438a      	bics	r2, r1
 8001e76:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6959      	ldr	r1, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	2207      	movs	r2, #7
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_ADC_Init+0x27c>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	4393      	bics	r3, r2
 8001eac:	2201      	movs	r2, #1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001eb4:	e01c      	b.n	8001ef0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	2212      	movs	r2, #18
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	2201      	movs	r2, #1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001eda:	e009      	b.n	8001ef0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	fffffefd 	.word	0xfffffefd
 8001f04:	fffe0219 	.word	0xfffe0219
 8001f08:	833fffe7 	.word	0x833fffe7

08001f0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2317      	movs	r3, #23
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2204      	movs	r2, #4
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d15e      	bne.n	8001fea <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2234      	movs	r2, #52	; 0x34
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Start_DMA+0x2e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e05e      	b.n	8001ff8 <HAL_ADC_Start_DMA+0xec>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2234      	movs	r2, #52	; 0x34
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	7e5b      	ldrb	r3, [r3, #25]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d007      	beq.n	8001f5a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f4a:	2317      	movs	r3, #23
 8001f4c:	18fc      	adds	r4, r7, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 f96b 	bl	800222c <ADC_Enable>
 8001f56:	0003      	movs	r3, r0
 8001f58:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f5a:	2317      	movs	r3, #23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d146      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	4a25      	ldr	r2, [pc, #148]	; (8002000 <HAL_ADC_Start_DMA+0xf4>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	0052      	lsls	r2, r2, #1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2234      	movs	r2, #52	; 0x34
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <HAL_ADC_Start_DMA+0xf8>)
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_ADC_Start_DMA+0xfc>)
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_ADC_Start_DMA+0x100>)
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	221c      	movs	r2, #28
 8001fa2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2110      	movs	r1, #16
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3340      	adds	r3, #64	; 0x40
 8001fce:	0019      	movs	r1, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f000 fb50 	bl	8002678 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fea:	2317      	movs	r3, #23
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	2317      	movs	r3, #23
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b007      	add	sp, #28
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	fffff0fe 	.word	0xfffff0fe
 8002004:	08002325 	.word	0x08002325
 8002008:	080023d9 	.word	0x080023d9
 800200c:	080023f7 	.word	0x080023f7

08002010 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204a:	230f      	movs	r3, #15
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	055b      	lsls	r3, r3, #21
 800205e:	429a      	cmp	r2, r3
 8002060:	d011      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x46>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00d      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x46>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	2b02      	cmp	r3, #2
 8002070:	d009      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x46>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	2b03      	cmp	r3, #3
 8002078:	d005      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x46>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	2b04      	cmp	r3, #4
 8002080:	d001      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x46>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2234      	movs	r2, #52	; 0x34
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x54>
 8002090:	2302      	movs	r3, #2
 8002092:	e0bb      	b.n	800220c <HAL_ADC_ConfigChannel+0x1cc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2234      	movs	r2, #52	; 0x34
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2204      	movs	r2, #4
 80020a4:	4013      	ands	r3, r2
 80020a6:	d000      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x6a>
 80020a8:	e09f      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_ADC_ConfigChannel+0x1d4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d100      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x76>
 80020b4:	e077      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	409a      	lsls	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d037      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d033      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d02f      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d02b      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d027      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d023      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	2b06      	cmp	r3, #6
 8002106:	d01f      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b07      	cmp	r3, #7
 800210e:	d01b      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2107      	movs	r1, #7
 800211c:	400b      	ands	r3, r1
 800211e:	429a      	cmp	r2, r3
 8002120:	d012      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2107      	movs	r1, #7
 800212e:	438a      	bics	r2, r1
 8002130:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6959      	ldr	r1, [r3, #20]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2207      	movs	r2, #7
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b10      	cmp	r3, #16
 800214e:	d003      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x118>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b11      	cmp	r3, #17
 8002156:	d152      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_ADC_ConfigChannel+0x1d8>)
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b10      	cmp	r3, #16
 8002162:	d102      	bne.n	800216a <HAL_ADC_ConfigChannel+0x12a>
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	041b      	lsls	r3, r3, #16
 8002168:	e001      	b.n	800216e <HAL_ADC_ConfigChannel+0x12e>
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	03db      	lsls	r3, r3, #15
 800216e:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_ADC_ConfigChannel+0x1d8>)
 8002170:	430b      	orrs	r3, r1
 8002172:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b10      	cmp	r3, #16
 800217a:	d140      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_ADC_ConfigChannel+0x1dc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4927      	ldr	r1, [pc, #156]	; (8002220 <HAL_ADC_ConfigChannel+0x1e0>)
 8002182:	0018      	movs	r0, r3
 8002184:	f7fd ffc0 	bl	8000108 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	001a      	movs	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	189b      	adds	r3, r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002196:	e002      	b.n	800219e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3b01      	subs	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x158>
 80021a4:	e02b      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	4099      	lsls	r1, r3
 80021b4:	000b      	movs	r3, r1
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d003      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x190>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b11      	cmp	r3, #17
 80021ce:	d116      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_ADC_ConfigChannel+0x1d8>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x1a0>
 80021dc:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_ADC_ConfigChannel+0x1e4>)
 80021de:	e000      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x1a2>
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x1e8>)
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_ADC_ConfigChannel+0x1d8>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e009      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	2220      	movs	r2, #32
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80021f6:	230f      	movs	r3, #15
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2234      	movs	r2, #52	; 0x34
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002206:	230f      	movs	r3, #15
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	781b      	ldrb	r3, [r3, #0]
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	00001001 	.word	0x00001001
 8002218:	40012708 	.word	0x40012708
 800221c:	20000000 	.word	0x20000000
 8002220:	000f4240 	.word	0x000f4240
 8002224:	ff7fffff 	.word	0xff7fffff
 8002228:	ffbfffff 	.word	0xffbfffff

0800222c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2203      	movs	r2, #3
 8002244:	4013      	ands	r3, r2
 8002246:	2b01      	cmp	r3, #1
 8002248:	d112      	bne.n	8002270 <ADC_Enable+0x44>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	2b01      	cmp	r3, #1
 8002256:	d009      	beq.n	800226c <ADC_Enable+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	401a      	ands	r2, r3
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	429a      	cmp	r2, r3
 800226a:	d101      	bne.n	8002270 <ADC_Enable+0x44>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <ADC_Enable+0x46>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d14b      	bne.n	800230e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a26      	ldr	r2, [pc, #152]	; (8002318 <ADC_Enable+0xec>)
 800227e:	4013      	ands	r3, r2
 8002280:	d00d      	beq.n	800229e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	2210      	movs	r2, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2201      	movs	r2, #1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e038      	b.n	8002310 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <ADC_Enable+0xf0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <ADC_Enable+0xf4>)
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fd ff27 	bl	8000108 <__udivsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022be:	e002      	b.n	80022c6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80022cc:	f7ff fcb2 	bl	8001c34 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022d4:	e014      	b.n	8002300 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022d6:	f7ff fcad 	bl	8001c34 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d90d      	bls.n	8002300 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2210      	movs	r2, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	2201      	movs	r2, #1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e007      	b.n	8002310 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	2b01      	cmp	r3, #1
 800230c:	d1e3      	bne.n	80022d6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}
 8002318:	80000017 	.word	0x80000017
 800231c:	20000000 	.word	0x20000000
 8002320:	000f4240 	.word	0x000f4240

08002324 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	2250      	movs	r2, #80	; 0x50
 8002338:	4013      	ands	r3, r2
 800233a:	d140      	bne.n	80023be <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	431a      	orrs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	23c0      	movs	r3, #192	; 0xc0
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d12d      	bne.n	80023b4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800235c:	2b00      	cmp	r3, #0
 800235e:	d129      	bne.n	80023b4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2208      	movs	r2, #8
 8002368:	4013      	ands	r3, r2
 800236a:	2b08      	cmp	r3, #8
 800236c:	d122      	bne.n	80023b4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2204      	movs	r2, #4
 8002376:	4013      	ands	r3, r2
 8002378:	d110      	bne.n	800239c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	210c      	movs	r1, #12
 8002386:	438a      	bics	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <ADC_DMAConvCplt+0xb0>)
 8002390:	4013      	ands	r3, r2
 8002392:	2201      	movs	r2, #1
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
 800239a:	e00b      	b.n	80023b4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	2220      	movs	r2, #32
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	2201      	movs	r2, #1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff fe2a 	bl	8002010 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80023bc:	e005      	b.n	80023ca <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	0010      	movs	r0, r2
 80023c8:	4798      	blx	r3
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b004      	add	sp, #16
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	fffffefe 	.word	0xfffffefe

080023d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff fe19 	bl	8002020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b004      	add	sp, #16
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	2204      	movs	r2, #4
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff fe06 	bl	8002030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}

0800242c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	0002      	movs	r2, r0
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b7f      	cmp	r3, #127	; 0x7f
 800243e:	d809      	bhi.n	8002454 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	001a      	movs	r2, r3
 8002446:	231f      	movs	r3, #31
 8002448:	401a      	ands	r2, r3
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_EnableIRQ+0x30>)
 800244c:	2101      	movs	r1, #1
 800244e:	4091      	lsls	r1, r2
 8002450:	000a      	movs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
  }
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	0002      	movs	r2, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b7f      	cmp	r3, #127	; 0x7f
 8002474:	d828      	bhi.n	80024c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002476:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <__NVIC_SetPriority+0xd4>)
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b25b      	sxtb	r3, r3
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	33c0      	adds	r3, #192	; 0xc0
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	589b      	ldr	r3, [r3, r2]
 8002486:	1dfa      	adds	r2, r7, #7
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	0011      	movs	r1, r2
 800248c:	2203      	movs	r2, #3
 800248e:	400a      	ands	r2, r1
 8002490:	00d2      	lsls	r2, r2, #3
 8002492:	21ff      	movs	r1, #255	; 0xff
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	43d2      	mvns	r2, r2
 800249a:	401a      	ands	r2, r3
 800249c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	401a      	ands	r2, r3
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	2303      	movs	r3, #3
 80024ae:	4003      	ands	r3, r0
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b4:	481f      	ldr	r0, [pc, #124]	; (8002534 <__NVIC_SetPriority+0xd4>)
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	430a      	orrs	r2, r1
 80024c0:	33c0      	adds	r3, #192	; 0xc0
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024c6:	e031      	b.n	800252c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <__NVIC_SetPriority+0xd8>)
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	0019      	movs	r1, r3
 80024d0:	230f      	movs	r3, #15
 80024d2:	400b      	ands	r3, r1
 80024d4:	3b08      	subs	r3, #8
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3306      	adds	r3, #6
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	18d3      	adds	r3, r2, r3
 80024de:	3304      	adds	r3, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1dfa      	adds	r2, r7, #7
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	0011      	movs	r1, r2
 80024e8:	2203      	movs	r2, #3
 80024ea:	400a      	ands	r2, r1
 80024ec:	00d2      	lsls	r2, r2, #3
 80024ee:	21ff      	movs	r1, #255	; 0xff
 80024f0:	4091      	lsls	r1, r2
 80024f2:	000a      	movs	r2, r1
 80024f4:	43d2      	mvns	r2, r2
 80024f6:	401a      	ands	r2, r3
 80024f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	019b      	lsls	r3, r3, #6
 80024fe:	22ff      	movs	r2, #255	; 0xff
 8002500:	401a      	ands	r2, r3
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	0018      	movs	r0, r3
 8002508:	2303      	movs	r3, #3
 800250a:	4003      	ands	r3, r0
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002510:	4809      	ldr	r0, [pc, #36]	; (8002538 <__NVIC_SetPriority+0xd8>)
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	001c      	movs	r4, r3
 8002518:	230f      	movs	r3, #15
 800251a:	4023      	ands	r3, r4
 800251c:	3b08      	subs	r3, #8
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	430a      	orrs	r2, r1
 8002522:	3306      	adds	r3, #6
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	18c3      	adds	r3, r0, r3
 8002528:	3304      	adds	r3, #4
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b003      	add	sp, #12
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	e000e100 	.word	0xe000e100
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <SysTick_Config+0x40>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e010      	b.n	8002574 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <SysTick_Config+0x44>)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	3a01      	subs	r2, #1
 8002558:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	2301      	movs	r3, #1
 800255c:	425b      	negs	r3, r3
 800255e:	2103      	movs	r1, #3
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ff7d 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <SysTick_Config+0x44>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <SysTick_Config+0x44>)
 800256e:	2207      	movs	r2, #7
 8002570:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002572:	2300      	movs	r3, #0
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	00ffffff 	.word	0x00ffffff
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	210f      	movs	r1, #15
 8002590:	187b      	adds	r3, r7, r1
 8002592:	1c02      	adds	r2, r0, #0
 8002594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	187b      	adds	r3, r7, r1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b25b      	sxtb	r3, r3
 800259e:	0011      	movs	r1, r2
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b004      	add	sp, #16
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	0002      	movs	r2, r0
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7ff ff33 	bl	800242c <__NVIC_EnableIRQ>
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ffaf 	bl	800253c <SysTick_Config>
 80025de:	0003      	movs	r3, r0
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e036      	b.n	800266c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2221      	movs	r2, #33	; 0x21
 8002602:	2102      	movs	r1, #2
 8002604:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_DMA_Init+0x8c>)
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f946 	bl	80028e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2221      	movs	r2, #33	; 0x21
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}  
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b004      	add	sp, #16
 8002672:	bd80      	pop	{r7, pc}
 8002674:	ffffc00f 	.word	0xffffc00f

08002678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002686:	2317      	movs	r3, #23
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	5c9b      	ldrb	r3, [r3, r2]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_DMA_Start_IT+0x24>
 8002698:	2302      	movs	r3, #2
 800269a:	e04f      	b.n	800273c <HAL_DMA_Start_IT+0xc4>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2221      	movs	r2, #33	; 0x21
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d13a      	bne.n	8002726 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	2102      	movs	r1, #2
 80026b6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	438a      	bics	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f8d7 	bl	8002888 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	210e      	movs	r1, #14
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e00f      	b.n	8002714 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	210a      	movs	r1, #10
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2104      	movs	r1, #4
 8002710:	438a      	bics	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e007      	b.n	8002736 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800272e:	2317      	movs	r3, #23
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002736:	2317      	movs	r3, #23
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	781b      	ldrb	r3, [r3, #0]
} 
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b006      	add	sp, #24
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2204      	movs	r2, #4
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	d024      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x72>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2204      	movs	r2, #4
 8002770:	4013      	ands	r3, r2
 8002772:	d020      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2220      	movs	r2, #32
 800277c:	4013      	ands	r3, r2
 800277e:	d107      	bne.n	8002790 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	2104      	movs	r1, #4
 800279a:	4091      	lsls	r1, r2
 800279c:	000a      	movs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d100      	bne.n	80027aa <HAL_DMA_IRQHandler+0x66>
 80027a8:	e06a      	b.n	8002880 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	0010      	movs	r0, r2
 80027b2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	e064      	b.n	8002880 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2202      	movs	r2, #2
 80027bc:	409a      	lsls	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_DMA_IRQHandler+0xda>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d027      	beq.n	800281e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4013      	ands	r3, r2
 80027d8:	d10b      	bne.n	80027f2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	210a      	movs	r1, #10
 80027e6:	438a      	bics	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2221      	movs	r2, #33	; 0x21
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	2102      	movs	r1, #2
 80027fc:	4091      	lsls	r1, r2
 80027fe:	000a      	movs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d036      	beq.n	8002880 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	0010      	movs	r0, r2
 800281a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800281c:	e030      	b.n	8002880 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2208      	movs	r2, #8
 8002824:	409a      	lsls	r2, r3
 8002826:	0013      	movs	r3, r2
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	d028      	beq.n	8002880 <HAL_DMA_IRQHandler+0x13c>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2208      	movs	r2, #8
 8002832:	4013      	ands	r3, r2
 8002834:	d024      	beq.n	8002880 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	210e      	movs	r1, #14
 8002842:	438a      	bics	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2101      	movs	r1, #1
 8002850:	4091      	lsls	r1, r2
 8002852:	000a      	movs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	0010      	movs	r0, r2
 800287c:	4798      	blx	r3
    }
   }
}  
 800287e:	e7ff      	b.n	8002880 <HAL_DMA_IRQHandler+0x13c>
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}

08002888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	2101      	movs	r1, #1
 80028a0:	4091      	lsls	r1, r2
 80028a2:	000a      	movs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d108      	bne.n	80028c8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028c6:	e007      	b.n	80028d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b004      	add	sp, #16
 80028de:	bd80      	pop	{r7, pc}

080028e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <DMA_CalcBaseAndBitshift+0x30>)
 80028ee:	4694      	mov	ip, r2
 80028f0:	4463      	add	r3, ip
 80028f2:	2114      	movs	r1, #20
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fd fc07 	bl	8000108 <__udivsi3>
 80028fa:	0003      	movs	r3, r0
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <DMA_CalcBaseAndBitshift+0x34>)
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}
 8002910:	bffdfff8 	.word	0xbffdfff8
 8002914:	40020000 	.word	0x40020000

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	e14f      	b.n	8002bc8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4091      	lsls	r1, r2
 8002932:	000a      	movs	r2, r1
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d100      	bne.n	8002940 <HAL_GPIO_Init+0x28>
 800293e:	e140      	b.n	8002bc2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00b      	beq.n	8002960 <HAL_GPIO_Init+0x48>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002954:	2b11      	cmp	r3, #17
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	43da      	mvns	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	2201      	movs	r2, #1
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
 80029b4:	0013      	movs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	409a      	lsls	r2, r3
 80029d0:	0013      	movs	r3, r2
 80029d2:	43da      	mvns	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	409a      	lsls	r2, r3
 80029e4:	0013      	movs	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0xea>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d123      	bne.n	8002a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	58d3      	ldr	r3, [r2, r3]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2207      	movs	r2, #7
 8002a14:	4013      	ands	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2107      	movs	r1, #7
 8002a2e:	400b      	ands	r3, r1
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	409a      	lsls	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	6939      	ldr	r1, [r7, #16]
 8002a48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2203      	movs	r2, #3
 8002a68:	401a      	ands	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	055b      	lsls	r3, r3, #21
 8002a86:	4013      	ands	r3, r2
 8002a88:	d100      	bne.n	8002a8c <HAL_GPIO_Init+0x174>
 8002a8a:	e09a      	b.n	8002bc2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8c:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <HAL_GPIO_Init+0x2c8>)
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_GPIO_Init+0x2c8>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	430a      	orrs	r2, r1
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_GPIO_Init+0x2c8>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aa4:	4a4f      	ldr	r2, [pc, #316]	; (8002be4 <HAL_GPIO_Init+0x2cc>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	589b      	ldr	r3, [r3, r2]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	409a      	lsls	r2, r3
 8002abe:	0013      	movs	r3, r2
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	2390      	movs	r3, #144	; 0x90
 8002acc:	05db      	lsls	r3, r3, #23
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x1e2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a44      	ldr	r2, [pc, #272]	; (8002be8 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x1de>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a43      	ldr	r2, [pc, #268]	; (8002bec <HAL_GPIO_Init+0x2d4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x1da>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a42      	ldr	r2, [pc, #264]	; (8002bf0 <HAL_GPIO_Init+0x2d8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x1d6>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x1e4>
 8002aee:	2305      	movs	r3, #5
 8002af0:	e004      	b.n	8002afc <HAL_GPIO_Init+0x1e4>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x1e4>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x1e4>
 8002afa:	2300      	movs	r3, #0
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	2103      	movs	r1, #3
 8002b00:	400a      	ands	r2, r1
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4093      	lsls	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b0c:	4935      	ldr	r1, [pc, #212]	; (8002be4 <HAL_GPIO_Init+0x2cc>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43da      	mvns	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	4013      	ands	r3, r2
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	029b      	lsls	r3, r3, #10
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43da      	mvns	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	035b      	lsls	r3, r3, #13
 8002b86:	4013      	ands	r3, r2
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	039b      	lsls	r3, r3, #14
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	40da      	lsrs	r2, r3
 8002bd0:	1e13      	subs	r3, r2, #0
 8002bd2:	d000      	beq.n	8002bd6 <HAL_GPIO_Init+0x2be>
 8002bd4:	e6a8      	b.n	8002928 <HAL_GPIO_Init+0x10>
  } 
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010000 	.word	0x40010000
 8002be8:	48000400 	.word	0x48000400
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	48000c00 	.word	0x48000c00
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	0008      	movs	r0, r1
 8002c02:	0011      	movs	r1, r2
 8002c04:	1cbb      	adds	r3, r7, #2
 8002c06:	1c02      	adds	r2, r0, #0
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	1c7b      	adds	r3, r7, #1
 8002c0c:	1c0a      	adds	r2, r1, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	1c7b      	adds	r3, r7, #1
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c18:	1cbb      	adds	r3, r7, #2
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c22:	1cbb      	adds	r3, r7, #2
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	1dba      	adds	r2, r7, #6
 8002c46:	8812      	ldrh	r2, [r2, #0]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d008      	beq.n	8002c5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c4e:	1dba      	adds	r2, r7, #6
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c54:	1dbb      	adds	r3, r7, #6
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 f807 	bl	8002c6c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b002      	add	sp, #8
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	40010400 	.word	0x40010400

08002c6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	0002      	movs	r2, r0
 8002c74:	1dbb      	adds	r3, r7, #6
 8002c76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e082      	b.n	8002d98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2241      	movs	r2, #65	; 0x41
 8002c96:	5c9b      	ldrb	r3, [r3, r2]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2240      	movs	r2, #64	; 0x40
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fdf9 	bl	80018a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2241      	movs	r2, #65	; 0x41
 8002cb2:	2124      	movs	r1, #36	; 0x24
 8002cb4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4934      	ldr	r1, [pc, #208]	; (8002da0 <HAL_I2C_Init+0x120>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4931      	ldr	r1, [pc, #196]	; (8002da4 <HAL_I2C_Init+0x124>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0209      	lsls	r1, r1, #8
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e007      	b.n	8002d0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2184      	movs	r1, #132	; 0x84
 8002d08:	0209      	lsls	r1, r1, #8
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d104      	bne.n	8002d20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	491f      	ldr	r1, [pc, #124]	; (8002da8 <HAL_I2C_Init+0x128>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	491a      	ldr	r1, [pc, #104]	; (8002da4 <HAL_I2C_Init+0x124>)
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69d9      	ldr	r1, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	; 0x41
 8002d84:	2120      	movs	r1, #32
 8002d86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2242      	movs	r2, #66	; 0x42
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	f0ffffff 	.word	0xf0ffffff
 8002da4:	ffff7fff 	.word	0xffff7fff
 8002da8:	02008000 	.word	0x02008000

08002dac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	0008      	movs	r0, r1
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	0019      	movs	r1, r3
 8002dba:	230a      	movs	r3, #10
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	1c02      	adds	r2, r0, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	1c0a      	adds	r2, r1, #0
 8002dc8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2241      	movs	r2, #65	; 0x41
 8002dce:	5c9b      	ldrb	r3, [r3, r2]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d000      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0x2c>
 8002dd6:	e0e7      	b.n	8002fa8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2240      	movs	r2, #64	; 0x40
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Master_Transmit+0x3a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0e1      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1fe>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2240      	movs	r2, #64	; 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dee:	f7fe ff21 	bl	8001c34 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	0219      	lsls	r1, r3, #8
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	f000 fd3e 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0cc      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2241      	movs	r2, #65	; 0x41
 8002e14:	2121      	movs	r1, #33	; 0x21
 8002e16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2242      	movs	r2, #66	; 0x42
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2208      	movs	r2, #8
 8002e30:	18ba      	adds	r2, r7, r2
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d911      	bls.n	8002e6a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	045c      	lsls	r4, r3, #17
 8002e56:	230a      	movs	r3, #10
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	8819      	ldrh	r1, [r3, #0]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <HAL_I2C_Master_Transmit+0x208>)
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	0023      	movs	r3, r4
 8002e64:	f000 fe2e 	bl	8003ac4 <I2C_TransferConfig>
 8002e68:	e075      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	049c      	lsls	r4, r3, #18
 8002e7e:	230a      	movs	r3, #10
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	8819      	ldrh	r1, [r3, #0]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <HAL_I2C_Master_Transmit+0x208>)
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	0023      	movs	r3, r4
 8002e8c:	f000 fe1a 	bl	8003ac4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e90:	e061      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fd32 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e081      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d03a      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0x1aa>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d136      	bne.n	8002f56 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	f000 fcc5 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e053      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2bff      	cmp	r3, #255	; 0xff
 8002f0a:	d911      	bls.n	8002f30 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	22ff      	movs	r2, #255	; 0xff
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	045c      	lsls	r4, r3, #17
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	8819      	ldrh	r1, [r3, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	0023      	movs	r3, r4
 8002f2a:	f000 fdcb 	bl	8003ac4 <I2C_TransferConfig>
 8002f2e:	e012      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	049c      	lsls	r4, r3, #18
 8002f44:	230a      	movs	r3, #10
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	8819      	ldrh	r1, [r3, #0]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	0023      	movs	r3, r4
 8002f52:	f000 fdb7 	bl	8003ac4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d198      	bne.n	8002e92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fd0a 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f6c:	1e03      	subs	r3, r0, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e01a      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	490c      	ldr	r1, [pc, #48]	; (8002fb8 <HAL_I2C_Master_Transmit+0x20c>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2241      	movs	r2, #65	; 0x41
 8002f90:	2120      	movs	r1, #32
 8002f92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2242      	movs	r2, #66	; 0x42
 8002f98:	2100      	movs	r1, #0
 8002f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b007      	add	sp, #28
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	80002000 	.word	0x80002000
 8002fb8:	fe00e800 	.word	0xfe00e800

08002fbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	000c      	movs	r4, r1
 8002fc6:	0010      	movs	r0, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	230a      	movs	r3, #10
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	1c22      	adds	r2, r4, #0
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	1c02      	adds	r2, r0, #0
 8002fd8:	801a      	strh	r2, [r3, #0]
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	1c0a      	adds	r2, r1, #0
 8002fde:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2241      	movs	r2, #65	; 0x41
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d000      	beq.n	8002fee <HAL_I2C_Mem_Write+0x32>
 8002fec:	e10c      	b.n	8003208 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <HAL_I2C_Mem_Write+0x42>
 8002ff4:	232c      	movs	r3, #44	; 0x2c
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0ff      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_I2C_Mem_Write+0x5c>
 8003014:	2302      	movs	r3, #2
 8003016:	e0f8      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	2101      	movs	r1, #1
 800301e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003020:	f7fe fe08 	bl	8001c34 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	0219      	lsls	r1, r3, #8
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2319      	movs	r3, #25
 8003034:	2201      	movs	r2, #1
 8003036:	f000 fc25 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0e3      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2241      	movs	r2, #65	; 0x41
 8003046:	2121      	movs	r1, #33	; 0x21
 8003048:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2242      	movs	r2, #66	; 0x42
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	222c      	movs	r2, #44	; 0x2c
 8003062:	18ba      	adds	r2, r7, r2
 8003064:	8812      	ldrh	r2, [r2, #0]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800306e:	1dbb      	adds	r3, r7, #6
 8003070:	881c      	ldrh	r4, [r3, #0]
 8003072:	2308      	movs	r3, #8
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	230a      	movs	r3, #10
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	8819      	ldrh	r1, [r3, #0]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	0023      	movs	r3, r4
 800308a:	f000 fb13 	bl	80036b4 <I2C_RequestMemoryWrite>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d005      	beq.n	800309e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0b5      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2bff      	cmp	r3, #255	; 0xff
 80030a6:	d911      	bls.n	80030cc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	22ff      	movs	r2, #255	; 0xff
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	045c      	lsls	r4, r3, #17
 80030b8:	230a      	movs	r3, #10
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	8819      	ldrh	r1, [r3, #0]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	2300      	movs	r3, #0
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	0023      	movs	r3, r4
 80030c6:	f000 fcfd 	bl	8003ac4 <I2C_TransferConfig>
 80030ca:	e012      	b.n	80030f2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	049c      	lsls	r4, r3, #18
 80030e0:	230a      	movs	r3, #10
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	8819      	ldrh	r1, [r3, #0]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	0023      	movs	r3, r4
 80030ee:	f000 fce9 	bl	8003ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fc02 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e081      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03a      	beq.n	80031b6 <HAL_I2C_Mem_Write+0x1fa>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d136      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	0013      	movs	r3, r2
 8003152:	2200      	movs	r2, #0
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	f000 fb95 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800315a:	1e03      	subs	r3, r0, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e053      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2bff      	cmp	r3, #255	; 0xff
 800316a:	d911      	bls.n	8003190 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	b2da      	uxtb	r2, r3
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	045c      	lsls	r4, r3, #17
 800317c:	230a      	movs	r3, #10
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	8819      	ldrh	r1, [r3, #0]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0023      	movs	r3, r4
 800318a:	f000 fc9b 	bl	8003ac4 <I2C_TransferConfig>
 800318e:	e012      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	049c      	lsls	r4, r3, #18
 80031a4:	230a      	movs	r3, #10
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	8819      	ldrh	r1, [r3, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	0023      	movs	r3, r4
 80031b2:	f000 fc87 	bl	8003ac4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d198      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 fbda 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e01a      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2220      	movs	r2, #32
 80031da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	490b      	ldr	r1, [pc, #44]	; (8003214 <HAL_I2C_Mem_Write+0x258>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2241      	movs	r2, #65	; 0x41
 80031f0:	2120      	movs	r1, #32
 80031f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2242      	movs	r2, #66	; 0x42
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	2100      	movs	r1, #0
 8003202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b007      	add	sp, #28
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	fe00e800 	.word	0xfe00e800

08003218 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	000c      	movs	r4, r1
 8003222:	0010      	movs	r0, r2
 8003224:	0019      	movs	r1, r3
 8003226:	230a      	movs	r3, #10
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	1c22      	adds	r2, r4, #0
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	2308      	movs	r3, #8
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	1dbb      	adds	r3, r7, #6
 8003238:	1c0a      	adds	r2, r1, #0
 800323a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2241      	movs	r2, #65	; 0x41
 8003240:	5c9b      	ldrb	r3, [r3, r2]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b20      	cmp	r3, #32
 8003246:	d000      	beq.n	800324a <HAL_I2C_Mem_Read+0x32>
 8003248:	e110      	b.n	800346c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_I2C_Mem_Read+0x42>
 8003250:	232c      	movs	r3, #44	; 0x2c
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e103      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2240      	movs	r2, #64	; 0x40
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_Mem_Read+0x5c>
 8003270:	2302      	movs	r3, #2
 8003272:	e0fc      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	; 0x40
 8003278:	2101      	movs	r1, #1
 800327a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800327c:	f7fe fcda 	bl	8001c34 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	0219      	lsls	r1, r3, #8
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2319      	movs	r3, #25
 8003290:	2201      	movs	r2, #1
 8003292:	f000 faf7 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0e7      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2241      	movs	r2, #65	; 0x41
 80032a2:	2122      	movs	r1, #34	; 0x22
 80032a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2242      	movs	r2, #66	; 0x42
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	222c      	movs	r2, #44	; 0x2c
 80032be:	18ba      	adds	r2, r7, r2
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ca:	1dbb      	adds	r3, r7, #6
 80032cc:	881c      	ldrh	r4, [r3, #0]
 80032ce:	2308      	movs	r3, #8
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	230a      	movs	r3, #10
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	8819      	ldrh	r1, [r3, #0]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	0023      	movs	r3, r4
 80032e6:	f000 fa49 	bl	800377c <I2C_RequestMemoryRead>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d005      	beq.n	80032fa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2240      	movs	r2, #64	; 0x40
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0b9      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2bff      	cmp	r3, #255	; 0xff
 8003302:	d911      	bls.n	8003328 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	b2da      	uxtb	r2, r3
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	045c      	lsls	r4, r3, #17
 8003314:	230a      	movs	r3, #10
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	8819      	ldrh	r1, [r3, #0]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_I2C_Mem_Read+0x260>)
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	0023      	movs	r3, r4
 8003322:	f000 fbcf 	bl	8003ac4 <I2C_TransferConfig>
 8003326:	e012      	b.n	800334e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	b2da      	uxtb	r2, r3
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	049c      	lsls	r4, r3, #18
 800333c:	230a      	movs	r3, #10
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	8819      	ldrh	r1, [r3, #0]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_I2C_Mem_Read+0x260>)
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	0023      	movs	r3, r4
 800334a:	f000 fbbb 	bl	8003ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	0013      	movs	r3, r2
 8003358:	2200      	movs	r2, #0
 800335a:	2104      	movs	r1, #4
 800335c:	f000 fa92 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e082      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03a      	beq.n	800341a <HAL_I2C_Mem_Read+0x202>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d136      	bne.n	800341a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	0013      	movs	r3, r2
 80033b6:	2200      	movs	r2, #0
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	f000 fa63 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 80033be:	1e03      	subs	r3, r0, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e053      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2bff      	cmp	r3, #255	; 0xff
 80033ce:	d911      	bls.n	80033f4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	045c      	lsls	r4, r3, #17
 80033e0:	230a      	movs	r3, #10
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	8819      	ldrh	r1, [r3, #0]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	0023      	movs	r3, r4
 80033ee:	f000 fb69 	bl	8003ac4 <I2C_TransferConfig>
 80033f2:	e012      	b.n	800341a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	b2da      	uxtb	r2, r3
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	049c      	lsls	r4, r3, #18
 8003408:	230a      	movs	r3, #10
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	8819      	ldrh	r1, [r3, #0]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	0023      	movs	r3, r4
 8003416:	f000 fb55 	bl	8003ac4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d194      	bne.n	800334e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	0018      	movs	r0, r3
 800342c:	f000 faa8 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e01a      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2220      	movs	r2, #32
 800343e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	490c      	ldr	r1, [pc, #48]	; (800347c <HAL_I2C_Mem_Read+0x264>)
 800344c:	400a      	ands	r2, r1
 800344e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2241      	movs	r2, #65	; 0x41
 8003454:	2120      	movs	r1, #32
 8003456:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2242      	movs	r2, #66	; 0x42
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b007      	add	sp, #28
 8003474:	bd90      	pop	{r4, r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	80002400 	.word	0x80002400
 800347c:	fe00e800 	.word	0xfe00e800

08003480 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	230a      	movs	r3, #10
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	1c0a      	adds	r2, r1, #0
 8003492:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2241      	movs	r2, #65	; 0x41
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d000      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0x26>
 80034a4:	e0fe      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	401a      	ands	r2, r3
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d101      	bne.n	80034be <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
 80034bc:	e0f3      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2240      	movs	r2, #64	; 0x40
 80034c2:	5c9b      	ldrb	r3, [r3, r2]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_I2C_IsDeviceReady+0x4c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0ec      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2241      	movs	r2, #65	; 0x41
 80034d8:	2124      	movs	r1, #36	; 0x24
 80034da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d107      	bne.n	80034fa <HAL_I2C_IsDeviceReady+0x7a>
 80034ea:	230a      	movs	r3, #10
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	059b      	lsls	r3, r3, #22
 80034f2:	0d9b      	lsrs	r3, r3, #22
 80034f4:	4a6e      	ldr	r2, [pc, #440]	; (80036b0 <HAL_I2C_IsDeviceReady+0x230>)
 80034f6:	431a      	orrs	r2, r3
 80034f8:	e007      	b.n	800350a <HAL_I2C_IsDeviceReady+0x8a>
 80034fa:	230a      	movs	r3, #10
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	059b      	lsls	r3, r3, #22
 8003502:	0d9b      	lsrs	r3, r3, #22
 8003504:	22a0      	movs	r2, #160	; 0xa0
 8003506:	0192      	lsls	r2, r2, #6
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003510:	f7fe fb90 	bl	8001c34 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2220      	movs	r2, #32
 8003520:	4013      	ands	r3, r2
 8003522:	3b20      	subs	r3, #32
 8003524:	425a      	negs	r2, r3
 8003526:	4153      	adcs	r3, r2
 8003528:	b2da      	uxtb	r2, r3
 800352a:	231f      	movs	r3, #31
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2210      	movs	r2, #16
 8003538:	4013      	ands	r3, r2
 800353a:	3b10      	subs	r3, #16
 800353c:	425a      	negs	r2, r3
 800353e:	4153      	adcs	r3, r2
 8003540:	b2da      	uxtb	r2, r3
 8003542:	231e      	movs	r3, #30
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003548:	e035      	b.n	80035b6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	d01a      	beq.n	8003586 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003550:	f7fe fb70 	bl	8001c34 <HAL_GetTick>
 8003554:	0002      	movs	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d302      	bcc.n	8003566 <HAL_I2C_IsDeviceReady+0xe6>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2241      	movs	r2, #65	; 0x41
 800356a:	2120      	movs	r1, #32
 800356c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	2220      	movs	r2, #32
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	2100      	movs	r1, #0
 8003580:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08f      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2220      	movs	r2, #32
 800358e:	4013      	ands	r3, r2
 8003590:	3b20      	subs	r3, #32
 8003592:	425a      	negs	r2, r3
 8003594:	4153      	adcs	r3, r2
 8003596:	b2da      	uxtb	r2, r3
 8003598:	231f      	movs	r3, #31
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2210      	movs	r2, #16
 80035a6:	4013      	ands	r3, r2
 80035a8:	3b10      	subs	r3, #16
 80035aa:	425a      	negs	r2, r3
 80035ac:	4153      	adcs	r3, r2
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	231e      	movs	r3, #30
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80035b6:	231f      	movs	r3, #31
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_I2C_IsDeviceReady+0x14a>
 80035c0:	231e      	movs	r3, #30
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0bf      	beq.n	800354a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2210      	movs	r2, #16
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d01a      	beq.n	800360e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	0013      	movs	r3, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	2120      	movs	r1, #32
 80035e6:	f000 f94d 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e059      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2220      	movs	r2, #32
 80035f8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2241      	movs	r2, #65	; 0x41
 80035fe:	2120      	movs	r1, #32
 8003600:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2240      	movs	r2, #64	; 0x40
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e04b      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	0013      	movs	r3, r2
 8003618:	2200      	movs	r2, #0
 800361a:	2120      	movs	r1, #32
 800361c:	f000 f932 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e03e      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2210      	movs	r2, #16
 800362e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2220      	movs	r2, #32
 8003636:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d119      	bne.n	8003674 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	01c9      	lsls	r1, r1, #7
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	0013      	movs	r3, r2
 800365c:	2200      	movs	r2, #0
 800365e:	2120      	movs	r1, #32
 8003660:	f000 f910 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01c      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2220      	movs	r2, #32
 8003672:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d900      	bls.n	8003684 <HAL_I2C_IsDeviceReady+0x204>
 8003682:	e72e      	b.n	80034e2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2241      	movs	r2, #65	; 0x41
 8003688:	2120      	movs	r1, #32
 800368a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	2220      	movs	r2, #32
 8003692:	431a      	orrs	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b008      	add	sp, #32
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	02002000 	.word	0x02002000

080036b4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b5b0      	push	{r4, r5, r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	000c      	movs	r4, r1
 80036be:	0010      	movs	r0, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	250a      	movs	r5, #10
 80036c4:	197b      	adds	r3, r7, r5
 80036c6:	1c22      	adds	r2, r4, #0
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	2308      	movs	r3, #8
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	1c02      	adds	r2, r0, #0
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	1c0a      	adds	r2, r1, #0
 80036d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	045c      	lsls	r4, r3, #17
 80036e2:	197b      	adds	r3, r7, r5
 80036e4:	8819      	ldrh	r1, [r3, #0]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <I2C_RequestMemoryWrite+0xc4>)
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	0023      	movs	r3, r4
 80036ee:	f000 f9e9 	bl	8003ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	6a39      	ldr	r1, [r7, #32]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f902 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d001      	beq.n	8003706 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e033      	b.n	800376e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	2308      	movs	r3, #8
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
 800371c:	e019      	b.n	8003752 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800371e:	2308      	movs	r3, #8
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	b29b      	uxth	r3, r3
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	6a39      	ldr	r1, [r7, #32]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f8e3 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 800373c:	1e03      	subs	r3, r0, #0
 800373e:	d001      	beq.n	8003744 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e014      	b.n	800376e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003744:	2308      	movs	r3, #8
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	0013      	movs	r3, r2
 800375c:	2200      	movs	r2, #0
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	f000 f890 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d001      	beq.n	800376c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bdb0      	pop	{r4, r5, r7, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	80002000 	.word	0x80002000

0800377c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	000c      	movs	r4, r1
 8003786:	0010      	movs	r0, r2
 8003788:	0019      	movs	r1, r3
 800378a:	250a      	movs	r5, #10
 800378c:	197b      	adds	r3, r7, r5
 800378e:	1c22      	adds	r2, r4, #0
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	2308      	movs	r3, #8
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	1c02      	adds	r2, r0, #0
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	1dbb      	adds	r3, r7, #6
 800379c:	1c0a      	adds	r2, r1, #0
 800379e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037a0:	1dbb      	adds	r3, r7, #6
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	197b      	adds	r3, r7, r5
 80037a8:	8819      	ldrh	r1, [r3, #0]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <I2C_RequestMemoryRead+0xc0>)
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	f000 f987 	bl	8003ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 f8a0 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d001      	beq.n	80037ca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e033      	b.n	8003832 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d107      	bne.n	80037e2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037d2:	2308      	movs	r3, #8
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
 80037e0:	e019      	b.n	8003816 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037e2:	2308      	movs	r3, #8
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f6:	6a39      	ldr	r1, [r7, #32]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f881 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d001      	beq.n	8003808 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e014      	b.n	8003832 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003808:	2308      	movs	r3, #8
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	6a3a      	ldr	r2, [r7, #32]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	0013      	movs	r3, r2
 8003820:	2200      	movs	r2, #0
 8003822:	2140      	movs	r1, #64	; 0x40
 8003824:	f000 f82e 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d001      	beq.n	8003830 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bdb0      	pop	{r4, r5, r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	80002000 	.word	0x80002000

08003840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2202      	movs	r2, #2
 8003850:	4013      	ands	r3, r2
 8003852:	2b02      	cmp	r3, #2
 8003854:	d103      	bne.n	800385e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	2b01      	cmp	r3, #1
 800386a:	d007      	beq.n	800387c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2101      	movs	r1, #1
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
  }
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003894:	e021      	b.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	d01e      	beq.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe f9ca 	bl	8001c34 <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	2220      	movs	r2, #32
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2241      	movs	r2, #65	; 0x41
 80038c2:	2120      	movs	r1, #32
 80038c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2242      	movs	r2, #66	; 0x42
 80038ca:	2100      	movs	r1, #0
 80038cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00f      	b.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	425a      	negs	r2, r3
 80038ea:	4153      	adcs	r3, r2
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	001a      	movs	r2, r3
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d0ce      	beq.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}

08003902 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800390e:	e02b      	b.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	0018      	movs	r0, r3
 8003918:	f000 f86e 	bl	80039f8 <I2C_IsAcknowledgeFailed>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d001      	beq.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e029      	b.n	8003978 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3301      	adds	r3, #1
 8003928:	d01e      	beq.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392a:	f7fe f983 	bl	8001c34 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d113      	bne.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	2220      	movs	r2, #32
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2241      	movs	r2, #65	; 0x41
 8003950:	2120      	movs	r1, #32
 8003952:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2242      	movs	r2, #66	; 0x42
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e007      	b.n	8003978 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d1cc      	bne.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	e028      	b.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f82f 	bl	80039f8 <I2C_IsAcknowledgeFailed>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e026      	b.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe f947 	bl	8001c34 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d113      	bne.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	2220      	movs	r2, #32
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2241      	movs	r2, #65	; 0x41
 80039c8:	2120      	movs	r1, #32
 80039ca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2242      	movs	r2, #66	; 0x42
 80039d0:	2100      	movs	r1, #0
 80039d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2220      	movs	r2, #32
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d1cf      	bne.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d151      	bne.n	8003ab6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a12:	e021      	b.n	8003a58 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d01e      	beq.n	8003a58 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe f90b 	bl	8001c34 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_IsAcknowledgeFailed+0x38>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	2220      	movs	r2, #32
 8003a36:	431a      	orrs	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2241      	movs	r2, #65	; 0x41
 8003a40:	2120      	movs	r1, #32
 8003a42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2242      	movs	r2, #66	; 0x42
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2240      	movs	r2, #64	; 0x40
 8003a50:	2100      	movs	r1, #0
 8003a52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e02f      	b.n	8003ab8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d1d6      	bne.n	8003a14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2220      	movs	r2, #32
 8003a74:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff fee1 	bl	8003840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <I2C_IsAcknowledgeFailed+0xc8>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	2204      	movs	r2, #4
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2241      	movs	r2, #65	; 0x41
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2242      	movs	r2, #66	; 0x42
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2240      	movs	r2, #64	; 0x40
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	fe00e800 	.word	0xfe00e800

08003ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	0008      	movs	r0, r1
 8003ace:	0011      	movs	r1, r2
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	240a      	movs	r4, #10
 8003ad4:	193b      	adds	r3, r7, r4
 8003ad6:	1c02      	adds	r2, r0, #0
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	2009      	movs	r0, #9
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	1c0a      	adds	r2, r1, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	0d51      	lsrs	r1, r2, #21
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	00d2      	lsls	r2, r2, #3
 8003af0:	400a      	ands	r2, r1
 8003af2:	490e      	ldr	r1, [pc, #56]	; (8003b2c <I2C_TransferConfig+0x68>)
 8003af4:	430a      	orrs	r2, r1
 8003af6:	43d2      	mvns	r2, r2
 8003af8:	401a      	ands	r2, r3
 8003afa:	0011      	movs	r1, r2
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	059b      	lsls	r3, r3, #22
 8003b02:	0d9a      	lsrs	r2, r3, #22
 8003b04:	183b      	adds	r3, r7, r0
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	0418      	lsls	r0, r3, #16
 8003b0a:	23ff      	movs	r3, #255	; 0xff
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	4003      	ands	r3, r0
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b005      	add	sp, #20
 8003b28:	bd90      	pop	{r4, r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	03ff63ff 	.word	0x03ff63ff

08003b30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2241      	movs	r2, #65	; 0x41
 8003b3e:	5c9b      	ldrb	r3, [r3, r2]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d138      	bne.n	8003bb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	5c9b      	ldrb	r3, [r3, r2]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e032      	b.n	8003bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	2101      	movs	r1, #1
 8003b5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2241      	movs	r2, #65	; 0x41
 8003b60:	2124      	movs	r1, #36	; 0x24
 8003b62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	438a      	bics	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4911      	ldr	r1, [pc, #68]	; (8003bc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2241      	movs	r2, #65	; 0x41
 8003ba8:	2120      	movs	r1, #32
 8003baa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2240      	movs	r2, #64	; 0x40
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	ffffefff 	.word	0xffffefff

08003bc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2241      	movs	r2, #65	; 0x41
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d139      	bne.n	8003c52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2240      	movs	r2, #64	; 0x40
 8003be2:	5c9b      	ldrb	r3, [r3, r2]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e033      	b.n	8003c54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2241      	movs	r2, #65	; 0x41
 8003bf8:	2124      	movs	r1, #36	; 0x24
 8003bfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2241      	movs	r2, #65	; 0x41
 8003c42:	2120      	movs	r1, #32
 8003c44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
  }
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b004      	add	sp, #16
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	fffff0ff 	.word	0xfffff0ff

08003c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e303      	b.n	800427a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <HAL_RCC_OscConfig+0x1e>
 8003c7c:	e08d      	b.n	8003d9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c7e:	4bc4      	ldr	r3, [pc, #784]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	220c      	movs	r2, #12
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d00e      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c8a:	4bc1      	ldr	r3, [pc, #772]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	220c      	movs	r2, #12
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x64>
 8003c96:	4bbe      	ldr	r3, [pc, #760]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	025b      	lsls	r3, r3, #9
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	025b      	lsls	r3, r3, #9
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	4bb9      	ldr	r3, [pc, #740]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x56>
 8003cb4:	e070      	b.n	8003d98 <HAL_RCC_OscConfig+0x138>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d000      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x60>
 8003cbe:	e06b      	b.n	8003d98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e2da      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x7c>
 8003ccc:	4bb0      	ldr	r3, [pc, #704]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4baf      	ldr	r3, [pc, #700]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	0249      	lsls	r1, r1, #9
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e02f      	b.n	8003d3c <HAL_RCC_OscConfig+0xdc>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x9e>
 8003ce4:	4baa      	ldr	r3, [pc, #680]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4ba9      	ldr	r3, [pc, #676]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003cea:	49aa      	ldr	r1, [pc, #680]	; (8003f94 <HAL_RCC_OscConfig+0x334>)
 8003cec:	400a      	ands	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4ba6      	ldr	r3, [pc, #664]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003cf6:	49a8      	ldr	r1, [pc, #672]	; (8003f98 <HAL_RCC_OscConfig+0x338>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e01e      	b.n	8003d3c <HAL_RCC_OscConfig+0xdc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d10e      	bne.n	8003d24 <HAL_RCC_OscConfig+0xc4>
 8003d06:	4ba2      	ldr	r3, [pc, #648]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4ba1      	ldr	r3, [pc, #644]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	02c9      	lsls	r1, r1, #11
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	4b9e      	ldr	r3, [pc, #632]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b9d      	ldr	r3, [pc, #628]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	0249      	lsls	r1, r1, #9
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0xdc>
 8003d24:	4b9a      	ldr	r3, [pc, #616]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b99      	ldr	r3, [pc, #612]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d2a:	499a      	ldr	r1, [pc, #616]	; (8003f94 <HAL_RCC_OscConfig+0x334>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	4b97      	ldr	r3, [pc, #604]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d36:	4998      	ldr	r1, [pc, #608]	; (8003f98 <HAL_RCC_OscConfig+0x338>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d014      	beq.n	8003d6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd ff76 	bl	8001c34 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4e:	f7fd ff71 	bl	8001c34 <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e28c      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d60:	4b8b      	ldr	r3, [pc, #556]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0xee>
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd ff61 	bl	8001c34 <HAL_GetTick>
 8003d72:	0003      	movs	r3, r0
 8003d74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fd ff5c 	bl	8001c34 <HAL_GetTick>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e277      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	029b      	lsls	r3, r3, #10
 8003d92:	4013      	ands	r3, r2
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x118>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d100      	bne.n	8003da6 <HAL_RCC_OscConfig+0x146>
 8003da4:	e069      	b.n	8003e7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	220c      	movs	r2, #12
 8003dac:	4013      	ands	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003db0:	4b77      	ldr	r3, [pc, #476]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	220c      	movs	r2, #12
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d11c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x196>
 8003dbc:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d116      	bne.n	8003df6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc8:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d005      	beq.n	8003dde <HAL_RCC_OscConfig+0x17e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e24d      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dde:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	22f8      	movs	r2, #248	; 0xf8
 8003de4:	4393      	bics	r3, r2
 8003de6:	0019      	movs	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	00da      	lsls	r2, r3, #3
 8003dee:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df4:	e041      	b.n	8003e7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d024      	beq.n	8003e48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dfe:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fd ff13 	bl	8001c34 <HAL_GetTick>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fd ff0e 	bl	8001c34 <HAL_GetTick>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e229      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b5a      	ldr	r3, [pc, #360]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d0f1      	beq.n	8003e14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b57      	ldr	r3, [pc, #348]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	22f8      	movs	r2, #248	; 0xf8
 8003e36:	4393      	bics	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00da      	lsls	r2, r3, #3
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e42:	430a      	orrs	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e018      	b.n	8003e7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e48:	4b51      	ldr	r3, [pc, #324]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	438a      	bics	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd feee 	bl	8001c34 <HAL_GetTick>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5e:	f7fd fee9 	bl	8001c34 <HAL_GetTick>
 8003e62:	0002      	movs	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e204      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e70:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2202      	movs	r2, #2
 8003e76:	4013      	ands	r3, r2
 8003e78:	d1f1      	bne.n	8003e5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2208      	movs	r2, #8
 8003e80:	4013      	ands	r3, r2
 8003e82:	d036      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d019      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8c:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e98:	f7fd fecc 	bl	8001c34 <HAL_GetTick>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fec7 	bl	8001c34 <HAL_GetTick>
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1e2      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d0f1      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x242>
 8003ebe:	e018      	b.n	8003ef2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec4:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	438a      	bics	r2, r1
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ecc:	f7fd feb2 	bl	8001c34 <HAL_GetTick>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fd fead 	bl	8001c34 <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e1c8      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d1f1      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d100      	bne.n	8003efe <HAL_RCC_OscConfig+0x29e>
 8003efc:	e0b6      	b.n	800406c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	231f      	movs	r3, #31
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	055b      	lsls	r3, r3, #21
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d111      	bne.n	8003f36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	4b1f      	ldr	r3, [pc, #124]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	0549      	lsls	r1, r1, #21
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	055b      	lsls	r3, r3, #21
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_OscConfig+0x33c>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d11a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_RCC_OscConfig+0x33c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_RCC_OscConfig+0x33c>)
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	0049      	lsls	r1, r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f50:	f7fd fe70 	bl	8001c34 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fd fe6b 	bl	8001c34 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e186      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x33c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x340>
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003f82:	6a1a      	ldr	r2, [r3, #32]
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <HAL_RCC_OscConfig+0x330>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	621a      	str	r2, [r3, #32]
 8003f8c:	e036      	b.n	8003ffc <HAL_RCC_OscConfig+0x39c>
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40021000 	.word	0x40021000
 8003f94:	fffeffff 	.word	0xfffeffff
 8003f98:	fffbffff 	.word	0xfffbffff
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x362>
 8003fa8:	4bb6      	ldr	r3, [pc, #728]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	4bb5      	ldr	r3, [pc, #724]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fae:	2101      	movs	r1, #1
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	621a      	str	r2, [r3, #32]
 8003fb4:	4bb3      	ldr	r3, [pc, #716]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	4bb2      	ldr	r3, [pc, #712]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fba:	2104      	movs	r1, #4
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	621a      	str	r2, [r3, #32]
 8003fc0:	e01c      	b.n	8003ffc <HAL_RCC_OscConfig+0x39c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b05      	cmp	r3, #5
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x384>
 8003fca:	4bae      	ldr	r3, [pc, #696]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	4bad      	ldr	r3, [pc, #692]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	621a      	str	r2, [r3, #32]
 8003fd6:	4bab      	ldr	r3, [pc, #684]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	4baa      	ldr	r3, [pc, #680]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fdc:	2101      	movs	r1, #1
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	621a      	str	r2, [r3, #32]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0x39c>
 8003fe4:	4ba7      	ldr	r3, [pc, #668]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	4ba6      	ldr	r3, [pc, #664]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003fea:	2101      	movs	r1, #1
 8003fec:	438a      	bics	r2, r1
 8003fee:	621a      	str	r2, [r3, #32]
 8003ff0:	4ba4      	ldr	r3, [pc, #656]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	4ba3      	ldr	r3, [pc, #652]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d014      	beq.n	800402e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004004:	f7fd fe16 	bl	8001c34 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	e009      	b.n	8004022 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd fe11 	bl	8001c34 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	4a9b      	ldr	r2, [pc, #620]	; (8004288 <HAL_RCC_OscConfig+0x628>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e12b      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004022:	4b98      	ldr	r3, [pc, #608]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	2202      	movs	r2, #2
 8004028:	4013      	ands	r3, r2
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x3ae>
 800402c:	e013      	b.n	8004056 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fd fe01 	bl	8001c34 <HAL_GetTick>
 8004032:	0003      	movs	r3, r0
 8004034:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fd fdfc 	bl	8001c34 <HAL_GetTick>
 800403c:	0002      	movs	r2, r0
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	4a91      	ldr	r2, [pc, #580]	; (8004288 <HAL_RCC_OscConfig+0x628>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e116      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	2202      	movs	r2, #2
 8004052:	4013      	ands	r3, r2
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004056:	231f      	movs	r3, #31
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004060:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	4b87      	ldr	r3, [pc, #540]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004066:	4989      	ldr	r1, [pc, #548]	; (800428c <HAL_RCC_OscConfig+0x62c>)
 8004068:	400a      	ands	r2, r1
 800406a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2210      	movs	r2, #16
 8004072:	4013      	ands	r3, r2
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d12a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800407e:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004082:	4b80      	ldr	r3, [pc, #512]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004084:	2104      	movs	r1, #4
 8004086:	430a      	orrs	r2, r1
 8004088:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800408a:	4b7e      	ldr	r3, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 800408c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408e:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004090:	2101      	movs	r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fd fdcd 	bl	8001c34 <HAL_GetTick>
 800409a:	0003      	movs	r3, r0
 800409c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040a0:	f7fd fdc8 	bl	8001c34 <HAL_GetTick>
 80040a4:	0002      	movs	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0e3      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80040b2:	4b74      	ldr	r3, [pc, #464]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	2202      	movs	r2, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	d0f1      	beq.n	80040a0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040bc:	4b71      	ldr	r3, [pc, #452]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	22f8      	movs	r2, #248	; 0xf8
 80040c2:	4393      	bics	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040ce:	430a      	orrs	r2, r1
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34
 80040d2:	e034      	b.n	800413e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	3305      	adds	r3, #5
 80040da:	d111      	bne.n	8004100 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80040dc:	4b69      	ldr	r3, [pc, #420]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040e2:	2104      	movs	r1, #4
 80040e4:	438a      	bics	r2, r1
 80040e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040e8:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	22f8      	movs	r2, #248	; 0xf8
 80040ee:	4393      	bics	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	00da      	lsls	r2, r3, #3
 80040f8:	4b62      	ldr	r3, [pc, #392]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80040fa:	430a      	orrs	r2, r1
 80040fc:	635a      	str	r2, [r3, #52]	; 0x34
 80040fe:	e01e      	b.n	800413e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004100:	4b60      	ldr	r3, [pc, #384]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004104:	4b5f      	ldr	r3, [pc, #380]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004106:	2104      	movs	r1, #4
 8004108:	430a      	orrs	r2, r1
 800410a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800410c:	4b5d      	ldr	r3, [pc, #372]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	4b5c      	ldr	r3, [pc, #368]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004112:	2101      	movs	r1, #1
 8004114:	438a      	bics	r2, r1
 8004116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fd fd8c 	bl	8001c34 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004122:	f7fd fd87 	bl	8001c34 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0a2      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	2202      	movs	r2, #2
 800413a:	4013      	ands	r3, r2
 800413c:	d1f1      	bne.n	8004122 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d100      	bne.n	8004148 <HAL_RCC_OscConfig+0x4e8>
 8004146:	e097      	b.n	8004278 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004148:	4b4e      	ldr	r3, [pc, #312]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	220c      	movs	r2, #12
 800414e:	4013      	ands	r3, r2
 8004150:	2b08      	cmp	r3, #8
 8004152:	d100      	bne.n	8004156 <HAL_RCC_OscConfig+0x4f6>
 8004154:	e06b      	b.n	800422e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d14c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b49      	ldr	r3, [pc, #292]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004164:	494a      	ldr	r1, [pc, #296]	; (8004290 <HAL_RCC_OscConfig+0x630>)
 8004166:	400a      	ands	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416a:	f7fd fd63 	bl	8001c34 <HAL_GetTick>
 800416e:	0003      	movs	r3, r0
 8004170:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fd fd5e 	bl	8001c34 <HAL_GetTick>
 8004178:	0002      	movs	r2, r0
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e079      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	049b      	lsls	r3, r3, #18
 800418e:	4013      	ands	r3, r2
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004192:	4b3c      	ldr	r3, [pc, #240]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	220f      	movs	r2, #15
 8004198:	4393      	bics	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041a2:	430a      	orrs	r2, r1
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a3a      	ldr	r2, [pc, #232]	; (8004294 <HAL_RCC_OscConfig+0x634>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	431a      	orrs	r2, r3
 80041ba:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b30      	ldr	r3, [pc, #192]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	0449      	lsls	r1, r1, #17
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fd fd31 	bl	8001c34 <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd fd2c 	bl	8001c34 <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e047      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	049b      	lsls	r3, r3, #18
 80041f2:	4013      	ands	r3, r2
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x578>
 80041f6:	e03f      	b.n	8004278 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 80041fe:	4924      	ldr	r1, [pc, #144]	; (8004290 <HAL_RCC_OscConfig+0x630>)
 8004200:	400a      	ands	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fd fd16 	bl	8001c34 <HAL_GetTick>
 8004208:	0003      	movs	r3, r0
 800420a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420e:	f7fd fd11 	bl	8001c34 <HAL_GetTick>
 8004212:	0002      	movs	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e02c      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004220:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	049b      	lsls	r3, r3, #18
 8004228:	4013      	ands	r3, r2
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x5ae>
 800422c:	e024      	b.n	8004278 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e01f      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCC_OscConfig+0x624>)
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	025b      	lsls	r3, r3, #9
 800424c:	401a      	ands	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	429a      	cmp	r2, r3
 8004254:	d10e      	bne.n	8004274 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	220f      	movs	r2, #15
 800425a:	401a      	ands	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d107      	bne.n	8004274 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	23f0      	movs	r3, #240	; 0xf0
 8004268:	039b      	lsls	r3, r3, #14
 800426a:	401a      	ands	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b008      	add	sp, #32
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	40021000 	.word	0x40021000
 8004288:	00001388 	.word	0x00001388
 800428c:	efffffff 	.word	0xefffffff
 8004290:	feffffff 	.word	0xfeffffff
 8004294:	ffc2ffff 	.word	0xffc2ffff

08004298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0b3      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b5b      	ldr	r3, [pc, #364]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d911      	bls.n	80042de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b58      	ldr	r3, [pc, #352]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	4393      	bics	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	4b55      	ldr	r3, [pc, #340]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	4013      	ands	r3, r2
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e09a      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2202      	movs	r2, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2204      	movs	r2, #4
 80042ee:	4013      	ands	r3, r2
 80042f0:	d006      	beq.n	8004300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042f2:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 80042f8:	21e0      	movs	r1, #224	; 0xe0
 80042fa:	00c9      	lsls	r1, r1, #3
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004300:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	22f0      	movs	r2, #240	; 0xf0
 8004306:	4393      	bics	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	4b44      	ldr	r3, [pc, #272]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	d040      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	029b      	lsls	r3, r3, #10
 800432e:	4013      	ands	r3, r2
 8004330:	d114      	bne.n	800435c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06e      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433e:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	049b      	lsls	r3, r3, #18
 8004346:	4013      	ands	r3, r2
 8004348:	d108      	bne.n	800435c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e062      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e05b      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435c:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2203      	movs	r2, #3
 8004362:	4393      	bics	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004370:	f7fd fc60 	bl	8001c34 <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004378:	e009      	b.n	800438e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437a:	f7fd fc5b 	bl	8001c34 <HAL_GetTick>
 800437e:	0002      	movs	r2, r0
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	4a27      	ldr	r2, [pc, #156]	; (8004424 <HAL_RCC_ClockConfig+0x18c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e042      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	220c      	movs	r2, #12
 8004394:	401a      	ands	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	429a      	cmp	r2, r3
 800439e:	d1ec      	bne.n	800437a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4013      	ands	r3, r2
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d211      	bcs.n	80043d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	4393      	bics	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCC_ClockConfig+0x184>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e020      	b.n	8004414 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2204      	movs	r2, #4
 80043d8:	4013      	ands	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a11      	ldr	r2, [pc, #68]	; (8004428 <HAL_RCC_ClockConfig+0x190>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 80043ec:	430a      	orrs	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043f0:	f000 f820 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043f4:	0001      	movs	r1, r0
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_ClockConfig+0x188>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	220f      	movs	r2, #15
 80043fe:	4013      	ands	r3, r2
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x194>)
 8004402:	5cd3      	ldrb	r3, [r2, r3]
 8004404:	000a      	movs	r2, r1
 8004406:	40da      	lsrs	r2, r3
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x198>)
 800440a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800440c:	2000      	movs	r0, #0
 800440e:	f7fd fbcb 	bl	8001ba8 <HAL_InitTick>
  
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b004      	add	sp, #16
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40022000 	.word	0x40022000
 8004420:	40021000 	.word	0x40021000
 8004424:	00001388 	.word	0x00001388
 8004428:	fffff8ff 	.word	0xfffff8ff
 800442c:	080056e4 	.word	0x080056e4
 8004430:	20000000 	.word	0x20000000

08004434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b08f      	sub	sp, #60	; 0x3c
 8004438:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800443a:	2314      	movs	r3, #20
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004440:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004442:	c313      	stmia	r3!, {r0, r1, r4}
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800444c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800444e:	c313      	stmia	r3!, {r0, r1, r4}
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004458:	2300      	movs	r3, #0
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
 800445c:	2300      	movs	r3, #0
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	220c      	movs	r2, #12
 8004472:	4013      	ands	r3, r2
 8004474:	2b04      	cmp	r3, #4
 8004476:	d002      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x4a>
 8004478:	2b08      	cmp	r3, #8
 800447a:	d003      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x50>
 800447c:	e02d      	b.n	80044da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800447e:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004482:	e02d      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	0c9b      	lsrs	r3, r3, #18
 8004488:	220f      	movs	r2, #15
 800448a:	4013      	ands	r3, r2
 800448c:	2214      	movs	r2, #20
 800448e:	18ba      	adds	r2, r7, r2
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	220f      	movs	r2, #15
 800449a:	4013      	ands	r3, r2
 800449c:	1d3a      	adds	r2, r7, #4
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	025b      	lsls	r3, r3, #9
 80044a8:	4013      	ands	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ae:	4812      	ldr	r0, [pc, #72]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044b0:	f7fb fe2a 	bl	8000108 <__udivsi3>
 80044b4:	0003      	movs	r3, r0
 80044b6:	001a      	movs	r2, r3
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	4353      	muls	r3, r2
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
 80044be:	e009      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c2:	000a      	movs	r2, r1
 80044c4:	0152      	lsls	r2, r2, #5
 80044c6:	1a52      	subs	r2, r2, r1
 80044c8:	0193      	lsls	r3, r2, #6
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	185b      	adds	r3, r3, r1
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044d8:	e002      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b00f      	add	sp, #60	; 0x3c
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	08005684 	.word	0x08005684
 80044f0:	08005694 	.word	0x08005694
 80044f4:	40021000 	.word	0x40021000
 80044f8:	007a1200 	.word	0x007a1200

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	025b      	lsls	r3, r3, #9
 8004514:	4013      	ands	r3, r2
 8004516:	d100      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004518:	e08f      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2317      	movs	r3, #23
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b57      	ldr	r3, [pc, #348]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	055b      	lsls	r3, r3, #21
 800452a:	4013      	ands	r3, r2
 800452c:	d111      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	4b54      	ldr	r3, [pc, #336]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004530:	69da      	ldr	r2, [r3, #28]
 8004532:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	0549      	lsls	r1, r1, #21
 8004538:	430a      	orrs	r2, r1
 800453a:	61da      	str	r2, [r3, #28]
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	055b      	lsls	r3, r3, #21
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454a:	2317      	movs	r3, #23
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d11a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b49      	ldr	r3, [pc, #292]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b48      	ldr	r3, [pc, #288]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	0049      	lsls	r1, r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456c:	f7fd fb62 	bl	8001c34 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fd fb5d 	bl	8001c34 <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	; 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e077      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4013      	ands	r3, r2
 8004592:	d0f0      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004594:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	23c0      	movs	r3, #192	; 0xc0
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d034      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	23c0      	movs	r3, #192	; 0xc0
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4013      	ands	r3, r2
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d02c      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045b6:	4b32      	ldr	r3, [pc, #200]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4a33      	ldr	r2, [pc, #204]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c0:	4b2f      	ldr	r3, [pc, #188]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045c6:	2180      	movs	r1, #128	; 0x80
 80045c8:	0249      	lsls	r1, r1, #9
 80045ca:	430a      	orrs	r2, r1
 80045cc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045d4:	492d      	ldr	r1, [pc, #180]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80045d6:	400a      	ands	r2, r1
 80045d8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045da:	4b29      	ldr	r3, [pc, #164]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	4013      	ands	r3, r2
 80045e6:	d013      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fd fb24 	bl	8001c34 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	e009      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fd fb1f 	bl	8001c34 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a24      	ldr	r2, [pc, #144]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e038      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004616:	4013      	ands	r3, r2
 8004618:	0019      	movs	r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004620:	430a      	orrs	r2, r1
 8004622:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004624:	2317      	movs	r3, #23
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004634:	4917      	ldr	r1, [pc, #92]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004636:	400a      	ands	r2, r1
 8004638:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	2203      	movs	r2, #3
 800464a:	4393      	bics	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004654:	430a      	orrs	r2, r1
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2220      	movs	r2, #32
 800465e:	4013      	ands	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	2210      	movs	r2, #16
 8004668:	4393      	bics	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004672:	430a      	orrs	r2, r1
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
 8004688:	fffffcff 	.word	0xfffffcff
 800468c:	fffeffff 	.word	0xfffeffff
 8004690:	00001388 	.word	0x00001388
 8004694:	efffffff 	.word	0xefffffff

08004698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e042      	b.n	8004730 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223d      	movs	r2, #61	; 0x3d
 80046ae:	5c9b      	ldrb	r3, [r3, r2]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	223c      	movs	r2, #60	; 0x3c
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7fd f93b 	bl	800193c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	223d      	movs	r2, #61	; 0x3d
 80046ca:	2102      	movs	r1, #2
 80046cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	0019      	movs	r1, r3
 80046d8:	0010      	movs	r0, r2
 80046da:	f000 f8dd 	bl	8004898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2246      	movs	r2, #70	; 0x46
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	223e      	movs	r2, #62	; 0x3e
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	223f      	movs	r2, #63	; 0x3f
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2241      	movs	r2, #65	; 0x41
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2242      	movs	r2, #66	; 0x42
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2243      	movs	r2, #67	; 0x43
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2244      	movs	r2, #68	; 0x44
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2245      	movs	r2, #69	; 0x45
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	223d      	movs	r2, #61	; 0x3d
 800472a:	2101      	movs	r1, #1
 800472c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b002      	add	sp, #8
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	223c      	movs	r2, #60	; 0x3c
 8004748:	5c9b      	ldrb	r3, [r3, r2]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800474e:	2302      	movs	r3, #2
 8004750:	e09c      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x154>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	223c      	movs	r2, #60	; 0x3c
 8004756:	2101      	movs	r1, #1
 8004758:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d029      	beq.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8004760:	d802      	bhi.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x30>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8004766:	e08c      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8004768:	2b08      	cmp	r3, #8
 800476a:	d046      	beq.n	80047fa <HAL_TIM_PWM_ConfigChannel+0xc2>
 800476c:	2b0c      	cmp	r3, #12
 800476e:	d065      	beq.n	800483c <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 8004770:	e087      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	0011      	movs	r1, r2
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f8f8 	bl	8004970 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2108      	movs	r1, #8
 800478c:	430a      	orrs	r2, r1
 800478e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2104      	movs	r1, #4
 800479c:	438a      	bics	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	619a      	str	r2, [r3, #24]
      break;
 80047b2:	e066      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	0011      	movs	r1, r2
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 f955 	bl	8004a6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	0109      	lsls	r1, r1, #4
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	492d      	ldr	r1, [pc, #180]	; (8004894 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6999      	ldr	r1, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	619a      	str	r2, [r3, #24]
      break;
 80047f8:	e043      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f000 f9b0 	bl	8004b68 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2108      	movs	r1, #8
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2104      	movs	r1, #4
 8004824:	438a      	bics	r2, r1
 8004826:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69d9      	ldr	r1, [r3, #28]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	61da      	str	r2, [r3, #28]
      break;
 800483a:	e022      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fa0f 	bl	8004c68 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0109      	lsls	r1, r1, #4
 8004858:	430a      	orrs	r2, r1
 800485a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	490b      	ldr	r1, [pc, #44]	; (8004894 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8004868:	400a      	ands	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69d9      	ldr	r1, [r3, #28]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
      break;
 8004880:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	223c      	movs	r2, #60	; 0x3c
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b004      	add	sp, #16
 8004892:	bd80      	pop	{r7, pc}
 8004894:	fffffbff 	.word	0xfffffbff

08004898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <TIM_Base_SetConfig+0xc0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0x20>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a2a      	ldr	r2, [pc, #168]	; (800495c <TIM_Base_SetConfig+0xc4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2270      	movs	r2, #112	; 0x70
 80048bc:	4393      	bics	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <TIM_Base_SetConfig+0xc0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_Base_SetConfig+0x5a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a21      	ldr	r2, [pc, #132]	; (800495c <TIM_Base_SetConfig+0xc4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_Base_SetConfig+0x5a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a20      	ldr	r2, [pc, #128]	; (8004960 <TIM_Base_SetConfig+0xc8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_Base_SetConfig+0x5a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <TIM_Base_SetConfig+0xcc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_Base_SetConfig+0x5a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <TIM_Base_SetConfig+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a1d      	ldr	r2, [pc, #116]	; (800496c <TIM_Base_SetConfig+0xd4>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	4393      	bics	r3, r2
 800490a:	001a      	movs	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <TIM_Base_SetConfig+0xc0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0xaa>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <TIM_Base_SetConfig+0xcc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0xaa>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <TIM_Base_SetConfig+0xd0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d103      	bne.n	800494a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	615a      	str	r2, [r3, #20]
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40000400 	.word	0x40000400
 8004960:	40002000 	.word	0x40002000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800
 800496c:	fffffcff 	.word	0xfffffcff

08004970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	2201      	movs	r2, #1
 8004980:	4393      	bics	r3, r2
 8004982:	001a      	movs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2270      	movs	r2, #112	; 0x70
 800499e:	4393      	bics	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2203      	movs	r2, #3
 80049a6:	4393      	bics	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2202      	movs	r2, #2
 80049b8:	4393      	bics	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <TIM_OC1_SetConfig+0xe8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_OC1_SetConfig+0x6e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a22      	ldr	r2, [pc, #136]	; (8004a5c <TIM_OC1_SetConfig+0xec>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC1_SetConfig+0x6e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <TIM_OC1_SetConfig+0xf0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10c      	bne.n	80049f8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2208      	movs	r2, #8
 80049e2:	4393      	bics	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2204      	movs	r2, #4
 80049f4:	4393      	bics	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <TIM_OC1_SetConfig+0xe8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_OC1_SetConfig+0xa0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <TIM_OC1_SetConfig+0xec>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC1_SetConfig+0xa0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <TIM_OC1_SetConfig+0xf0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d111      	bne.n	8004a34 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <TIM_OC1_SetConfig+0xf4>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <TIM_OC1_SetConfig+0xf8>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b006      	add	sp, #24
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	fffffeff 	.word	0xfffffeff
 8004a68:	fffffdff 	.word	0xfffffdff

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	4393      	bics	r3, r2
 8004a7e:	001a      	movs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a2c      	ldr	r2, [pc, #176]	; (8004b4c <TIM_OC2_SetConfig+0xe0>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a2b      	ldr	r2, [pc, #172]	; (8004b50 <TIM_OC2_SetConfig+0xe4>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10d      	bne.n	8004aea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2280      	movs	r2, #128	; 0x80
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2240      	movs	r2, #64	; 0x40
 8004ae6:	4393      	bics	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_OC2_SetConfig+0x96>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <TIM_OC2_SetConfig+0xec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC2_SetConfig+0x96>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <TIM_OC2_SetConfig+0xf0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d113      	bne.n	8004b2a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4a16      	ldr	r2, [pc, #88]	; (8004b60 <TIM_OC2_SetConfig+0xf4>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <TIM_OC2_SetConfig+0xf8>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b006      	add	sp, #24
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	ffff8fff 	.word	0xffff8fff
 8004b50:	fffffcff 	.word	0xfffffcff
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800
 8004b60:	fffffbff 	.word	0xfffffbff
 8004b64:	fffff7ff 	.word	0xfffff7ff

08004b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4a33      	ldr	r2, [pc, #204]	; (8004c44 <TIM_OC3_SetConfig+0xdc>)
 8004b78:	401a      	ands	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2270      	movs	r2, #112	; 0x70
 8004b94:	4393      	bics	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	4393      	bics	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <TIM_OC3_SetConfig+0xe0>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <TIM_OC3_SetConfig+0xe4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10d      	bne.n	8004be2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <TIM_OC3_SetConfig+0xe8>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <TIM_OC3_SetConfig+0xec>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <TIM_OC3_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_OC3_SetConfig+0x92>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1a      	ldr	r2, [pc, #104]	; (8004c58 <TIM_OC3_SetConfig+0xf0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC3_SetConfig+0x92>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <TIM_OC3_SetConfig+0xf4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d113      	bne.n	8004c22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <TIM_OC3_SetConfig+0xf8>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <TIM_OC3_SetConfig+0xfc>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b006      	add	sp, #24
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	fffffeff 	.word	0xfffffeff
 8004c48:	fffffdff 	.word	0xfffffdff
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	fffff7ff 	.word	0xfffff7ff
 8004c54:	fffffbff 	.word	0xfffffbff
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800
 8004c60:	ffffefff 	.word	0xffffefff
 8004c64:	ffffdfff 	.word	0xffffdfff

08004c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <TIM_OC4_SetConfig+0xa8>)
 8004c78:	401a      	ands	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <TIM_OC4_SetConfig+0xac>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <TIM_OC4_SetConfig+0xb0>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <TIM_OC4_SetConfig+0xb4>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <TIM_OC4_SetConfig+0xb8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x70>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a16      	ldr	r2, [pc, #88]	; (8004d24 <TIM_OC4_SetConfig+0xbc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x70>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <TIM_OC4_SetConfig+0xc0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d109      	bne.n	8004cec <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <TIM_OC4_SetConfig+0xc4>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b006      	add	sp, #24
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	ffffefff 	.word	0xffffefff
 8004d14:	ffff8fff 	.word	0xffff8fff
 8004d18:	fffffcff 	.word	0xfffffcff
 8004d1c:	ffffdfff 	.word	0xffffdfff
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800
 8004d2c:	ffffbfff 	.word	0xffffbfff

08004d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	223c      	movs	r2, #60	; 0x3c
 8004d3e:	5c9b      	ldrb	r3, [r3, r2]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e03c      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	223c      	movs	r2, #60	; 0x3c
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	223d      	movs	r2, #61	; 0x3d
 8004d54:	2102      	movs	r1, #2
 8004d56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2270      	movs	r2, #112	; 0x70
 8004d6c:	4393      	bics	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2280      	movs	r2, #128	; 0x80
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	223d      	movs	r2, #61	; 0x3d
 8004db4:	2101      	movs	r1, #1
 8004db6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	223c      	movs	r2, #60	; 0x3c
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400

08004dd4 <__errno>:
 8004dd4:	4b01      	ldr	r3, [pc, #4]	; (8004ddc <__errno+0x8>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4770      	bx	lr
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	2000000c 	.word	0x2000000c

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	2600      	movs	r6, #0
 8004de4:	4d0c      	ldr	r5, [pc, #48]	; (8004e18 <__libc_init_array+0x38>)
 8004de6:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	2600      	movs	r6, #0
 8004df2:	f000 fc29 	bl	8005648 <_init>
 8004df6:	4d0a      	ldr	r5, [pc, #40]	; (8004e20 <__libc_init_array+0x40>)
 8004df8:	4c0a      	ldr	r4, [pc, #40]	; (8004e24 <__libc_init_array+0x44>)
 8004dfa:	1b64      	subs	r4, r4, r5
 8004dfc:	10a4      	asrs	r4, r4, #2
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	00b3      	lsls	r3, r6, #2
 8004e06:	58eb      	ldr	r3, [r5, r3]
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	00b3      	lsls	r3, r6, #2
 8004e10:	58eb      	ldr	r3, [r5, r3]
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08005728 	.word	0x08005728
 8004e1c:	08005728 	.word	0x08005728
 8004e20:	08005728 	.word	0x08005728
 8004e24:	0800572c 	.word	0x0800572c

08004e28 <memset>:
 8004e28:	0003      	movs	r3, r0
 8004e2a:	1812      	adds	r2, r2, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	7019      	strb	r1, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <siprintf>:
 8004e38:	b40e      	push	{r1, r2, r3}
 8004e3a:	b500      	push	{lr}
 8004e3c:	490b      	ldr	r1, [pc, #44]	; (8004e6c <siprintf+0x34>)
 8004e3e:	b09c      	sub	sp, #112	; 0x70
 8004e40:	ab1d      	add	r3, sp, #116	; 0x74
 8004e42:	9002      	str	r0, [sp, #8]
 8004e44:	9006      	str	r0, [sp, #24]
 8004e46:	9107      	str	r1, [sp, #28]
 8004e48:	9104      	str	r1, [sp, #16]
 8004e4a:	4809      	ldr	r0, [pc, #36]	; (8004e70 <siprintf+0x38>)
 8004e4c:	4909      	ldr	r1, [pc, #36]	; (8004e74 <siprintf+0x3c>)
 8004e4e:	cb04      	ldmia	r3!, {r2}
 8004e50:	9105      	str	r1, [sp, #20]
 8004e52:	6800      	ldr	r0, [r0, #0]
 8004e54:	a902      	add	r1, sp, #8
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	f000 f870 	bl	8004f3c <_svfiprintf_r>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9a02      	ldr	r2, [sp, #8]
 8004e60:	7013      	strb	r3, [r2, #0]
 8004e62:	b01c      	add	sp, #112	; 0x70
 8004e64:	bc08      	pop	{r3}
 8004e66:	b003      	add	sp, #12
 8004e68:	4718      	bx	r3
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	7fffffff 	.word	0x7fffffff
 8004e70:	2000000c 	.word	0x2000000c
 8004e74:	ffff0208 	.word	0xffff0208

08004e78 <__ssputs_r>:
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	688e      	ldr	r6, [r1, #8]
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	0007      	movs	r7, r0
 8004e80:	000c      	movs	r4, r1
 8004e82:	9203      	str	r2, [sp, #12]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	429e      	cmp	r6, r3
 8004e88:	d83c      	bhi.n	8004f04 <__ssputs_r+0x8c>
 8004e8a:	2390      	movs	r3, #144	; 0x90
 8004e8c:	898a      	ldrh	r2, [r1, #12]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	421a      	tst	r2, r3
 8004e92:	d034      	beq.n	8004efe <__ssputs_r+0x86>
 8004e94:	2503      	movs	r5, #3
 8004e96:	6909      	ldr	r1, [r1, #16]
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	1a5b      	subs	r3, r3, r1
 8004e9c:	9302      	str	r3, [sp, #8]
 8004e9e:	6963      	ldr	r3, [r4, #20]
 8004ea0:	9802      	ldr	r0, [sp, #8]
 8004ea2:	435d      	muls	r5, r3
 8004ea4:	0feb      	lsrs	r3, r5, #31
 8004ea6:	195d      	adds	r5, r3, r5
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	106d      	asrs	r5, r5, #1
 8004eac:	3301      	adds	r3, #1
 8004eae:	181b      	adds	r3, r3, r0
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	d900      	bls.n	8004eb6 <__ssputs_r+0x3e>
 8004eb4:	001d      	movs	r5, r3
 8004eb6:	0553      	lsls	r3, r2, #21
 8004eb8:	d532      	bpl.n	8004f20 <__ssputs_r+0xa8>
 8004eba:	0029      	movs	r1, r5
 8004ebc:	0038      	movs	r0, r7
 8004ebe:	f000 fb23 	bl	8005508 <_malloc_r>
 8004ec2:	1e06      	subs	r6, r0, #0
 8004ec4:	d109      	bne.n	8004eda <__ssputs_r+0x62>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	2340      	movs	r3, #64	; 0x40
 8004ecc:	2001      	movs	r0, #1
 8004ece:	89a2      	ldrh	r2, [r4, #12]
 8004ed0:	4240      	negs	r0, r0
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	b005      	add	sp, #20
 8004ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eda:	9a02      	ldr	r2, [sp, #8]
 8004edc:	6921      	ldr	r1, [r4, #16]
 8004ede:	f000 faac 	bl	800543a <memcpy>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <__ssputs_r+0xc0>)
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	4313      	orrs	r3, r2
 8004eec:	81a3      	strh	r3, [r4, #12]
 8004eee:	9b02      	ldr	r3, [sp, #8]
 8004ef0:	6126      	str	r6, [r4, #16]
 8004ef2:	18f6      	adds	r6, r6, r3
 8004ef4:	6026      	str	r6, [r4, #0]
 8004ef6:	6165      	str	r5, [r4, #20]
 8004ef8:	9e01      	ldr	r6, [sp, #4]
 8004efa:	1aed      	subs	r5, r5, r3
 8004efc:	60a5      	str	r5, [r4, #8]
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	429e      	cmp	r6, r3
 8004f02:	d900      	bls.n	8004f06 <__ssputs_r+0x8e>
 8004f04:	9e01      	ldr	r6, [sp, #4]
 8004f06:	0032      	movs	r2, r6
 8004f08:	9903      	ldr	r1, [sp, #12]
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	f000 fa9e 	bl	800544c <memmove>
 8004f10:	68a3      	ldr	r3, [r4, #8]
 8004f12:	2000      	movs	r0, #0
 8004f14:	1b9b      	subs	r3, r3, r6
 8004f16:	60a3      	str	r3, [r4, #8]
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	199e      	adds	r6, r3, r6
 8004f1c:	6026      	str	r6, [r4, #0]
 8004f1e:	e7da      	b.n	8004ed6 <__ssputs_r+0x5e>
 8004f20:	002a      	movs	r2, r5
 8004f22:	0038      	movs	r0, r7
 8004f24:	f000 fb4e 	bl	80055c4 <_realloc_r>
 8004f28:	1e06      	subs	r6, r0, #0
 8004f2a:	d1e0      	bne.n	8004eee <__ssputs_r+0x76>
 8004f2c:	6921      	ldr	r1, [r4, #16]
 8004f2e:	0038      	movs	r0, r7
 8004f30:	f000 faa0 	bl	8005474 <_free_r>
 8004f34:	e7c7      	b.n	8004ec6 <__ssputs_r+0x4e>
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	fffffb7f 	.word	0xfffffb7f

08004f3c <_svfiprintf_r>:
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	b0a1      	sub	sp, #132	; 0x84
 8004f40:	9003      	str	r0, [sp, #12]
 8004f42:	001d      	movs	r5, r3
 8004f44:	898b      	ldrh	r3, [r1, #12]
 8004f46:	000f      	movs	r7, r1
 8004f48:	0016      	movs	r6, r2
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	d511      	bpl.n	8004f72 <_svfiprintf_r+0x36>
 8004f4e:	690b      	ldr	r3, [r1, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10e      	bne.n	8004f72 <_svfiprintf_r+0x36>
 8004f54:	2140      	movs	r1, #64	; 0x40
 8004f56:	f000 fad7 	bl	8005508 <_malloc_r>
 8004f5a:	6038      	str	r0, [r7, #0]
 8004f5c:	6138      	str	r0, [r7, #16]
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d105      	bne.n	8004f6e <_svfiprintf_r+0x32>
 8004f62:	230c      	movs	r3, #12
 8004f64:	9a03      	ldr	r2, [sp, #12]
 8004f66:	3801      	subs	r0, #1
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	b021      	add	sp, #132	; 0x84
 8004f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	2300      	movs	r3, #0
 8004f74:	ac08      	add	r4, sp, #32
 8004f76:	6163      	str	r3, [r4, #20]
 8004f78:	3320      	adds	r3, #32
 8004f7a:	7663      	strb	r3, [r4, #25]
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	76a3      	strb	r3, [r4, #26]
 8004f80:	9507      	str	r5, [sp, #28]
 8004f82:	0035      	movs	r5, r6
 8004f84:	782b      	ldrb	r3, [r5, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <_svfiprintf_r+0x52>
 8004f8a:	2b25      	cmp	r3, #37	; 0x25
 8004f8c:	d146      	bne.n	800501c <_svfiprintf_r+0xe0>
 8004f8e:	1bab      	subs	r3, r5, r6
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	d00c      	beq.n	8004fae <_svfiprintf_r+0x72>
 8004f94:	0032      	movs	r2, r6
 8004f96:	0039      	movs	r1, r7
 8004f98:	9803      	ldr	r0, [sp, #12]
 8004f9a:	f7ff ff6d 	bl	8004e78 <__ssputs_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d100      	bne.n	8004fa4 <_svfiprintf_r+0x68>
 8004fa2:	e0ae      	b.n	8005102 <_svfiprintf_r+0x1c6>
 8004fa4:	6962      	ldr	r2, [r4, #20]
 8004fa6:	9b05      	ldr	r3, [sp, #20]
 8004fa8:	4694      	mov	ip, r2
 8004faa:	4463      	add	r3, ip
 8004fac:	6163      	str	r3, [r4, #20]
 8004fae:	782b      	ldrb	r3, [r5, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d100      	bne.n	8004fb6 <_svfiprintf_r+0x7a>
 8004fb4:	e0a5      	b.n	8005102 <_svfiprintf_r+0x1c6>
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4252      	negs	r2, r2
 8004fbc:	6062      	str	r2, [r4, #4]
 8004fbe:	a904      	add	r1, sp, #16
 8004fc0:	3254      	adds	r2, #84	; 0x54
 8004fc2:	1852      	adds	r2, r2, r1
 8004fc4:	1c6e      	adds	r6, r5, #1
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	60e3      	str	r3, [r4, #12]
 8004fca:	60a3      	str	r3, [r4, #8]
 8004fcc:	7013      	strb	r3, [r2, #0]
 8004fce:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fd0:	7831      	ldrb	r1, [r6, #0]
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	4853      	ldr	r0, [pc, #332]	; (8005124 <_svfiprintf_r+0x1e8>)
 8004fd6:	f000 fa25 	bl	8005424 <memchr>
 8004fda:	1c75      	adds	r5, r6, #1
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d11f      	bne.n	8005020 <_svfiprintf_r+0xe4>
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	06d3      	lsls	r3, r2, #27
 8004fe4:	d504      	bpl.n	8004ff0 <_svfiprintf_r+0xb4>
 8004fe6:	2353      	movs	r3, #83	; 0x53
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	185b      	adds	r3, r3, r1
 8004fec:	2120      	movs	r1, #32
 8004fee:	7019      	strb	r1, [r3, #0]
 8004ff0:	0713      	lsls	r3, r2, #28
 8004ff2:	d504      	bpl.n	8004ffe <_svfiprintf_r+0xc2>
 8004ff4:	2353      	movs	r3, #83	; 0x53
 8004ff6:	a904      	add	r1, sp, #16
 8004ff8:	185b      	adds	r3, r3, r1
 8004ffa:	212b      	movs	r1, #43	; 0x2b
 8004ffc:	7019      	strb	r1, [r3, #0]
 8004ffe:	7833      	ldrb	r3, [r6, #0]
 8005000:	2b2a      	cmp	r3, #42	; 0x2a
 8005002:	d016      	beq.n	8005032 <_svfiprintf_r+0xf6>
 8005004:	0035      	movs	r5, r6
 8005006:	2100      	movs	r1, #0
 8005008:	200a      	movs	r0, #10
 800500a:	68e3      	ldr	r3, [r4, #12]
 800500c:	782a      	ldrb	r2, [r5, #0]
 800500e:	1c6e      	adds	r6, r5, #1
 8005010:	3a30      	subs	r2, #48	; 0x30
 8005012:	2a09      	cmp	r2, #9
 8005014:	d94e      	bls.n	80050b4 <_svfiprintf_r+0x178>
 8005016:	2900      	cmp	r1, #0
 8005018:	d018      	beq.n	800504c <_svfiprintf_r+0x110>
 800501a:	e010      	b.n	800503e <_svfiprintf_r+0x102>
 800501c:	3501      	adds	r5, #1
 800501e:	e7b1      	b.n	8004f84 <_svfiprintf_r+0x48>
 8005020:	4b40      	ldr	r3, [pc, #256]	; (8005124 <_svfiprintf_r+0x1e8>)
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	1ac0      	subs	r0, r0, r3
 8005026:	2301      	movs	r3, #1
 8005028:	4083      	lsls	r3, r0
 800502a:	4313      	orrs	r3, r2
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	002e      	movs	r6, r5
 8005030:	e7ce      	b.n	8004fd0 <_svfiprintf_r+0x94>
 8005032:	9b07      	ldr	r3, [sp, #28]
 8005034:	1d19      	adds	r1, r3, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	9107      	str	r1, [sp, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	db01      	blt.n	8005042 <_svfiprintf_r+0x106>
 800503e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005040:	e004      	b.n	800504c <_svfiprintf_r+0x110>
 8005042:	425b      	negs	r3, r3
 8005044:	60e3      	str	r3, [r4, #12]
 8005046:	2302      	movs	r3, #2
 8005048:	4313      	orrs	r3, r2
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	782b      	ldrb	r3, [r5, #0]
 800504e:	2b2e      	cmp	r3, #46	; 0x2e
 8005050:	d10a      	bne.n	8005068 <_svfiprintf_r+0x12c>
 8005052:	786b      	ldrb	r3, [r5, #1]
 8005054:	2b2a      	cmp	r3, #42	; 0x2a
 8005056:	d135      	bne.n	80050c4 <_svfiprintf_r+0x188>
 8005058:	9b07      	ldr	r3, [sp, #28]
 800505a:	3502      	adds	r5, #2
 800505c:	1d1a      	adds	r2, r3, #4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	9207      	str	r2, [sp, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	db2b      	blt.n	80050be <_svfiprintf_r+0x182>
 8005066:	9309      	str	r3, [sp, #36]	; 0x24
 8005068:	4e2f      	ldr	r6, [pc, #188]	; (8005128 <_svfiprintf_r+0x1ec>)
 800506a:	7829      	ldrb	r1, [r5, #0]
 800506c:	2203      	movs	r2, #3
 800506e:	0030      	movs	r0, r6
 8005070:	f000 f9d8 	bl	8005424 <memchr>
 8005074:	2800      	cmp	r0, #0
 8005076:	d006      	beq.n	8005086 <_svfiprintf_r+0x14a>
 8005078:	2340      	movs	r3, #64	; 0x40
 800507a:	1b80      	subs	r0, r0, r6
 800507c:	4083      	lsls	r3, r0
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	3501      	adds	r5, #1
 8005082:	4313      	orrs	r3, r2
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	7829      	ldrb	r1, [r5, #0]
 8005088:	2206      	movs	r2, #6
 800508a:	4828      	ldr	r0, [pc, #160]	; (800512c <_svfiprintf_r+0x1f0>)
 800508c:	1c6e      	adds	r6, r5, #1
 800508e:	7621      	strb	r1, [r4, #24]
 8005090:	f000 f9c8 	bl	8005424 <memchr>
 8005094:	2800      	cmp	r0, #0
 8005096:	d03c      	beq.n	8005112 <_svfiprintf_r+0x1d6>
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <_svfiprintf_r+0x1f4>)
 800509a:	2b00      	cmp	r3, #0
 800509c:	d125      	bne.n	80050ea <_svfiprintf_r+0x1ae>
 800509e:	2207      	movs	r2, #7
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	3307      	adds	r3, #7
 80050a4:	4393      	bics	r3, r2
 80050a6:	3308      	adds	r3, #8
 80050a8:	9307      	str	r3, [sp, #28]
 80050aa:	6963      	ldr	r3, [r4, #20]
 80050ac:	9a04      	ldr	r2, [sp, #16]
 80050ae:	189b      	adds	r3, r3, r2
 80050b0:	6163      	str	r3, [r4, #20]
 80050b2:	e766      	b.n	8004f82 <_svfiprintf_r+0x46>
 80050b4:	4343      	muls	r3, r0
 80050b6:	2101      	movs	r1, #1
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	0035      	movs	r5, r6
 80050bc:	e7a6      	b.n	800500c <_svfiprintf_r+0xd0>
 80050be:	2301      	movs	r3, #1
 80050c0:	425b      	negs	r3, r3
 80050c2:	e7d0      	b.n	8005066 <_svfiprintf_r+0x12a>
 80050c4:	2300      	movs	r3, #0
 80050c6:	200a      	movs	r0, #10
 80050c8:	001a      	movs	r2, r3
 80050ca:	3501      	adds	r5, #1
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	7829      	ldrb	r1, [r5, #0]
 80050d0:	1c6e      	adds	r6, r5, #1
 80050d2:	3930      	subs	r1, #48	; 0x30
 80050d4:	2909      	cmp	r1, #9
 80050d6:	d903      	bls.n	80050e0 <_svfiprintf_r+0x1a4>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0c5      	beq.n	8005068 <_svfiprintf_r+0x12c>
 80050dc:	9209      	str	r2, [sp, #36]	; 0x24
 80050de:	e7c3      	b.n	8005068 <_svfiprintf_r+0x12c>
 80050e0:	4342      	muls	r2, r0
 80050e2:	2301      	movs	r3, #1
 80050e4:	1852      	adds	r2, r2, r1
 80050e6:	0035      	movs	r5, r6
 80050e8:	e7f1      	b.n	80050ce <_svfiprintf_r+0x192>
 80050ea:	ab07      	add	r3, sp, #28
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	003a      	movs	r2, r7
 80050f0:	4b10      	ldr	r3, [pc, #64]	; (8005134 <_svfiprintf_r+0x1f8>)
 80050f2:	0021      	movs	r1, r4
 80050f4:	9803      	ldr	r0, [sp, #12]
 80050f6:	e000      	b.n	80050fa <_svfiprintf_r+0x1be>
 80050f8:	bf00      	nop
 80050fa:	9004      	str	r0, [sp, #16]
 80050fc:	9b04      	ldr	r3, [sp, #16]
 80050fe:	3301      	adds	r3, #1
 8005100:	d1d3      	bne.n	80050aa <_svfiprintf_r+0x16e>
 8005102:	89bb      	ldrh	r3, [r7, #12]
 8005104:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005106:	065b      	lsls	r3, r3, #25
 8005108:	d400      	bmi.n	800510c <_svfiprintf_r+0x1d0>
 800510a:	e72e      	b.n	8004f6a <_svfiprintf_r+0x2e>
 800510c:	2001      	movs	r0, #1
 800510e:	4240      	negs	r0, r0
 8005110:	e72b      	b.n	8004f6a <_svfiprintf_r+0x2e>
 8005112:	ab07      	add	r3, sp, #28
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	003a      	movs	r2, r7
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <_svfiprintf_r+0x1f8>)
 800511a:	0021      	movs	r1, r4
 800511c:	9803      	ldr	r0, [sp, #12]
 800511e:	f000 f879 	bl	8005214 <_printf_i>
 8005122:	e7ea      	b.n	80050fa <_svfiprintf_r+0x1be>
 8005124:	080056f4 	.word	0x080056f4
 8005128:	080056fa 	.word	0x080056fa
 800512c:	080056fe 	.word	0x080056fe
 8005130:	00000000 	.word	0x00000000
 8005134:	08004e79 	.word	0x08004e79

08005138 <_printf_common>:
 8005138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513a:	0015      	movs	r5, r2
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	688a      	ldr	r2, [r1, #8]
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	9000      	str	r0, [sp, #0]
 8005144:	000c      	movs	r4, r1
 8005146:	4293      	cmp	r3, r2
 8005148:	da00      	bge.n	800514c <_printf_common+0x14>
 800514a:	0013      	movs	r3, r2
 800514c:	0022      	movs	r2, r4
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	3243      	adds	r2, #67	; 0x43
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	2a00      	cmp	r2, #0
 8005156:	d001      	beq.n	800515c <_printf_common+0x24>
 8005158:	3301      	adds	r3, #1
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	069b      	lsls	r3, r3, #26
 8005160:	d502      	bpl.n	8005168 <_printf_common+0x30>
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	3302      	adds	r3, #2
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	2706      	movs	r7, #6
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	401f      	ands	r7, r3
 800516e:	d027      	beq.n	80051c0 <_printf_common+0x88>
 8005170:	0023      	movs	r3, r4
 8005172:	3343      	adds	r3, #67	; 0x43
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	4193      	sbcs	r3, r2
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d430      	bmi.n	80051e2 <_printf_common+0xaa>
 8005180:	0022      	movs	r2, r4
 8005182:	9901      	ldr	r1, [sp, #4]
 8005184:	3243      	adds	r2, #67	; 0x43
 8005186:	9800      	ldr	r0, [sp, #0]
 8005188:	9e08      	ldr	r6, [sp, #32]
 800518a:	47b0      	blx	r6
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d025      	beq.n	80051dc <_printf_common+0xa4>
 8005190:	2306      	movs	r3, #6
 8005192:	6820      	ldr	r0, [r4, #0]
 8005194:	682a      	ldr	r2, [r5, #0]
 8005196:	68e1      	ldr	r1, [r4, #12]
 8005198:	4003      	ands	r3, r0
 800519a:	2500      	movs	r5, #0
 800519c:	2b04      	cmp	r3, #4
 800519e:	d103      	bne.n	80051a8 <_printf_common+0x70>
 80051a0:	1a8d      	subs	r5, r1, r2
 80051a2:	43eb      	mvns	r3, r5
 80051a4:	17db      	asrs	r3, r3, #31
 80051a6:	401d      	ands	r5, r3
 80051a8:	68a3      	ldr	r3, [r4, #8]
 80051aa:	6922      	ldr	r2, [r4, #16]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	dd01      	ble.n	80051b4 <_printf_common+0x7c>
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	18ed      	adds	r5, r5, r3
 80051b4:	2700      	movs	r7, #0
 80051b6:	42bd      	cmp	r5, r7
 80051b8:	d120      	bne.n	80051fc <_printf_common+0xc4>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e010      	b.n	80051e0 <_printf_common+0xa8>
 80051be:	3701      	adds	r7, #1
 80051c0:	68e3      	ldr	r3, [r4, #12]
 80051c2:	682a      	ldr	r2, [r5, #0]
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	42bb      	cmp	r3, r7
 80051c8:	ddd2      	ble.n	8005170 <_printf_common+0x38>
 80051ca:	0022      	movs	r2, r4
 80051cc:	2301      	movs	r3, #1
 80051ce:	3219      	adds	r2, #25
 80051d0:	9901      	ldr	r1, [sp, #4]
 80051d2:	9800      	ldr	r0, [sp, #0]
 80051d4:	9e08      	ldr	r6, [sp, #32]
 80051d6:	47b0      	blx	r6
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d1f0      	bne.n	80051be <_printf_common+0x86>
 80051dc:	2001      	movs	r0, #1
 80051de:	4240      	negs	r0, r0
 80051e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051e2:	2030      	movs	r0, #48	; 0x30
 80051e4:	18e1      	adds	r1, r4, r3
 80051e6:	3143      	adds	r1, #67	; 0x43
 80051e8:	7008      	strb	r0, [r1, #0]
 80051ea:	0021      	movs	r1, r4
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	3145      	adds	r1, #69	; 0x45
 80051f0:	7809      	ldrb	r1, [r1, #0]
 80051f2:	18a2      	adds	r2, r4, r2
 80051f4:	3243      	adds	r2, #67	; 0x43
 80051f6:	3302      	adds	r3, #2
 80051f8:	7011      	strb	r1, [r2, #0]
 80051fa:	e7c1      	b.n	8005180 <_printf_common+0x48>
 80051fc:	0022      	movs	r2, r4
 80051fe:	2301      	movs	r3, #1
 8005200:	321a      	adds	r2, #26
 8005202:	9901      	ldr	r1, [sp, #4]
 8005204:	9800      	ldr	r0, [sp, #0]
 8005206:	9e08      	ldr	r6, [sp, #32]
 8005208:	47b0      	blx	r6
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d0e6      	beq.n	80051dc <_printf_common+0xa4>
 800520e:	3701      	adds	r7, #1
 8005210:	e7d1      	b.n	80051b6 <_printf_common+0x7e>
	...

08005214 <_printf_i>:
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	b089      	sub	sp, #36	; 0x24
 8005218:	9204      	str	r2, [sp, #16]
 800521a:	000a      	movs	r2, r1
 800521c:	3243      	adds	r2, #67	; 0x43
 800521e:	9305      	str	r3, [sp, #20]
 8005220:	9003      	str	r0, [sp, #12]
 8005222:	9202      	str	r2, [sp, #8]
 8005224:	7e0a      	ldrb	r2, [r1, #24]
 8005226:	000c      	movs	r4, r1
 8005228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800522a:	2a6e      	cmp	r2, #110	; 0x6e
 800522c:	d100      	bne.n	8005230 <_printf_i+0x1c>
 800522e:	e086      	b.n	800533e <_printf_i+0x12a>
 8005230:	d81f      	bhi.n	8005272 <_printf_i+0x5e>
 8005232:	2a63      	cmp	r2, #99	; 0x63
 8005234:	d033      	beq.n	800529e <_printf_i+0x8a>
 8005236:	d808      	bhi.n	800524a <_printf_i+0x36>
 8005238:	2a00      	cmp	r2, #0
 800523a:	d100      	bne.n	800523e <_printf_i+0x2a>
 800523c:	e08c      	b.n	8005358 <_printf_i+0x144>
 800523e:	2a58      	cmp	r2, #88	; 0x58
 8005240:	d04d      	beq.n	80052de <_printf_i+0xca>
 8005242:	0025      	movs	r5, r4
 8005244:	3542      	adds	r5, #66	; 0x42
 8005246:	702a      	strb	r2, [r5, #0]
 8005248:	e030      	b.n	80052ac <_printf_i+0x98>
 800524a:	2a64      	cmp	r2, #100	; 0x64
 800524c:	d001      	beq.n	8005252 <_printf_i+0x3e>
 800524e:	2a69      	cmp	r2, #105	; 0x69
 8005250:	d1f7      	bne.n	8005242 <_printf_i+0x2e>
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	1d0a      	adds	r2, r1, #4
 8005258:	0628      	lsls	r0, r5, #24
 800525a:	d529      	bpl.n	80052b0 <_printf_i+0x9c>
 800525c:	6808      	ldr	r0, [r1, #0]
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	2800      	cmp	r0, #0
 8005262:	da03      	bge.n	800526c <_printf_i+0x58>
 8005264:	232d      	movs	r3, #45	; 0x2d
 8005266:	9a02      	ldr	r2, [sp, #8]
 8005268:	4240      	negs	r0, r0
 800526a:	7013      	strb	r3, [r2, #0]
 800526c:	4e6b      	ldr	r6, [pc, #428]	; (800541c <_printf_i+0x208>)
 800526e:	270a      	movs	r7, #10
 8005270:	e04f      	b.n	8005312 <_printf_i+0xfe>
 8005272:	2a73      	cmp	r2, #115	; 0x73
 8005274:	d074      	beq.n	8005360 <_printf_i+0x14c>
 8005276:	d808      	bhi.n	800528a <_printf_i+0x76>
 8005278:	2a6f      	cmp	r2, #111	; 0x6f
 800527a:	d01f      	beq.n	80052bc <_printf_i+0xa8>
 800527c:	2a70      	cmp	r2, #112	; 0x70
 800527e:	d1e0      	bne.n	8005242 <_printf_i+0x2e>
 8005280:	2220      	movs	r2, #32
 8005282:	6809      	ldr	r1, [r1, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	6022      	str	r2, [r4, #0]
 8005288:	e003      	b.n	8005292 <_printf_i+0x7e>
 800528a:	2a75      	cmp	r2, #117	; 0x75
 800528c:	d016      	beq.n	80052bc <_printf_i+0xa8>
 800528e:	2a78      	cmp	r2, #120	; 0x78
 8005290:	d1d7      	bne.n	8005242 <_printf_i+0x2e>
 8005292:	0022      	movs	r2, r4
 8005294:	2178      	movs	r1, #120	; 0x78
 8005296:	3245      	adds	r2, #69	; 0x45
 8005298:	7011      	strb	r1, [r2, #0]
 800529a:	4e61      	ldr	r6, [pc, #388]	; (8005420 <_printf_i+0x20c>)
 800529c:	e022      	b.n	80052e4 <_printf_i+0xd0>
 800529e:	0025      	movs	r5, r4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	3542      	adds	r5, #66	; 0x42
 80052a4:	1d11      	adds	r1, r2, #4
 80052a6:	6019      	str	r1, [r3, #0]
 80052a8:	6813      	ldr	r3, [r2, #0]
 80052aa:	702b      	strb	r3, [r5, #0]
 80052ac:	2301      	movs	r3, #1
 80052ae:	e065      	b.n	800537c <_printf_i+0x168>
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	0669      	lsls	r1, r5, #25
 80052b6:	d5d3      	bpl.n	8005260 <_printf_i+0x4c>
 80052b8:	b200      	sxth	r0, r0
 80052ba:	e7d1      	b.n	8005260 <_printf_i+0x4c>
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	1d08      	adds	r0, r1, #4
 80052c2:	6018      	str	r0, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	062e      	lsls	r6, r5, #24
 80052c8:	d505      	bpl.n	80052d6 <_printf_i+0xc2>
 80052ca:	4e54      	ldr	r6, [pc, #336]	; (800541c <_printf_i+0x208>)
 80052cc:	2708      	movs	r7, #8
 80052ce:	2a6f      	cmp	r2, #111	; 0x6f
 80052d0:	d01b      	beq.n	800530a <_printf_i+0xf6>
 80052d2:	270a      	movs	r7, #10
 80052d4:	e019      	b.n	800530a <_printf_i+0xf6>
 80052d6:	066d      	lsls	r5, r5, #25
 80052d8:	d5f7      	bpl.n	80052ca <_printf_i+0xb6>
 80052da:	b280      	uxth	r0, r0
 80052dc:	e7f5      	b.n	80052ca <_printf_i+0xb6>
 80052de:	3145      	adds	r1, #69	; 0x45
 80052e0:	4e4e      	ldr	r6, [pc, #312]	; (800541c <_printf_i+0x208>)
 80052e2:	700a      	strb	r2, [r1, #0]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	1d01      	adds	r1, r0, #4
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	0615      	lsls	r5, r2, #24
 80052f0:	d521      	bpl.n	8005336 <_printf_i+0x122>
 80052f2:	07d3      	lsls	r3, r2, #31
 80052f4:	d502      	bpl.n	80052fc <_printf_i+0xe8>
 80052f6:	2320      	movs	r3, #32
 80052f8:	431a      	orrs	r2, r3
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	2710      	movs	r7, #16
 80052fe:	2800      	cmp	r0, #0
 8005300:	d103      	bne.n	800530a <_printf_i+0xf6>
 8005302:	2320      	movs	r3, #32
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	439a      	bics	r2, r3
 8005308:	6022      	str	r2, [r4, #0]
 800530a:	0023      	movs	r3, r4
 800530c:	2200      	movs	r2, #0
 800530e:	3343      	adds	r3, #67	; 0x43
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	6863      	ldr	r3, [r4, #4]
 8005314:	60a3      	str	r3, [r4, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	db58      	blt.n	80053cc <_printf_i+0x1b8>
 800531a:	2204      	movs	r2, #4
 800531c:	6821      	ldr	r1, [r4, #0]
 800531e:	4391      	bics	r1, r2
 8005320:	6021      	str	r1, [r4, #0]
 8005322:	2800      	cmp	r0, #0
 8005324:	d154      	bne.n	80053d0 <_printf_i+0x1bc>
 8005326:	9d02      	ldr	r5, [sp, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d05a      	beq.n	80053e2 <_printf_i+0x1ce>
 800532c:	0025      	movs	r5, r4
 800532e:	7833      	ldrb	r3, [r6, #0]
 8005330:	3542      	adds	r5, #66	; 0x42
 8005332:	702b      	strb	r3, [r5, #0]
 8005334:	e055      	b.n	80053e2 <_printf_i+0x1ce>
 8005336:	0655      	lsls	r5, r2, #25
 8005338:	d5db      	bpl.n	80052f2 <_printf_i+0xde>
 800533a:	b280      	uxth	r0, r0
 800533c:	e7d9      	b.n	80052f2 <_printf_i+0xde>
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	680d      	ldr	r5, [r1, #0]
 8005342:	1d10      	adds	r0, r2, #4
 8005344:	6949      	ldr	r1, [r1, #20]
 8005346:	6018      	str	r0, [r3, #0]
 8005348:	6813      	ldr	r3, [r2, #0]
 800534a:	062e      	lsls	r6, r5, #24
 800534c:	d501      	bpl.n	8005352 <_printf_i+0x13e>
 800534e:	6019      	str	r1, [r3, #0]
 8005350:	e002      	b.n	8005358 <_printf_i+0x144>
 8005352:	066d      	lsls	r5, r5, #25
 8005354:	d5fb      	bpl.n	800534e <_printf_i+0x13a>
 8005356:	8019      	strh	r1, [r3, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	9d02      	ldr	r5, [sp, #8]
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	e04f      	b.n	8005400 <_printf_i+0x1ec>
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	1d11      	adds	r1, r2, #4
 8005364:	6019      	str	r1, [r3, #0]
 8005366:	6815      	ldr	r5, [r2, #0]
 8005368:	2100      	movs	r1, #0
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	0028      	movs	r0, r5
 800536e:	f000 f859 	bl	8005424 <memchr>
 8005372:	2800      	cmp	r0, #0
 8005374:	d001      	beq.n	800537a <_printf_i+0x166>
 8005376:	1b40      	subs	r0, r0, r5
 8005378:	6060      	str	r0, [r4, #4]
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	2300      	movs	r3, #0
 8005380:	9a02      	ldr	r2, [sp, #8]
 8005382:	7013      	strb	r3, [r2, #0]
 8005384:	e03c      	b.n	8005400 <_printf_i+0x1ec>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	002a      	movs	r2, r5
 800538a:	9904      	ldr	r1, [sp, #16]
 800538c:	9803      	ldr	r0, [sp, #12]
 800538e:	9d05      	ldr	r5, [sp, #20]
 8005390:	47a8      	blx	r5
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d03e      	beq.n	8005414 <_printf_i+0x200>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	079b      	lsls	r3, r3, #30
 800539a:	d415      	bmi.n	80053c8 <_printf_i+0x1b4>
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	68e0      	ldr	r0, [r4, #12]
 80053a0:	4298      	cmp	r0, r3
 80053a2:	da39      	bge.n	8005418 <_printf_i+0x204>
 80053a4:	0018      	movs	r0, r3
 80053a6:	e037      	b.n	8005418 <_printf_i+0x204>
 80053a8:	0022      	movs	r2, r4
 80053aa:	2301      	movs	r3, #1
 80053ac:	3219      	adds	r2, #25
 80053ae:	9904      	ldr	r1, [sp, #16]
 80053b0:	9803      	ldr	r0, [sp, #12]
 80053b2:	9e05      	ldr	r6, [sp, #20]
 80053b4:	47b0      	blx	r6
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	d02c      	beq.n	8005414 <_printf_i+0x200>
 80053ba:	3501      	adds	r5, #1
 80053bc:	68e3      	ldr	r3, [r4, #12]
 80053be:	9a07      	ldr	r2, [sp, #28]
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	42ab      	cmp	r3, r5
 80053c4:	dcf0      	bgt.n	80053a8 <_printf_i+0x194>
 80053c6:	e7e9      	b.n	800539c <_printf_i+0x188>
 80053c8:	2500      	movs	r5, #0
 80053ca:	e7f7      	b.n	80053bc <_printf_i+0x1a8>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d0ad      	beq.n	800532c <_printf_i+0x118>
 80053d0:	9d02      	ldr	r5, [sp, #8]
 80053d2:	0039      	movs	r1, r7
 80053d4:	f7fa ff1e 	bl	8000214 <__aeabi_uidivmod>
 80053d8:	5c73      	ldrb	r3, [r6, r1]
 80053da:	3d01      	subs	r5, #1
 80053dc:	702b      	strb	r3, [r5, #0]
 80053de:	2800      	cmp	r0, #0
 80053e0:	d1f7      	bne.n	80053d2 <_printf_i+0x1be>
 80053e2:	2f08      	cmp	r7, #8
 80053e4:	d109      	bne.n	80053fa <_printf_i+0x1e6>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	07db      	lsls	r3, r3, #31
 80053ea:	d506      	bpl.n	80053fa <_printf_i+0x1e6>
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	6922      	ldr	r2, [r4, #16]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	dc02      	bgt.n	80053fa <_printf_i+0x1e6>
 80053f4:	2330      	movs	r3, #48	; 0x30
 80053f6:	3d01      	subs	r5, #1
 80053f8:	702b      	strb	r3, [r5, #0]
 80053fa:	9b02      	ldr	r3, [sp, #8]
 80053fc:	1b5b      	subs	r3, r3, r5
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	9b05      	ldr	r3, [sp, #20]
 8005402:	aa07      	add	r2, sp, #28
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	0021      	movs	r1, r4
 8005408:	9b04      	ldr	r3, [sp, #16]
 800540a:	9803      	ldr	r0, [sp, #12]
 800540c:	f7ff fe94 	bl	8005138 <_printf_common>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d1b8      	bne.n	8005386 <_printf_i+0x172>
 8005414:	2001      	movs	r0, #1
 8005416:	4240      	negs	r0, r0
 8005418:	b009      	add	sp, #36	; 0x24
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541c:	08005705 	.word	0x08005705
 8005420:	08005716 	.word	0x08005716

08005424 <memchr>:
 8005424:	b2c9      	uxtb	r1, r1
 8005426:	1882      	adds	r2, r0, r2
 8005428:	4290      	cmp	r0, r2
 800542a:	d101      	bne.n	8005430 <memchr+0xc>
 800542c:	2000      	movs	r0, #0
 800542e:	4770      	bx	lr
 8005430:	7803      	ldrb	r3, [r0, #0]
 8005432:	428b      	cmp	r3, r1
 8005434:	d0fb      	beq.n	800542e <memchr+0xa>
 8005436:	3001      	adds	r0, #1
 8005438:	e7f6      	b.n	8005428 <memchr+0x4>

0800543a <memcpy>:
 800543a:	2300      	movs	r3, #0
 800543c:	b510      	push	{r4, lr}
 800543e:	429a      	cmp	r2, r3
 8005440:	d100      	bne.n	8005444 <memcpy+0xa>
 8005442:	bd10      	pop	{r4, pc}
 8005444:	5ccc      	ldrb	r4, [r1, r3]
 8005446:	54c4      	strb	r4, [r0, r3]
 8005448:	3301      	adds	r3, #1
 800544a:	e7f8      	b.n	800543e <memcpy+0x4>

0800544c <memmove>:
 800544c:	b510      	push	{r4, lr}
 800544e:	4288      	cmp	r0, r1
 8005450:	d902      	bls.n	8005458 <memmove+0xc>
 8005452:	188b      	adds	r3, r1, r2
 8005454:	4298      	cmp	r0, r3
 8005456:	d303      	bcc.n	8005460 <memmove+0x14>
 8005458:	2300      	movs	r3, #0
 800545a:	e007      	b.n	800546c <memmove+0x20>
 800545c:	5c8b      	ldrb	r3, [r1, r2]
 800545e:	5483      	strb	r3, [r0, r2]
 8005460:	3a01      	subs	r2, #1
 8005462:	d2fb      	bcs.n	800545c <memmove+0x10>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	5ccc      	ldrb	r4, [r1, r3]
 8005468:	54c4      	strb	r4, [r0, r3]
 800546a:	3301      	adds	r3, #1
 800546c:	429a      	cmp	r2, r3
 800546e:	d1fa      	bne.n	8005466 <memmove+0x1a>
 8005470:	e7f8      	b.n	8005464 <memmove+0x18>
	...

08005474 <_free_r>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	0005      	movs	r5, r0
 8005478:	2900      	cmp	r1, #0
 800547a:	d010      	beq.n	800549e <_free_r+0x2a>
 800547c:	1f0c      	subs	r4, r1, #4
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da00      	bge.n	8005486 <_free_r+0x12>
 8005484:	18e4      	adds	r4, r4, r3
 8005486:	0028      	movs	r0, r5
 8005488:	f000 f8d4 	bl	8005634 <__malloc_lock>
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <_free_r+0x90>)
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <_free_r+0x2c>
 8005494:	6063      	str	r3, [r4, #4]
 8005496:	6014      	str	r4, [r2, #0]
 8005498:	0028      	movs	r0, r5
 800549a:	f000 f8cc 	bl	8005636 <__malloc_unlock>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d909      	bls.n	80054b8 <_free_r+0x44>
 80054a4:	6821      	ldr	r1, [r4, #0]
 80054a6:	1860      	adds	r0, r4, r1
 80054a8:	4283      	cmp	r3, r0
 80054aa:	d1f3      	bne.n	8005494 <_free_r+0x20>
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	1841      	adds	r1, r0, r1
 80054b2:	6021      	str	r1, [r4, #0]
 80054b4:	e7ee      	b.n	8005494 <_free_r+0x20>
 80054b6:	0013      	movs	r3, r2
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	2a00      	cmp	r2, #0
 80054bc:	d001      	beq.n	80054c2 <_free_r+0x4e>
 80054be:	42a2      	cmp	r2, r4
 80054c0:	d9f9      	bls.n	80054b6 <_free_r+0x42>
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	1858      	adds	r0, r3, r1
 80054c6:	42a0      	cmp	r0, r4
 80054c8:	d10b      	bne.n	80054e2 <_free_r+0x6e>
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	1809      	adds	r1, r1, r0
 80054ce:	1858      	adds	r0, r3, r1
 80054d0:	6019      	str	r1, [r3, #0]
 80054d2:	4282      	cmp	r2, r0
 80054d4:	d1e0      	bne.n	8005498 <_free_r+0x24>
 80054d6:	6810      	ldr	r0, [r2, #0]
 80054d8:	6852      	ldr	r2, [r2, #4]
 80054da:	1841      	adds	r1, r0, r1
 80054dc:	6019      	str	r1, [r3, #0]
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	e7da      	b.n	8005498 <_free_r+0x24>
 80054e2:	42a0      	cmp	r0, r4
 80054e4:	d902      	bls.n	80054ec <_free_r+0x78>
 80054e6:	230c      	movs	r3, #12
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	e7d5      	b.n	8005498 <_free_r+0x24>
 80054ec:	6821      	ldr	r1, [r4, #0]
 80054ee:	1860      	adds	r0, r4, r1
 80054f0:	4282      	cmp	r2, r0
 80054f2:	d103      	bne.n	80054fc <_free_r+0x88>
 80054f4:	6810      	ldr	r0, [r2, #0]
 80054f6:	6852      	ldr	r2, [r2, #4]
 80054f8:	1841      	adds	r1, r0, r1
 80054fa:	6021      	str	r1, [r4, #0]
 80054fc:	6062      	str	r2, [r4, #4]
 80054fe:	605c      	str	r4, [r3, #4]
 8005500:	e7ca      	b.n	8005498 <_free_r+0x24>
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	20000298 	.word	0x20000298

08005508 <_malloc_r>:
 8005508:	2303      	movs	r3, #3
 800550a:	b570      	push	{r4, r5, r6, lr}
 800550c:	1ccd      	adds	r5, r1, #3
 800550e:	439d      	bics	r5, r3
 8005510:	3508      	adds	r5, #8
 8005512:	0006      	movs	r6, r0
 8005514:	2d0c      	cmp	r5, #12
 8005516:	d21e      	bcs.n	8005556 <_malloc_r+0x4e>
 8005518:	250c      	movs	r5, #12
 800551a:	42a9      	cmp	r1, r5
 800551c:	d81d      	bhi.n	800555a <_malloc_r+0x52>
 800551e:	0030      	movs	r0, r6
 8005520:	f000 f888 	bl	8005634 <__malloc_lock>
 8005524:	4a25      	ldr	r2, [pc, #148]	; (80055bc <_malloc_r+0xb4>)
 8005526:	6814      	ldr	r4, [r2, #0]
 8005528:	0021      	movs	r1, r4
 800552a:	2900      	cmp	r1, #0
 800552c:	d119      	bne.n	8005562 <_malloc_r+0x5a>
 800552e:	4c24      	ldr	r4, [pc, #144]	; (80055c0 <_malloc_r+0xb8>)
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <_malloc_r+0x36>
 8005536:	0030      	movs	r0, r6
 8005538:	f000 f86a 	bl	8005610 <_sbrk_r>
 800553c:	6020      	str	r0, [r4, #0]
 800553e:	0029      	movs	r1, r5
 8005540:	0030      	movs	r0, r6
 8005542:	f000 f865 	bl	8005610 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d12b      	bne.n	80055a2 <_malloc_r+0x9a>
 800554a:	230c      	movs	r3, #12
 800554c:	0030      	movs	r0, r6
 800554e:	6033      	str	r3, [r6, #0]
 8005550:	f000 f871 	bl	8005636 <__malloc_unlock>
 8005554:	e003      	b.n	800555e <_malloc_r+0x56>
 8005556:	2d00      	cmp	r5, #0
 8005558:	dadf      	bge.n	800551a <_malloc_r+0x12>
 800555a:	230c      	movs	r3, #12
 800555c:	6033      	str	r3, [r6, #0]
 800555e:	2000      	movs	r0, #0
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	680b      	ldr	r3, [r1, #0]
 8005564:	1b5b      	subs	r3, r3, r5
 8005566:	d419      	bmi.n	800559c <_malloc_r+0x94>
 8005568:	2b0b      	cmp	r3, #11
 800556a:	d903      	bls.n	8005574 <_malloc_r+0x6c>
 800556c:	600b      	str	r3, [r1, #0]
 800556e:	18cc      	adds	r4, r1, r3
 8005570:	6025      	str	r5, [r4, #0]
 8005572:	e003      	b.n	800557c <_malloc_r+0x74>
 8005574:	684b      	ldr	r3, [r1, #4]
 8005576:	428c      	cmp	r4, r1
 8005578:	d10d      	bne.n	8005596 <_malloc_r+0x8e>
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	0030      	movs	r0, r6
 800557e:	f000 f85a 	bl	8005636 <__malloc_unlock>
 8005582:	0020      	movs	r0, r4
 8005584:	2207      	movs	r2, #7
 8005586:	300b      	adds	r0, #11
 8005588:	1d23      	adds	r3, r4, #4
 800558a:	4390      	bics	r0, r2
 800558c:	1ac3      	subs	r3, r0, r3
 800558e:	d0e7      	beq.n	8005560 <_malloc_r+0x58>
 8005590:	425a      	negs	r2, r3
 8005592:	50e2      	str	r2, [r4, r3]
 8005594:	e7e4      	b.n	8005560 <_malloc_r+0x58>
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	000c      	movs	r4, r1
 800559a:	e7ef      	b.n	800557c <_malloc_r+0x74>
 800559c:	000c      	movs	r4, r1
 800559e:	6849      	ldr	r1, [r1, #4]
 80055a0:	e7c3      	b.n	800552a <_malloc_r+0x22>
 80055a2:	2303      	movs	r3, #3
 80055a4:	1cc4      	adds	r4, r0, #3
 80055a6:	439c      	bics	r4, r3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d0e1      	beq.n	8005570 <_malloc_r+0x68>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	0030      	movs	r0, r6
 80055b0:	f000 f82e 	bl	8005610 <_sbrk_r>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d1db      	bne.n	8005570 <_malloc_r+0x68>
 80055b8:	e7c7      	b.n	800554a <_malloc_r+0x42>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	20000298 	.word	0x20000298
 80055c0:	2000029c 	.word	0x2000029c

080055c4 <_realloc_r>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	0007      	movs	r7, r0
 80055c8:	000d      	movs	r5, r1
 80055ca:	0016      	movs	r6, r2
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d105      	bne.n	80055dc <_realloc_r+0x18>
 80055d0:	0011      	movs	r1, r2
 80055d2:	f7ff ff99 	bl	8005508 <_malloc_r>
 80055d6:	0004      	movs	r4, r0
 80055d8:	0020      	movs	r0, r4
 80055da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d103      	bne.n	80055e8 <_realloc_r+0x24>
 80055e0:	f7ff ff48 	bl	8005474 <_free_r>
 80055e4:	0034      	movs	r4, r6
 80055e6:	e7f7      	b.n	80055d8 <_realloc_r+0x14>
 80055e8:	f000 f826 	bl	8005638 <_malloc_usable_size_r>
 80055ec:	002c      	movs	r4, r5
 80055ee:	42b0      	cmp	r0, r6
 80055f0:	d2f2      	bcs.n	80055d8 <_realloc_r+0x14>
 80055f2:	0031      	movs	r1, r6
 80055f4:	0038      	movs	r0, r7
 80055f6:	f7ff ff87 	bl	8005508 <_malloc_r>
 80055fa:	1e04      	subs	r4, r0, #0
 80055fc:	d0ec      	beq.n	80055d8 <_realloc_r+0x14>
 80055fe:	0029      	movs	r1, r5
 8005600:	0032      	movs	r2, r6
 8005602:	f7ff ff1a 	bl	800543a <memcpy>
 8005606:	0029      	movs	r1, r5
 8005608:	0038      	movs	r0, r7
 800560a:	f7ff ff33 	bl	8005474 <_free_r>
 800560e:	e7e3      	b.n	80055d8 <_realloc_r+0x14>

08005610 <_sbrk_r>:
 8005610:	2300      	movs	r3, #0
 8005612:	b570      	push	{r4, r5, r6, lr}
 8005614:	4c06      	ldr	r4, [pc, #24]	; (8005630 <_sbrk_r+0x20>)
 8005616:	0005      	movs	r5, r0
 8005618:	0008      	movs	r0, r1
 800561a:	6023      	str	r3, [r4, #0]
 800561c:	f7fc fa4a 	bl	8001ab4 <_sbrk>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d103      	bne.n	800562c <_sbrk_r+0x1c>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <_sbrk_r+0x1c>
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	200003dc 	.word	0x200003dc

08005634 <__malloc_lock>:
 8005634:	4770      	bx	lr

08005636 <__malloc_unlock>:
 8005636:	4770      	bx	lr

08005638 <_malloc_usable_size_r>:
 8005638:	1f0b      	subs	r3, r1, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	1f18      	subs	r0, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	da01      	bge.n	8005646 <_malloc_usable_size_r+0xe>
 8005642:	580b      	ldr	r3, [r1, r0]
 8005644:	18c0      	adds	r0, r0, r3
 8005646:	4770      	bx	lr

08005648 <_init>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr

08005654 <_fini>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr
