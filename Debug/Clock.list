
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a4  080037a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037a4  080037a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037a4  080037a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  080037b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080037b8  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c08c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cea  00000000  00000000  0002c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  0002ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  0002eb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f96d  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5a6  00000000  00000000  0003f125  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005f475  00000000  00000000  0004a6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  000a9bbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800375c 	.word	0x0800375c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800375c 	.word	0x0800375c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <dectobcd>:

#define DS3231 0xD0

// Convert normal decimal numbers to binary coded decimal
uint8_t dectobcd(int val)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	210a      	movs	r1, #10
 8000400:	0018      	movs	r0, r3
 8000402:	f7ff ff0b 	bl	800021c <__divsi3>
 8000406:	0003      	movs	r3, r0
 8000408:	b2db      	uxtb	r3, r3
 800040a:	011b      	lsls	r3, r3, #4
 800040c:	b2dc      	uxtb	r4, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	210a      	movs	r1, #10
 8000412:	0018      	movs	r0, r3
 8000414:	f7ff ffe8 	bl	80003e8 <__aeabi_idivmod>
 8000418:	000b      	movs	r3, r1
 800041a:	b2db      	uxtb	r3, r3
 800041c:	18e3      	adds	r3, r4, r3
 800041e:	b2db      	uxtb	r3, r3
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b003      	add	sp, #12
 8000426:	bd90      	pop	{r4, r7, pc}

08000428 <Set_Time_function>:
}
TIME;
TIME time;

void Set_Time_function (uint8_t min, uint8_t hour, uint8_t day, uint8_t date, uint8_t month, uint8_t year)
{
 8000428:	b5b0      	push	{r4, r5, r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af04      	add	r7, sp, #16
 800042e:	0005      	movs	r5, r0
 8000430:	000c      	movs	r4, r1
 8000432:	0010      	movs	r0, r2
 8000434:	0019      	movs	r1, r3
 8000436:	1dfb      	adds	r3, r7, #7
 8000438:	1c2a      	adds	r2, r5, #0
 800043a:	701a      	strb	r2, [r3, #0]
 800043c:	1dbb      	adds	r3, r7, #6
 800043e:	1c22      	adds	r2, r4, #0
 8000440:	701a      	strb	r2, [r3, #0]
 8000442:	1d7b      	adds	r3, r7, #5
 8000444:	1c02      	adds	r2, r0, #0
 8000446:	701a      	strb	r2, [r3, #0]
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	1c0a      	adds	r2, r1, #0
 800044c:	701a      	strb	r2, [r3, #0]
	uint8_t set_time[6];
	set_time[0] = dectobcd(min);
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ffce 	bl	80003f4 <dectobcd>
 8000458:	0003      	movs	r3, r0
 800045a:	001a      	movs	r2, r3
 800045c:	2408      	movs	r4, #8
 800045e:	193b      	adds	r3, r7, r4
 8000460:	701a      	strb	r2, [r3, #0]
	set_time[1] = dectobcd(hour);
 8000462:	1dbb      	adds	r3, r7, #6
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff ffc4 	bl	80003f4 <dectobcd>
 800046c:	0003      	movs	r3, r0
 800046e:	001a      	movs	r2, r3
 8000470:	193b      	adds	r3, r7, r4
 8000472:	705a      	strb	r2, [r3, #1]
	set_time[2] = dectobcd(day);
 8000474:	1d7b      	adds	r3, r7, #5
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ffbb 	bl	80003f4 <dectobcd>
 800047e:	0003      	movs	r3, r0
 8000480:	001a      	movs	r2, r3
 8000482:	193b      	adds	r3, r7, r4
 8000484:	709a      	strb	r2, [r3, #2]
	set_time[3] = dectobcd(date);
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	0018      	movs	r0, r3
 800048c:	f7ff ffb2 	bl	80003f4 <dectobcd>
 8000490:	0003      	movs	r3, r0
 8000492:	001a      	movs	r2, r3
 8000494:	193b      	adds	r3, r7, r4
 8000496:	70da      	strb	r2, [r3, #3]
	set_time[4] = dectobcd(month);
 8000498:	2320      	movs	r3, #32
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff ffa8 	bl	80003f4 <dectobcd>
 80004a4:	0003      	movs	r3, r0
 80004a6:	001a      	movs	r2, r3
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	711a      	strb	r2, [r3, #4]
	set_time[5] = dectobcd(year);
 80004ac:	2324      	movs	r3, #36	; 0x24
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ff9e 	bl	80003f4 <dectobcd>
 80004b8:	0003      	movs	r3, r0
 80004ba:	001a      	movs	r2, r3
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Mem_Write(&hi2c1, DS3231, 0x01, 1, set_time, 6, 1000);
 80004c0:	4808      	ldr	r0, [pc, #32]	; (80004e4 <Set_Time_function+0xbc>)
 80004c2:	23fa      	movs	r3, #250	; 0xfa
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	2306      	movs	r3, #6
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	2201      	movs	r2, #1
 80004d4:	21d0      	movs	r1, #208	; 0xd0
 80004d6:	f001 fcb9 	bl	8001e4c <HAL_I2C_Mem_Write>
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bdb0      	pop	{r4, r5, r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000028 	.word	0x20000028

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fbdf 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f81f 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f9b5 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fa:	f000 f995 	bl	8000828 <MX_DMA_Init>
  MX_ADC_Init();
 80004fe:	f000 f883 	bl	8000608 <MX_ADC_Init>
  MX_I2C1_Init();
 8000502:	f000 f8db 	bl	80006bc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000506:	f000 f919 	bl	800073c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc,&bat,1);
 800050a:	4908      	ldr	r1, [pc, #32]	; (800052c <main+0x44>)
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <main+0x48>)
 800050e:	2201      	movs	r2, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fd71 	bl	8000ff8 <HAL_ADC_Start_DMA>
  Set_Time_function(00,10,4,17,2,21);
 8000516:	2315      	movs	r3, #21
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2302      	movs	r3, #2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2311      	movs	r3, #17
 8000520:	2204      	movs	r2, #4
 8000522:	210a      	movs	r1, #10
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff7f 	bl	8000428 <Set_Time_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x42>
 800052c:	200000c4 	.word	0x200000c4
 8000530:	2000010c 	.word	0x2000010c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b095      	sub	sp, #84	; 0x54
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	2420      	movs	r4, #32
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2330      	movs	r3, #48	; 0x30
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 f901 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	2310      	movs	r3, #16
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	2310      	movs	r3, #16
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f003 f8f9 	bl	800374c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055a:	003b      	movs	r3, r7
 800055c:	0018      	movs	r0, r3
 800055e:	2310      	movs	r3, #16
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f003 f8f2 	bl	800374c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000568:	0021      	movs	r1, r4
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2213      	movs	r2, #19
 800056e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2201      	movs	r2, #1
 8000574:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2201      	movs	r2, #1
 8000580:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2210      	movs	r2, #16
 8000586:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2210      	movs	r2, #16
 800058c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2202      	movs	r2, #2
 8000592:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0252      	lsls	r2, r2, #9
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fff0 	bl	8002590 <HAL_RCC_OscConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b4:	f000 f9be 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	2110      	movs	r1, #16
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2207      	movs	r2, #7
 80005be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2202      	movs	r2, #2
 80005c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2100      	movs	r1, #0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 faf6 	bl	8002bc8 <HAL_RCC_ClockConfig>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005e0:	f000 f9a8 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005e4:	003b      	movs	r3, r7
 80005e6:	2220      	movs	r2, #32
 80005e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005ea:	003b      	movs	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f0:	003b      	movs	r3, r7
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 fc1a 	bl	8002e2c <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005fc:	f000 f99a 	bl	8000934 <Error_Handler>
  }
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b015      	add	sp, #84	; 0x54
 8000606:	bd90      	pop	{r4, r7, pc}

08000608 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	0018      	movs	r0, r3
 8000612:	230c      	movs	r3, #12
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f003 f898 	bl	800374c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_ADC_Init+0xac>)
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <MX_ADC_Init+0xb0>)
 8000620:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_ADC_Init+0xac>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC_Init+0xac>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_ADC_Init+0xac>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC_Init+0xac>)
 8000636:	2201      	movs	r2, #1
 8000638:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC_Init+0xac>)
 800063c:	2204      	movs	r2, #4
 800063e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC_Init+0xac>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC_Init+0xac>)
 8000648:	2200      	movs	r2, #0
 800064a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_ADC_Init+0xac>)
 800064e:	2200      	movs	r2, #0
 8000650:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ADC_Init+0xac>)
 8000654:	2200      	movs	r2, #0
 8000656:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC_Init+0xac>)
 800065a:	22c2      	movs	r2, #194	; 0xc2
 800065c:	32ff      	adds	r2, #255	; 0xff
 800065e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC_Init+0xac>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_ADC_Init+0xac>)
 8000668:	2224      	movs	r2, #36	; 0x24
 800066a:	2100      	movs	r1, #0
 800066c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_ADC_Init+0xac>)
 8000670:	2201      	movs	r2, #1
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_ADC_Init+0xac>)
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fb7e 	bl	8000d78 <HAL_ADC_Init>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000680:	f000 f958 	bl	8000934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0152      	lsls	r2, r2, #5
 8000690:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2203      	movs	r2, #3
 8000696:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000698:	1d3a      	adds	r2, r7, #4
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_ADC_Init+0xac>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fd44 	bl	800112c <HAL_ADC_ConfigChannel>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80006a8:	f000 f944 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000010c 	.word	0x2000010c
 80006b8:	40012400 	.word	0x40012400

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fb11 	bl	8001d20 <HAL_I2C_Init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 f917 	bl	8000934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x74>)
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fea8 	bl	8002460 <HAL_I2CEx_ConfigAnalogFilter>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f90e 	bl	8000934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MX_I2C1_Init+0x74>)
 800071a:	2100      	movs	r1, #0
 800071c:	0018      	movs	r0, r3
 800071e:	f001 feeb 	bl	80024f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f905 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000028 	.word	0x20000028
 8000734:	40005400 	.word	0x40005400
 8000738:	2000090e 	.word	0x2000090e

0800073c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	2320      	movs	r3, #32
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	0018      	movs	r0, r3
 8000748:	2308      	movs	r3, #8
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f002 fffd 	bl	800374c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	0018      	movs	r0, r3
 8000756:	231c      	movs	r3, #28
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f002 fff6 	bl	800374c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_TIM3_Init+0xe0>)
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <MX_TIM3_Init+0xe4>)
 8000764:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_TIM3_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_TIM3_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_TIM3_Init+0xe0>)
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <MX_TIM3_Init+0xe8>)
 8000776:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_TIM3_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_TIM3_Init+0xe0>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_TIM3_Init+0xe0>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fc1e 	bl	8002fc8 <HAL_TIM_PWM_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f8d0 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2120      	movs	r1, #32
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a2:	187a      	adds	r2, r7, r1
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_TIM3_Init+0xe0>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 ff59 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80007b2:	f000 f8bf 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2260      	movs	r2, #96	; 0x60
 80007ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ce:	1d39      	adds	r1, r7, #4
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_TIM3_Init+0xe0>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fc47 	bl	8003068 <HAL_TIM_PWM_ConfigChannel>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80007de:	f000 f8a9 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e2:	1d39      	adds	r1, r7, #4
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_TIM3_Init+0xe0>)
 80007e6:	2208      	movs	r2, #8
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fc3d 	bl	8003068 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80007f2:	f000 f89f 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f6:	1d39      	adds	r1, r7, #4
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_TIM3_Init+0xe0>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 fc33 	bl	8003068 <HAL_TIM_PWM_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000806:	f000 f895 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <MX_TIM3_Init+0xe0>)
 800080c:	0018      	movs	r0, r3
 800080e:	f000 f997 	bl	8000b40 <HAL_TIM_MspPostInit>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b00a      	add	sp, #40	; 0x28
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000074 	.word	0x20000074
 8000820:	40000400 	.word	0x40000400
 8000824:	0000ffff 	.word	0x0000ffff

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DMA_Init+0x38>)
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_DMA_Init+0x38>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DMA_Init+0x38>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2009      	movs	r0, #9
 800084c:	f000 ff10 	bl	8001670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000850:	2009      	movs	r0, #9
 8000852:	f000 ff22 	bl	800169a <HAL_NVIC_EnableIRQ>

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	240c      	movs	r4, #12
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f002 ff69 	bl	800374c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0xc8>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xc8>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	03c9      	lsls	r1, r1, #15
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xc8>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	03db      	lsls	r3, r3, #15
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_GPIO_Init+0xc8>)
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xc8>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0289      	lsls	r1, r1, #10
 80008a0:	430a      	orrs	r2, r1
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_GPIO_Init+0xc8>)
 80008a6:	695a      	ldr	r2, [r3, #20]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	029b      	lsls	r3, r3, #10
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_GPIO_Init+0xc8>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_GPIO_Init+0xc8>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	02c9      	lsls	r1, r1, #11
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_GPIO_Init+0xc8>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	02db      	lsls	r3, r3, #11
 80008c8:	4013      	ands	r3, r2
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80008ce:	2390      	movs	r3, #144	; 0x90
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fa04 	bl	8001ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2201      	movs	r2, #1
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80008f4:	193a      	adds	r2, r7, r4
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 f881 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin INT_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|INT_Pin|BTN_3_Pin|BTN_4_Pin;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	223c      	movs	r2, #60	; 0x3c
 8000906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	4a09      	ldr	r2, [pc, #36]	; (8000930 <MX_GPIO_Init+0xcc>)
 800090c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	193a      	adds	r2, r7, r4
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f001 f871 	bl	8001a04 <HAL_GPIO_Init>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b009      	add	sp, #36	; 0x24
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000
 8000930:	10110000 	.word	0x10110000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093a:	e7fe      	b.n	800093a <Error_Handler+0x6>

0800093c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	699a      	ldr	r2, [r3, #24]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	619a      	str	r2, [r3, #24]
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	2201      	movs	r2, #1
 8000954:	4013      	ands	r3, r2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0549      	lsls	r1, r1, #21
 8000964:	430a      	orrs	r2, r1
 8000966:	61da      	str	r2, [r3, #28]
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_MspInit+0x44>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	055b      	lsls	r3, r3, #21
 8000970:	4013      	ands	r3, r2
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	2314      	movs	r3, #20
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f002 fed8 	bl	800374c <memset>
  if(hadc->Instance==ADC1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <HAL_ADC_MspInit+0xd4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d154      	bne.n	8000a50 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <HAL_ADC_MspInit+0xd8>)
 80009a8:	699a      	ldr	r2, [r3, #24]
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <HAL_ADC_MspInit+0xd8>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0089      	lsls	r1, r1, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <HAL_ADC_MspInit+0xd8>)
 80009b6:	699a      	ldr	r2, [r3, #24]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <HAL_ADC_MspInit+0xd8>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <HAL_ADC_MspInit+0xd8>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <HAL_ADC_MspInit+0xd8>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BAT__Pin;
 80009de:	2114      	movs	r1, #20
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2202      	movs	r2, #2
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2203      	movs	r2, #3
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT__GPIO_Port, &GPIO_InitStruct);
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	2390      	movs	r3, #144	; 0x90
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 f802 	bl	8001a04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_ADC_MspInit+0xe0>)
 8000a04:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fe4c 	bl	80016d4 <HAL_DMA_Init>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000a40:	f7ff ff78 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_ADC_MspInit+0xdc>)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b00a      	add	sp, #40	; 0x28
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40012400 	.word	0x40012400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	200000c8 	.word	0x200000c8
 8000a64:	40020008 	.word	0x40020008

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	2314      	movs	r3, #20
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f002 fe66 	bl	800374c <memset>
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_I2C_MspInit+0x90>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d131      	bne.n	8000aee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_I2C_MspInit+0x94>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_I2C_MspInit+0x94>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	02c9      	lsls	r1, r1, #11
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_I2C_MspInit+0x94>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	02db      	lsls	r3, r3, #11
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000aa6:	2114      	movs	r1, #20
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	22c0      	movs	r2, #192	; 0xc0
 8000aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2212      	movs	r2, #18
 8000ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2203      	movs	r2, #3
 8000abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_I2C_MspInit+0x98>)
 8000aca:	0019      	movs	r1, r3
 8000acc:	0010      	movs	r0, r2
 8000ace:	f000 ff99 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_I2C_MspInit+0x94>)
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_I2C_MspInit+0x94>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0389      	lsls	r1, r1, #14
 8000adc:	430a      	orrs	r2, r1
 8000ade:	61da      	str	r2, [r3, #28]
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_I2C_MspInit+0x94>)
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	039b      	lsls	r3, r3, #14
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b00a      	add	sp, #40	; 0x28
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400

08000b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <HAL_TIM_PWM_MspInit+0x34>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10b      	bne.n	8000b2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_TIM_PWM_MspInit+0x38>)
 8000b18:	69da      	ldr	r2, [r3, #28]
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_TIM_PWM_MspInit+0x38>)
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	61da      	str	r2, [r3, #28]
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_TIM_PWM_MspInit+0x38>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	2202      	movs	r2, #2
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b004      	add	sp, #16
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2314      	movs	r3, #20
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fdfa 	bl	800374c <memset>
  if(htim->Instance==TIM3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <HAL_TIM_MspPostInit+0xbc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d148      	bne.n	8000bf4 <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_TIM_MspPostInit+0xc0>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <HAL_TIM_MspPostInit+0xc0>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0289      	lsls	r1, r1, #10
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <HAL_TIM_MspPostInit+0xc0>)
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	029b      	lsls	r3, r3, #10
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_TIM_MspPostInit+0xc0>)
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <HAL_TIM_MspPostInit+0xc0>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	02c9      	lsls	r1, r1, #11
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_TIM_MspPostInit+0xc0>)
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	02db      	lsls	r3, r3, #11
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWMR_Pin;
 8000b9a:	2414      	movs	r4, #20
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWMR_GPIO_Port, &GPIO_InitStruct);
 8000bba:	193a      	adds	r2, r7, r4
 8000bbc:	2390      	movs	r3, #144	; 0x90
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 ff1e 	bl	8001a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWMG_Pin|PWMB_Pin;
 8000bc8:	0021      	movs	r1, r4
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2201      	movs	r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_TIM_MspPostInit+0xc4>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f000 ff08 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b00b      	add	sp, #44	; 0x2c
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	40000400 	.word	0x40000400
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f888 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <DMA1_Channel1_IRQHandler+0x14>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fdf6 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	200000c8 	.word	0x200000c8

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c86:	f7ff ffe3 	bl	8000c50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f002 fd3b 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fc2b 	bl	80004e8 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca0:	080037ac 	.word	0x080037ac
  ldr r2, =_sbss
 8000ca4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca8:	20000150 	.word	0x20000150

08000cac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_Init+0x24>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_Init+0x24>)
 8000cba:	2110      	movs	r1, #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f809 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff fe39 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_InitTick+0x5c>)
 8000ce2:	681c      	ldr	r4, [r3, #0]
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x60>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0019      	movs	r1, r3
 8000cea:	23fa      	movs	r3, #250	; 0xfa
 8000cec:	0098      	lsls	r0, r3, #2
 8000cee:	f7ff fa0b 	bl	8000108 <__udivsi3>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	f7ff fa06 	bl	8000108 <__udivsi3>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fcdb 	bl	80016ba <HAL_SYSTICK_Config>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e00f      	b.n	8000d2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d80b      	bhi.n	8000d2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fca8 	bl	8001670 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_InitTick+0x64>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b003      	add	sp, #12
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000014c 	.word	0x2000014c

08000d64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	2000014c 	.word	0x2000014c

08000d78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e125      	b.n	8000fe2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10a      	bne.n	8000db4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2234      	movs	r2, #52	; 0x34
 8000da8:	2100      	movs	r1, #0
 8000daa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fde8 	bl	8000984 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db8:	2210      	movs	r2, #16
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d000      	beq.n	8000dc0 <HAL_ADC_Init+0x48>
 8000dbe:	e103      	b.n	8000fc8 <HAL_ADC_Init+0x250>
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d000      	beq.n	8000dcc <HAL_ADC_Init+0x54>
 8000dca:	e0fd      	b.n	8000fc8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000dd6:	d000      	beq.n	8000dda <HAL_ADC_Init+0x62>
 8000dd8:	e0f6      	b.n	8000fc8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	4a83      	ldr	r2, [pc, #524]	; (8000fec <HAL_ADC_Init+0x274>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	2202      	movs	r2, #2
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d112      	bne.n	8000e1e <HAL_ADC_Init+0xa6>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d009      	beq.n	8000e1a <HAL_ADC_Init+0xa2>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	401a      	ands	r2, r3
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Init+0xa6>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_ADC_Init+0xa8>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d116      	bne.n	8000e52 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	2218      	movs	r2, #24
 8000e2c:	4393      	bics	r3, r2
 8000e2e:	0019      	movs	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	0899      	lsrs	r1, r3, #2
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4964      	ldr	r1, [pc, #400]	; (8000ff0 <HAL_ADC_Init+0x278>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7e1b      	ldrb	r3, [r3, #24]
 8000e66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e5b      	ldrb	r3, [r3, #25]
 8000e6c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7e9b      	ldrb	r3, [r3, #26]
 8000e74:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e76:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d002      	beq.n	8000e86 <HAL_ADC_Init+0x10e>
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	e000      	b.n	8000e88 <HAL_ADC_Init+0x110>
 8000e86:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e8e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d101      	bne.n	8000e9c <HAL_ADC_Init+0x124>
 8000e98:	2304      	movs	r3, #4
 8000e9a:	e000      	b.n	8000e9e <HAL_ADC_Init+0x126>
 8000e9c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2124      	movs	r1, #36	; 0x24
 8000ea4:	5c5b      	ldrb	r3, [r3, r1]
 8000ea6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ea8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7edb      	ldrb	r3, [r3, #27]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d115      	bne.n	8000ee4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7e9b      	ldrb	r3, [r3, #26]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	0252      	lsls	r2, r2, #9
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	e00b      	b.n	8000ee4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000edc:	2201      	movs	r2, #1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69da      	ldr	r2, [r3, #28]
 8000ee8:	23c2      	movs	r3, #194	; 0xc2
 8000eea:	33ff      	adds	r3, #255	; 0xff
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d007      	beq.n	8000f00 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68d9      	ldr	r1, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	055b      	lsls	r3, r3, #21
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d01b      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d017      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d013      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d00f      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d00b      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d007      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d003      	beq.n	8000f54 <HAL_ADC_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d112      	bne.n	8000f7a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2107      	movs	r1, #7
 8000f60:	438a      	bics	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6959      	ldr	r1, [r3, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	2207      	movs	r2, #7
 8000f70:	401a      	ands	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <HAL_ADC_Init+0x27c>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d10b      	bne.n	8000fa2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f94:	2203      	movs	r2, #3
 8000f96:	4393      	bics	r3, r2
 8000f98:	2201      	movs	r2, #1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fa0:	e01c      	b.n	8000fdc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa6:	2212      	movs	r2, #18
 8000fa8:	4393      	bics	r3, r2
 8000faa:	2210      	movs	r2, #16
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fc6:	e009      	b.n	8000fdc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	2210      	movs	r2, #16
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	fffffefd 	.word	0xfffffefd
 8000ff0:	fffe0219 	.word	0xfffe0219
 8000ff4:	833fffe7 	.word	0x833fffe7

08000ff8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001004:	2317      	movs	r3, #23
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2204      	movs	r2, #4
 8001014:	4013      	ands	r3, r2
 8001016:	d15e      	bne.n	80010d6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2234      	movs	r2, #52	; 0x34
 800101c:	5c9b      	ldrb	r3, [r3, r2]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Start_DMA+0x2e>
 8001022:	2302      	movs	r3, #2
 8001024:	e05e      	b.n	80010e4 <HAL_ADC_Start_DMA+0xec>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2234      	movs	r2, #52	; 0x34
 800102a:	2101      	movs	r1, #1
 800102c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	7e5b      	ldrb	r3, [r3, #25]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d007      	beq.n	8001046 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001036:	2317      	movs	r3, #23
 8001038:	18fc      	adds	r4, r7, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	0018      	movs	r0, r3
 800103e:	f000 f96b 	bl	8001318 <ADC_Enable>
 8001042:	0003      	movs	r3, r0
 8001044:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001046:	2317      	movs	r3, #23
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d146      	bne.n	80010de <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_ADC_Start_DMA+0xf4>)
 8001056:	4013      	ands	r3, r2
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	0052      	lsls	r2, r2, #1
 800105c:	431a      	orrs	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2234      	movs	r2, #52	; 0x34
 800106c:	2100      	movs	r1, #0
 800106e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_ADC_Start_DMA+0xf8>)
 8001076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_ADC_Start_DMA+0xfc>)
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_ADC_Start_DMA+0x100>)
 8001086:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	221c      	movs	r2, #28
 800108e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2110      	movs	r1, #16
 800109c:	430a      	orrs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3340      	adds	r3, #64	; 0x40
 80010ba:	0019      	movs	r1, r3
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f000 fb50 	bl	8001764 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2104      	movs	r1, #4
 80010d0:	430a      	orrs	r2, r1
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	e003      	b.n	80010de <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010d6:	2317      	movs	r3, #23
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2202      	movs	r2, #2
 80010dc:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80010de:	2317      	movs	r3, #23
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b007      	add	sp, #28
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	fffff0fe 	.word	0xfffff0fe
 80010f0:	08001411 	.word	0x08001411
 80010f4:	080014c5 	.word	0x080014c5
 80010f8:	080014e3 	.word	0x080014e3

080010fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	055b      	lsls	r3, r3, #21
 800114a:	429a      	cmp	r2, r3
 800114c:	d011      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x46>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	2b01      	cmp	r3, #1
 8001154:	d00d      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x46>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	2b02      	cmp	r3, #2
 800115c:	d009      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x46>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	2b03      	cmp	r3, #3
 8001164:	d005      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x46>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	2b04      	cmp	r3, #4
 800116c:	d001      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x46>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2234      	movs	r2, #52	; 0x34
 8001176:	5c9b      	ldrb	r3, [r3, r2]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x54>
 800117c:	2302      	movs	r3, #2
 800117e:	e0bb      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1cc>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2234      	movs	r2, #52	; 0x34
 8001184:	2101      	movs	r1, #1
 8001186:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2204      	movs	r2, #4
 8001190:	4013      	ands	r3, r2
 8001192:	d000      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x6a>
 8001194:	e09f      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a59      	ldr	r2, [pc, #356]	; (8001300 <HAL_ADC_ConfigChannel+0x1d4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d100      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x76>
 80011a0:	e077      	b.n	8001292 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	409a      	lsls	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	055b      	lsls	r3, r3, #21
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d037      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d033      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d02f      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d02b      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d027      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d023      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d01f      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	d01b      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2107      	movs	r1, #7
 8001208:	400b      	ands	r3, r1
 800120a:	429a      	cmp	r2, r3
 800120c:	d012      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2107      	movs	r1, #7
 800121a:	438a      	bics	r2, r1
 800121c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6959      	ldr	r1, [r3, #20]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2207      	movs	r2, #7
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b10      	cmp	r3, #16
 800123a:	d003      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x118>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b11      	cmp	r3, #17
 8001242:	d152      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_ADC_ConfigChannel+0x1d8>)
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b10      	cmp	r3, #16
 800124e:	d102      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x12a>
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	e001      	b.n	800125a <HAL_ADC_ConfigChannel+0x12e>
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	03db      	lsls	r3, r3, #15
 800125a:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <HAL_ADC_ConfigChannel+0x1d8>)
 800125c:	430b      	orrs	r3, r1
 800125e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b10      	cmp	r3, #16
 8001266:	d140      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_ADC_ConfigChannel+0x1dc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4927      	ldr	r1, [pc, #156]	; (800130c <HAL_ADC_ConfigChannel+0x1e0>)
 800126e:	0018      	movs	r0, r3
 8001270:	f7fe ff4a 	bl	8000108 <__udivsi3>
 8001274:	0003      	movs	r3, r0
 8001276:	001a      	movs	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	189b      	adds	r3, r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001282:	e002      	b.n	800128a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	3b01      	subs	r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f9      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x158>
 8001290:	e02b      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	4099      	lsls	r1, r3
 80012a0:	000b      	movs	r3, r1
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b10      	cmp	r3, #16
 80012b2:	d003      	beq.n	80012bc <HAL_ADC_ConfigChannel+0x190>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b11      	cmp	r3, #17
 80012ba:	d116      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_ConfigChannel+0x1d8>)
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d101      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x1a0>
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_ADC_ConfigChannel+0x1e4>)
 80012ca:	e000      	b.n	80012ce <HAL_ADC_ConfigChannel+0x1a2>
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_ADC_ConfigChannel+0x1e8>)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_ADC_ConfigChannel+0x1d8>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e009      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	2220      	movs	r2, #32
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80012e2:	230f      	movs	r3, #15
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2234      	movs	r2, #52	; 0x34
 80012ee:	2100      	movs	r1, #0
 80012f0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80012f2:	230f      	movs	r3, #15
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	00001001 	.word	0x00001001
 8001304:	40012708 	.word	0x40012708
 8001308:	20000000 	.word	0x20000000
 800130c:	000f4240 	.word	0x000f4240
 8001310:	ff7fffff 	.word	0xff7fffff
 8001314:	ffbfffff 	.word	0xffbfffff

08001318 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2203      	movs	r2, #3
 8001330:	4013      	ands	r3, r2
 8001332:	2b01      	cmp	r3, #1
 8001334:	d112      	bne.n	800135c <ADC_Enable+0x44>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	2b01      	cmp	r3, #1
 8001342:	d009      	beq.n	8001358 <ADC_Enable+0x40>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	401a      	ands	r2, r3
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	429a      	cmp	r2, r3
 8001356:	d101      	bne.n	800135c <ADC_Enable+0x44>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <ADC_Enable+0x46>
 800135c:	2300      	movs	r3, #0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d14b      	bne.n	80013fa <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a26      	ldr	r2, [pc, #152]	; (8001404 <ADC_Enable+0xec>)
 800136a:	4013      	ands	r3, r2
 800136c:	d00d      	beq.n	800138a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	2210      	movs	r2, #16
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137e:	2201      	movs	r2, #1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e038      	b.n	80013fc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <ADC_Enable+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	491b      	ldr	r1, [pc, #108]	; (800140c <ADC_Enable+0xf4>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7fe feb1 	bl	8000108 <__udivsi3>
 80013a6:	0003      	movs	r3, r0
 80013a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013aa:	e002      	b.n	80013b2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f9      	bne.n	80013ac <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fcd4 	bl	8000d64 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013c0:	e014      	b.n	80013ec <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013c2:	f7ff fccf 	bl	8000d64 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d90d      	bls.n	80013ec <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	2210      	movs	r2, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	2201      	movs	r2, #1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e007      	b.n	80013fc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d1e3      	bne.n	80013c2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bd80      	pop	{r7, pc}
 8001404:	80000017 	.word	0x80000017
 8001408:	20000000 	.word	0x20000000
 800140c:	000f4240 	.word	0x000f4240

08001410 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	2250      	movs	r2, #80	; 0x50
 8001424:	4013      	ands	r3, r2
 8001426:	d140      	bne.n	80014aa <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	23c0      	movs	r3, #192	; 0xc0
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	4013      	ands	r3, r2
 8001442:	d12d      	bne.n	80014a0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001448:	2b00      	cmp	r3, #0
 800144a:	d129      	bne.n	80014a0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2208      	movs	r2, #8
 8001454:	4013      	ands	r3, r2
 8001456:	2b08      	cmp	r3, #8
 8001458:	d122      	bne.n	80014a0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2204      	movs	r2, #4
 8001462:	4013      	ands	r3, r2
 8001464:	d110      	bne.n	8001488 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	210c      	movs	r1, #12
 8001472:	438a      	bics	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <ADC_DMAConvCplt+0xb0>)
 800147c:	4013      	ands	r3, r2
 800147e:	2201      	movs	r2, #1
 8001480:	431a      	orrs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
 8001486:	e00b      	b.n	80014a0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	2220      	movs	r2, #32
 800148e:	431a      	orrs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001498:	2201      	movs	r2, #1
 800149a:	431a      	orrs	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff fe2a 	bl	80010fc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80014a8:	e005      	b.n	80014b6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	0010      	movs	r0, r2
 80014b4:	4798      	blx	r3
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	fffffefe 	.word	0xfffffefe

080014c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fe19 	bl	800110c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	2240      	movs	r2, #64	; 0x40
 80014f6:	431a      	orrs	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	2204      	movs	r2, #4
 8001502:	431a      	orrs	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fe06 	bl	800111c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b004      	add	sp, #16
 8001516:	bd80      	pop	{r7, pc}

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	0002      	movs	r2, r0
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	d809      	bhi.n	8001540 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	001a      	movs	r2, r3
 8001532:	231f      	movs	r3, #31
 8001534:	401a      	ands	r2, r3
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_EnableIRQ+0x30>)
 8001538:	2101      	movs	r1, #1
 800153a:	4091      	lsls	r1, r2
 800153c:	000a      	movs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
  }
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	0002      	movs	r2, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b7f      	cmp	r3, #127	; 0x7f
 8001560:	d828      	bhi.n	80015b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <__NVIC_SetPriority+0xd4>)
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	33c0      	adds	r3, #192	; 0xc0
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	589b      	ldr	r3, [r3, r2]
 8001572:	1dfa      	adds	r2, r7, #7
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	0011      	movs	r1, r2
 8001578:	2203      	movs	r2, #3
 800157a:	400a      	ands	r2, r1
 800157c:	00d2      	lsls	r2, r2, #3
 800157e:	21ff      	movs	r1, #255	; 0xff
 8001580:	4091      	lsls	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	43d2      	mvns	r2, r2
 8001586:	401a      	ands	r2, r3
 8001588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	22ff      	movs	r2, #255	; 0xff
 8001590:	401a      	ands	r2, r3
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	2303      	movs	r3, #3
 800159a:	4003      	ands	r3, r0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <__NVIC_SetPriority+0xd4>)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	430a      	orrs	r2, r1
 80015ac:	33c0      	adds	r3, #192	; 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015b2:	e031      	b.n	8001618 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <__NVIC_SetPriority+0xd8>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0019      	movs	r1, r3
 80015bc:	230f      	movs	r3, #15
 80015be:	400b      	ands	r3, r1
 80015c0:	3b08      	subs	r3, #8
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3306      	adds	r3, #6
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	3304      	adds	r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	0011      	movs	r1, r2
 80015d4:	2203      	movs	r2, #3
 80015d6:	400a      	ands	r2, r1
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	21ff      	movs	r1, #255	; 0xff
 80015dc:	4091      	lsls	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	43d2      	mvns	r2, r2
 80015e2:	401a      	ands	r2, r3
 80015e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	22ff      	movs	r2, #255	; 0xff
 80015ec:	401a      	ands	r2, r3
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0018      	movs	r0, r3
 80015f4:	2303      	movs	r3, #3
 80015f6:	4003      	ands	r3, r0
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <__NVIC_SetPriority+0xd8>)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	001c      	movs	r4, r3
 8001604:	230f      	movs	r3, #15
 8001606:	4023      	ands	r3, r4
 8001608:	3b08      	subs	r3, #8
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	430a      	orrs	r2, r1
 800160e:	3306      	adds	r3, #6
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	18c3      	adds	r3, r0, r3
 8001614:	3304      	adds	r3, #4
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b003      	add	sp, #12
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <SysTick_Config+0x40>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e010      	b.n	8001660 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <SysTick_Config+0x44>)
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	3a01      	subs	r2, #1
 8001644:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	2301      	movs	r3, #1
 8001648:	425b      	negs	r3, r3
 800164a:	2103      	movs	r1, #3
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff ff7d 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <SysTick_Config+0x44>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x44>)
 800165a:	2207      	movs	r2, #7
 800165c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}
 8001668:	00ffffff 	.word	0x00ffffff
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	210f      	movs	r1, #15
 800167c:	187b      	adds	r3, r7, r1
 800167e:	1c02      	adds	r2, r0, #0
 8001680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	187b      	adds	r3, r7, r1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b004      	add	sp, #16
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	0002      	movs	r2, r0
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff ff33 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ffaf 	bl	8001628 <SysTick_Config>
 80016ca:	0003      	movs	r3, r0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e036      	b.n	8001758 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2221      	movs	r2, #33	; 0x21
 80016ee:	2102      	movs	r1, #2
 80016f0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_DMA_Init+0x8c>)
 80016fe:	4013      	ands	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800170a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	0018      	movs	r0, r3
 800173c:	f000 f946 	bl	80019cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2221      	movs	r2, #33	; 0x21
 800174a:	2101      	movs	r1, #1
 800174c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2220      	movs	r2, #32
 8001752:	2100      	movs	r1, #0
 8001754:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}  
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}
 8001760:	ffffc00f 	.word	0xffffc00f

08001764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2220      	movs	r2, #32
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_DMA_Start_IT+0x24>
 8001784:	2302      	movs	r3, #2
 8001786:	e04f      	b.n	8001828 <HAL_DMA_Start_IT+0xc4>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2220      	movs	r2, #32
 800178c:	2101      	movs	r1, #1
 800178e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2221      	movs	r2, #33	; 0x21
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d13a      	bne.n	8001812 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2221      	movs	r2, #33	; 0x21
 80017a0:	2102      	movs	r1, #2
 80017a2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f8d7 	bl	8001974 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	210e      	movs	r1, #14
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e00f      	b.n	8001800 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	210a      	movs	r1, #10
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2104      	movs	r1, #4
 80017fc:	438a      	bics	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2101      	movs	r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e007      	b.n	8001822 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	2100      	movs	r1, #0
 8001818:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800181a:	2317      	movs	r3, #23
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2202      	movs	r2, #2
 8001820:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001822:	2317      	movs	r3, #23
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
} 
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b006      	add	sp, #24
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2204      	movs	r2, #4
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	d024      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x72>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d020      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2220      	movs	r2, #32
 8001868:	4013      	ands	r3, r2
 800186a:	d107      	bne.n	800187c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2104      	movs	r1, #4
 8001878:	438a      	bics	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	2104      	movs	r1, #4
 8001886:	4091      	lsls	r1, r2
 8001888:	000a      	movs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d100      	bne.n	8001896 <HAL_DMA_IRQHandler+0x66>
 8001894:	e06a      	b.n	800196c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	0010      	movs	r0, r2
 800189e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018a0:	e064      	b.n	800196c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2202      	movs	r2, #2
 80018a8:	409a      	lsls	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_DMA_IRQHandler+0xda>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d027      	beq.n	800190a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2220      	movs	r2, #32
 80018c2:	4013      	ands	r3, r2
 80018c4:	d10b      	bne.n	80018de <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	210a      	movs	r1, #10
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2221      	movs	r2, #33	; 0x21
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	2102      	movs	r1, #2
 80018e8:	4091      	lsls	r1, r2
 80018ea:	000a      	movs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d036      	beq.n	800196c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	0010      	movs	r0, r2
 8001906:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001908:	e030      	b.n	800196c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	2208      	movs	r2, #8
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	d028      	beq.n	800196c <HAL_DMA_IRQHandler+0x13c>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2208      	movs	r2, #8
 800191e:	4013      	ands	r3, r2
 8001920:	d024      	beq.n	800196c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	210e      	movs	r1, #14
 800192e:	438a      	bics	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193a:	2101      	movs	r1, #1
 800193c:	4091      	lsls	r1, r2
 800193e:	000a      	movs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2221      	movs	r2, #33	; 0x21
 800194c:	2101      	movs	r1, #1
 800194e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	2100      	movs	r1, #0
 8001956:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	0010      	movs	r0, r2
 8001968:	4798      	blx	r3
    }
   }
}  
 800196a:	e7ff      	b.n	800196c <HAL_DMA_IRQHandler+0x13c>
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	2101      	movs	r1, #1
 800198c:	4091      	lsls	r1, r2
 800198e:	000a      	movs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d108      	bne.n	80019b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019b2:	e007      	b.n	80019c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	60da      	str	r2, [r3, #12]
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bd80      	pop	{r7, pc}

080019cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a08      	ldr	r2, [pc, #32]	; (80019fc <DMA_CalcBaseAndBitshift+0x30>)
 80019da:	4694      	mov	ip, r2
 80019dc:	4463      	add	r3, ip
 80019de:	2114      	movs	r1, #20
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7fe fb91 	bl	8000108 <__udivsi3>
 80019e6:	0003      	movs	r3, r0
 80019e8:	009a      	lsls	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <DMA_CalcBaseAndBitshift+0x34>)
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	bffdfff8 	.word	0xbffdfff8
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e14f      	b.n	8001cb4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4091      	lsls	r1, r2
 8001a1e:	000a      	movs	r2, r1
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <HAL_GPIO_Init+0x28>
 8001a2a:	e140      	b.n	8001cae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d00b      	beq.n	8001a4c <HAL_GPIO_Init+0x48>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d007      	beq.n	8001a4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	0013      	movs	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a82:	2201      	movs	r2, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	2201      	movs	r2, #1
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0xea>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	58d3      	ldr	r3, [r2, r3]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2207      	movs	r2, #7
 8001b00:	4013      	ands	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2107      	movs	r1, #7
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	055b      	lsls	r3, r3, #21
 8001b72:	4013      	ands	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_Init+0x174>
 8001b76:	e09a      	b.n	8001cae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b78:	4b54      	ldr	r3, [pc, #336]	; (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x2cc>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	589b      	ldr	r3, [r3, r2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	2390      	movs	r3, #144	; 0x90
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a44      	ldr	r2, [pc, #272]	; (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x1de>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_GPIO_Init+0x2d4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x1da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <HAL_GPIO_Init+0x2d8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001be6:	2300      	movs	r3, #0
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	2103      	movs	r1, #3
 8001bec:	400a      	ands	r2, r1
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bf8:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <HAL_GPIO_Init+0x2cc>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	035b      	lsls	r3, r3, #13
 8001c72:	4013      	ands	r3, r2
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	039b      	lsls	r3, r3, #14
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	1e13      	subs	r3, r2, #0
 8001cbe:	d000      	beq.n	8001cc2 <HAL_GPIO_Init+0x2be>
 8001cc0:	e6a8      	b.n	8001a14 <HAL_GPIO_Init+0x10>
  } 
}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b006      	add	sp, #24
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	0008      	movs	r0, r1
 8001cee:	0011      	movs	r1, r2
 8001cf0:	1cbb      	adds	r3, r7, #2
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	1c7b      	adds	r3, r7, #1
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cfc:	1c7b      	adds	r3, r7, #1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0e:	1cbb      	adds	r3, r7, #2
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e082      	b.n	8001e38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2241      	movs	r2, #65	; 0x41
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe fe8d 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2241      	movs	r2, #65	; 0x41
 8001d52:	2124      	movs	r1, #36	; 0x24
 8001d54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	438a      	bics	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4934      	ldr	r1, [pc, #208]	; (8001e40 <HAL_I2C_Init+0x120>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4931      	ldr	r1, [pc, #196]	; (8001e44 <HAL_I2C_Init+0x124>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d108      	bne.n	8001d9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0209      	lsls	r1, r1, #8
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	e007      	b.n	8001dae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2184      	movs	r1, #132	; 0x84
 8001da8:	0209      	lsls	r1, r1, #8
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d104      	bne.n	8001dc0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	491f      	ldr	r1, [pc, #124]	; (8001e48 <HAL_I2C_Init+0x128>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	491a      	ldr	r1, [pc, #104]	; (8001e44 <HAL_I2C_Init+0x124>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	0011      	movs	r1, r2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	021a      	lsls	r2, r3, #8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69d9      	ldr	r1, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2241      	movs	r2, #65	; 0x41
 8001e24:	2120      	movs	r1, #32
 8001e26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2242      	movs	r2, #66	; 0x42
 8001e32:	2100      	movs	r1, #0
 8001e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	f0ffffff 	.word	0xf0ffffff
 8001e44:	ffff7fff 	.word	0xffff7fff
 8001e48:	02008000 	.word	0x02008000

08001e4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	000c      	movs	r4, r1
 8001e56:	0010      	movs	r0, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	1c22      	adds	r2, r4, #0
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	2308      	movs	r3, #8
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	1c0a      	adds	r2, r1, #0
 8001e6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2241      	movs	r2, #65	; 0x41
 8001e74:	5c9b      	ldrb	r3, [r3, r2]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d000      	beq.n	8001e7e <HAL_I2C_Mem_Write+0x32>
 8001e7c:	e10c      	b.n	8002098 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_I2C_Mem_Write+0x42>
 8001e84:	232c      	movs	r3, #44	; 0x2c
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0ff      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Mem_Write+0x5c>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0f8      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	2101      	movs	r1, #1
 8001eae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb0:	f7fe ff58 	bl	8000d64 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	0219      	lsls	r1, r3, #8
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2319      	movs	r3, #25
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f000 f975 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0e3      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2241      	movs	r2, #65	; 0x41
 8001ed6:	2121      	movs	r1, #33	; 0x21
 8001ed8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2242      	movs	r2, #66	; 0x42
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	222c      	movs	r2, #44	; 0x2c
 8001ef2:	18ba      	adds	r2, r7, r2
 8001ef4:	8812      	ldrh	r2, [r2, #0]
 8001ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001efe:	1dbb      	adds	r3, r7, #6
 8001f00:	881c      	ldrh	r4, [r3, #0]
 8001f02:	2308      	movs	r3, #8
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	230a      	movs	r3, #10
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	8819      	ldrh	r1, [r3, #0]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	0023      	movs	r3, r4
 8001f1a:	f000 f8c5 	bl	80020a8 <I2C_RequestMemoryWrite>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0b5      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d911      	bls.n	8001f5c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	045c      	lsls	r4, r3, #17
 8001f48:	230a      	movs	r3, #10
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	8819      	ldrh	r1, [r3, #0]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	0023      	movs	r3, r4
 8001f56:	f000 fa4d 	bl	80023f4 <I2C_TransferConfig>
 8001f5a:	e012      	b.n	8001f82 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	049c      	lsls	r4, r3, #18
 8001f70:	230a      	movs	r3, #10
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	8819      	ldrh	r1, [r3, #0]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	0023      	movs	r3, r4
 8001f7e:	f000 fa39 	bl	80023f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 f952 	bl	8002232 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e081      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d03a      	beq.n	8002046 <HAL_I2C_Mem_Write+0x1fa>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d136      	bne.n	8002046 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	f000 f8e5 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e053      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2bff      	cmp	r3, #255	; 0xff
 8001ffa:	d911      	bls.n	8002020 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	22ff      	movs	r2, #255	; 0xff
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	b2da      	uxtb	r2, r3
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	045c      	lsls	r4, r3, #17
 800200c:	230a      	movs	r3, #10
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	8819      	ldrh	r1, [r3, #0]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	0023      	movs	r3, r4
 800201a:	f000 f9eb 	bl	80023f4 <I2C_TransferConfig>
 800201e:	e012      	b.n	8002046 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	b2da      	uxtb	r2, r3
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	049c      	lsls	r4, r3, #18
 8002034:	230a      	movs	r3, #10
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	8819      	ldrh	r1, [r3, #0]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	2300      	movs	r3, #0
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	0023      	movs	r3, r4
 8002042:	f000 f9d7 	bl	80023f4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d198      	bne.n	8001f82 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f92a 	bl	80022b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800205c:	1e03      	subs	r3, r0, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e01a      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	490b      	ldr	r1, [pc, #44]	; (80020a4 <HAL_I2C_Mem_Write+0x258>)
 8002078:	400a      	ands	r2, r1
 800207a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2241      	movs	r2, #65	; 0x41
 8002080:	2120      	movs	r1, #32
 8002082:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2242      	movs	r2, #66	; 0x42
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2240      	movs	r2, #64	; 0x40
 8002090:	2100      	movs	r1, #0
 8002092:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
  }
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b007      	add	sp, #28
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	fe00e800 	.word	0xfe00e800

080020a8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	000c      	movs	r4, r1
 80020b2:	0010      	movs	r0, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	250a      	movs	r5, #10
 80020b8:	197b      	adds	r3, r7, r5
 80020ba:	1c22      	adds	r2, r4, #0
 80020bc:	801a      	strh	r2, [r3, #0]
 80020be:	2308      	movs	r3, #8
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	1c02      	adds	r2, r0, #0
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	1dbb      	adds	r3, r7, #6
 80020c8:	1c0a      	adds	r2, r1, #0
 80020ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020cc:	1dbb      	adds	r3, r7, #6
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	045c      	lsls	r4, r3, #17
 80020d6:	197b      	adds	r3, r7, r5
 80020d8:	8819      	ldrh	r1, [r3, #0]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <I2C_RequestMemoryWrite+0xc4>)
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	0023      	movs	r3, r4
 80020e2:	f000 f987 	bl	80023f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	6a39      	ldr	r1, [r7, #32]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f8a0 	bl	8002232 <I2C_WaitOnTXISFlagUntilTimeout>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e033      	b.n	8002162 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020fa:	1dbb      	adds	r3, r7, #6
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002102:	2308      	movs	r3, #8
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
 8002110:	e019      	b.n	8002146 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002112:	2308      	movs	r3, #8
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	b29b      	uxth	r3, r3
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	6a39      	ldr	r1, [r7, #32]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f881 	bl	8002232 <I2C_WaitOnTXISFlagUntilTimeout>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d001      	beq.n	8002138 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e014      	b.n	8002162 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002138:	2308      	movs	r3, #8
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002146:	6a3a      	ldr	r2, [r7, #32]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	0013      	movs	r3, r2
 8002150:	2200      	movs	r2, #0
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	f000 f82e 	bl	80021b4 <I2C_WaitOnFlagUntilTimeout>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d001      	beq.n	8002160 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b004      	add	sp, #16
 8002168:	bdb0      	pop	{r4, r5, r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	80002000 	.word	0x80002000

08002170 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d103      	bne.n	800218e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	2b01      	cmp	r3, #1
 800219a:	d007      	beq.n	80021ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	619a      	str	r2, [r3, #24]
  }
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c4:	e021      	b.n	800220a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	d01e      	beq.n	800220a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7fe fdca 	bl	8000d64 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d113      	bne.n	800220a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	2220      	movs	r2, #32
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2241      	movs	r2, #65	; 0x41
 80021f2:	2120      	movs	r1, #32
 80021f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2242      	movs	r2, #66	; 0x42
 80021fa:	2100      	movs	r1, #0
 80021fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2240      	movs	r2, #64	; 0x40
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	4013      	ands	r3, r2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	425a      	negs	r2, r3
 800221a:	4153      	adcs	r3, r2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	001a      	movs	r2, r3
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d0ce      	beq.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}

08002232 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800223e:	e02b      	b.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 f86e 	bl	8002328 <I2C_IsAcknowledgeFailed>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d001      	beq.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e029      	b.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3301      	adds	r3, #1
 8002258:	d01e      	beq.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	f7fe fd83 	bl	8000d64 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	429a      	cmp	r2, r3
 8002268:	d302      	bcc.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d113      	bne.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	2220      	movs	r2, #32
 8002276:	431a      	orrs	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2241      	movs	r2, #65	; 0x41
 8002280:	2120      	movs	r1, #32
 8002282:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2242      	movs	r2, #66	; 0x42
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	2100      	movs	r1, #0
 8002292:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e007      	b.n	80022a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d1cc      	bne.n	8002240 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b004      	add	sp, #16
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022bc:	e028      	b.n	8002310 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 f82f 	bl	8002328 <I2C_IsAcknowledgeFailed>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e026      	b.n	8002320 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7fe fd47 	bl	8000d64 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d113      	bne.n	8002310 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2220      	movs	r2, #32
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2241      	movs	r2, #65	; 0x41
 80022f8:	2120      	movs	r1, #32
 80022fa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2242      	movs	r2, #66	; 0x42
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e007      	b.n	8002320 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	2b20      	cmp	r3, #32
 800231c:	d1cf      	bne.n	80022be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2210      	movs	r2, #16
 800233c:	4013      	ands	r3, r2
 800233e:	2b10      	cmp	r3, #16
 8002340:	d151      	bne.n	80023e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002342:	e021      	b.n	8002388 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3301      	adds	r3, #1
 8002348:	d01e      	beq.n	8002388 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7fe fd0b 	bl	8000d64 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_IsAcknowledgeFailed+0x38>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d113      	bne.n	8002388 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	2220      	movs	r2, #32
 8002366:	431a      	orrs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2241      	movs	r2, #65	; 0x41
 8002370:	2120      	movs	r1, #32
 8002372:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2242      	movs	r2, #66	; 0x42
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e02f      	b.n	80023e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2220      	movs	r2, #32
 8002390:	4013      	ands	r3, r2
 8002392:	2b20      	cmp	r3, #32
 8002394:	d1d6      	bne.n	8002344 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2210      	movs	r2, #16
 800239c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2220      	movs	r2, #32
 80023a4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff fee1 	bl	8002170 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	490d      	ldr	r1, [pc, #52]	; (80023f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	2204      	movs	r2, #4
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2241      	movs	r2, #65	; 0x41
 80023ce:	2120      	movs	r1, #32
 80023d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2242      	movs	r2, #66	; 0x42
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	fe00e800 	.word	0xfe00e800

080023f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	0008      	movs	r0, r1
 80023fe:	0011      	movs	r1, r2
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	240a      	movs	r4, #10
 8002404:	193b      	adds	r3, r7, r4
 8002406:	1c02      	adds	r2, r0, #0
 8002408:	801a      	strh	r2, [r3, #0]
 800240a:	2009      	movs	r0, #9
 800240c:	183b      	adds	r3, r7, r0
 800240e:	1c0a      	adds	r2, r1, #0
 8002410:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	0d51      	lsrs	r1, r2, #21
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	00d2      	lsls	r2, r2, #3
 8002420:	400a      	ands	r2, r1
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <I2C_TransferConfig+0x68>)
 8002424:	430a      	orrs	r2, r1
 8002426:	43d2      	mvns	r2, r2
 8002428:	401a      	ands	r2, r3
 800242a:	0011      	movs	r1, r2
 800242c:	193b      	adds	r3, r7, r4
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	059b      	lsls	r3, r3, #22
 8002432:	0d9a      	lsrs	r2, r3, #22
 8002434:	183b      	adds	r3, r7, r0
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	0418      	lsls	r0, r3, #16
 800243a:	23ff      	movs	r3, #255	; 0xff
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	4003      	ands	r3, r0
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	431a      	orrs	r2, r3
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b005      	add	sp, #20
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	03ff63ff 	.word	0x03ff63ff

08002460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	; 0x41
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	d138      	bne.n	80024e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2240      	movs	r2, #64	; 0x40
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e032      	b.n	80024ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2241      	movs	r2, #65	; 0x41
 8002490:	2124      	movs	r1, #36	; 0x24
 8002492:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4911      	ldr	r1, [pc, #68]	; (80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2241      	movs	r2, #65	; 0x41
 80024d8:	2120      	movs	r1, #32
 80024da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b002      	add	sp, #8
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	ffffefff 	.word	0xffffefff

080024f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2241      	movs	r2, #65	; 0x41
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	d139      	bne.n	8002582 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	5c9b      	ldrb	r3, [r3, r2]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002518:	2302      	movs	r3, #2
 800251a:	e033      	b.n	8002584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2241      	movs	r2, #65	; 0x41
 8002528:	2124      	movs	r1, #36	; 0x24
 800252a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2241      	movs	r2, #65	; 0x41
 8002572:	2120      	movs	r1, #32
 8002574:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	fffff0ff 	.word	0xfffff0ff

08002590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e303      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d100      	bne.n	80025ae <HAL_RCC_OscConfig+0x1e>
 80025ac:	e08d      	b.n	80026ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025ae:	4bc4      	ldr	r3, [pc, #784]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	220c      	movs	r2, #12
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00e      	beq.n	80025d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ba:	4bc1      	ldr	r3, [pc, #772]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	220c      	movs	r2, #12
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x64>
 80025c6:	4bbe      	ldr	r3, [pc, #760]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	401a      	ands	r2, r3
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	025b      	lsls	r3, r3, #9
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	4bb9      	ldr	r3, [pc, #740]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	4013      	ands	r3, r2
 80025e2:	d100      	bne.n	80025e6 <HAL_RCC_OscConfig+0x56>
 80025e4:	e070      	b.n	80026c8 <HAL_RCC_OscConfig+0x138>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d000      	beq.n	80025f0 <HAL_RCC_OscConfig+0x60>
 80025ee:	e06b      	b.n	80026c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e2da      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x7c>
 80025fc:	4bb0      	ldr	r3, [pc, #704]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4baf      	ldr	r3, [pc, #700]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	0249      	lsls	r1, r1, #9
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e02f      	b.n	800266c <HAL_RCC_OscConfig+0xdc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x9e>
 8002614:	4baa      	ldr	r3, [pc, #680]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4ba9      	ldr	r3, [pc, #676]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800261a:	49aa      	ldr	r1, [pc, #680]	; (80028c4 <HAL_RCC_OscConfig+0x334>)
 800261c:	400a      	ands	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	4ba7      	ldr	r3, [pc, #668]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002626:	49a8      	ldr	r1, [pc, #672]	; (80028c8 <HAL_RCC_OscConfig+0x338>)
 8002628:	400a      	ands	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e01e      	b.n	800266c <HAL_RCC_OscConfig+0xdc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b05      	cmp	r3, #5
 8002634:	d10e      	bne.n	8002654 <HAL_RCC_OscConfig+0xc4>
 8002636:	4ba2      	ldr	r3, [pc, #648]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4ba1      	ldr	r3, [pc, #644]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	02c9      	lsls	r1, r1, #11
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	4b9e      	ldr	r3, [pc, #632]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b9d      	ldr	r3, [pc, #628]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0249      	lsls	r1, r1, #9
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0xdc>
 8002654:	4b9a      	ldr	r3, [pc, #616]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800265a:	499a      	ldr	r1, [pc, #616]	; (80028c4 <HAL_RCC_OscConfig+0x334>)
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b96      	ldr	r3, [pc, #600]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002666:	4998      	ldr	r1, [pc, #608]	; (80028c8 <HAL_RCC_OscConfig+0x338>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d014      	beq.n	800269e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fe fb76 	bl	8000d64 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267e:	f7fe fb71 	bl	8000d64 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e28c      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002690:	4b8b      	ldr	r3, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0xee>
 800269c:	e015      	b.n	80026ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fb61 	bl	8000d64 <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe fb5c 	bl	8000d64 <HAL_GetTick>
 80026ac:	0002      	movs	r2, r0
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e277      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	4013      	ands	r3, r2
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x118>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d100      	bne.n	80026d6 <HAL_RCC_OscConfig+0x146>
 80026d4:	e069      	b.n	80027aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d6:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	220c      	movs	r2, #12
 80026dc:	4013      	ands	r3, r2
 80026de:	d00b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026e0:	4b77      	ldr	r3, [pc, #476]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	220c      	movs	r2, #12
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d11c      	bne.n	8002726 <HAL_RCC_OscConfig+0x196>
 80026ec:	4b74      	ldr	r3, [pc, #464]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	025b      	lsls	r3, r3, #9
 80026f4:	4013      	ands	r3, r2
 80026f6:	d116      	bne.n	8002726 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f8:	4b71      	ldr	r3, [pc, #452]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2202      	movs	r2, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e24d      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270e:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	22f8      	movs	r2, #248	; 0xf8
 8002714:	4393      	bics	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	00da      	lsls	r2, r3, #3
 800271e:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002724:	e041      	b.n	80027aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d024      	beq.n	8002778 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272e:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fb13 	bl	8000d64 <HAL_GetTick>
 800273e:	0003      	movs	r3, r0
 8002740:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002744:	f7fe fb0e 	bl	8000d64 <HAL_GetTick>
 8002748:	0002      	movs	r2, r0
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e229      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d0f1      	beq.n	8002744 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	22f8      	movs	r2, #248	; 0xf8
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00da      	lsls	r2, r3, #3
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800277e:	2101      	movs	r1, #1
 8002780:	438a      	bics	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe faee 	bl	8000d64 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe fae9 	bl	8000d64 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e204      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	d1f1      	bne.n	800278e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2208      	movs	r2, #8
 80027b0:	4013      	ands	r3, r2
 80027b2:	d036      	beq.n	8002822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d019      	beq.n	80027f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80027be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c0:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80027c2:	2101      	movs	r1, #1
 80027c4:	430a      	orrs	r2, r1
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe facc 	bl	8000d64 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe fac7 	bl	8000d64 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1e2      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e4:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2202      	movs	r2, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	d0f1      	beq.n	80027d2 <HAL_RCC_OscConfig+0x242>
 80027ee:	e018      	b.n	8002822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f0:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80027f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	438a      	bics	r2, r1
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fab2 	bl	8000d64 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe faad 	bl	8000d64 <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1c8      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d1f1      	bne.n	8002806 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2204      	movs	r2, #4
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_RCC_OscConfig+0x29e>
 800282c:	e0b6      	b.n	800299c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	231f      	movs	r3, #31
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	055b      	lsls	r3, r3, #21
 800283e:	4013      	ands	r3, r2
 8002840:	d111      	bne.n	8002866 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0549      	lsls	r1, r1, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	055b      	lsls	r3, r3, #21
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800285e:	231f      	movs	r3, #31
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_OscConfig+0x33c>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d11a      	bne.n	80028a8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCC_OscConfig+0x33c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x33c>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0049      	lsls	r1, r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002880:	f7fe fa70 	bl	8000d64 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe fa6b 	bl	8000d64 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e186      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x33c>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10f      	bne.n	80028d0 <HAL_RCC_OscConfig+0x340>
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <HAL_RCC_OscConfig+0x330>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e036      	b.n	800292c <HAL_RCC_OscConfig+0x39c>
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40021000 	.word	0x40021000
 80028c4:	fffeffff 	.word	0xfffeffff
 80028c8:	fffbffff 	.word	0xfffbffff
 80028cc:	40007000 	.word	0x40007000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x362>
 80028d8:	4bb6      	ldr	r3, [pc, #728]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	4bb5      	ldr	r3, [pc, #724]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]
 80028e4:	4bb3      	ldr	r3, [pc, #716]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	4bb2      	ldr	r3, [pc, #712]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80028ea:	2104      	movs	r1, #4
 80028ec:	438a      	bics	r2, r1
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x39c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x384>
 80028fa:	4bae      	ldr	r3, [pc, #696]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	4bad      	ldr	r3, [pc, #692]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002900:	2104      	movs	r1, #4
 8002902:	430a      	orrs	r2, r1
 8002904:	621a      	str	r2, [r3, #32]
 8002906:	4bab      	ldr	r3, [pc, #684]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	4baa      	ldr	r3, [pc, #680]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	621a      	str	r2, [r3, #32]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x39c>
 8002914:	4ba7      	ldr	r3, [pc, #668]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4ba6      	ldr	r3, [pc, #664]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	621a      	str	r2, [r3, #32]
 8002920:	4ba4      	ldr	r3, [pc, #656]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002926:	2104      	movs	r1, #4
 8002928:	438a      	bics	r2, r1
 800292a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d014      	beq.n	800295e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe fa16 	bl	8000d64 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e009      	b.n	8002952 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fa11 	bl	8000d64 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	4a9b      	ldr	r2, [pc, #620]	; (8002bb8 <HAL_RCC_OscConfig+0x628>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e12b      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4b98      	ldr	r3, [pc, #608]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x3ae>
 800295c:	e013      	b.n	8002986 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe fa01 	bl	8000d64 <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e009      	b.n	800297c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe f9fc 	bl	8000d64 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	4a91      	ldr	r2, [pc, #580]	; (8002bb8 <HAL_RCC_OscConfig+0x628>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e116      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	4b8d      	ldr	r3, [pc, #564]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002986:	231f      	movs	r3, #31
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	4b87      	ldr	r3, [pc, #540]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002996:	4989      	ldr	r1, [pc, #548]	; (8002bbc <HAL_RCC_OscConfig+0x62c>)
 8002998:	400a      	ands	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029ae:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029b4:	2104      	movs	r1, #4
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029ba:	4b7e      	ldr	r3, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	430a      	orrs	r2, r1
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fe f9cd 	bl	8000d64 <HAL_GetTick>
 80029ca:	0003      	movs	r3, r0
 80029cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029d0:	f7fe f9c8 	bl	8000d64 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0e3      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029e2:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d0f1      	beq.n	80029d0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029ec:	4b71      	ldr	r3, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	22f8      	movs	r2, #248	; 0xf8
 80029f2:	4393      	bics	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	00da      	lsls	r2, r3, #3
 80029fc:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	635a      	str	r2, [r3, #52]	; 0x34
 8002a02:	e034      	b.n	8002a6e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	3305      	adds	r3, #5
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a0c:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a12:	2104      	movs	r1, #4
 8002a14:	438a      	bics	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	22f8      	movs	r2, #248	; 0xf8
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	00da      	lsls	r2, r3, #3
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2e:	e01e      	b.n	8002a6e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a34:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a36:	2104      	movs	r1, #4
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a3c:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	438a      	bics	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe f98c 	bl	8000d64 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a52:	f7fe f987 	bl	8000d64 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0a2      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d1f1      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d100      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4e8>
 8002a76:	e097      	b.n	8002ba8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a78:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d100      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4f6>
 8002a84:	e06b      	b.n	8002b5e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d14c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <HAL_RCC_OscConfig+0x630>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe f963 	bl	8000d64 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe f95e 	bl	8000d64 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e079      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	049b      	lsls	r3, r3, #18
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac2:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	4393      	bics	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x634>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af0:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0449      	lsls	r1, r1, #17
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe f931 	bl	8000d64 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe f92c 	bl	8000d64 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e047      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	049b      	lsls	r3, r3, #18
 8002b22:	4013      	ands	r3, r2
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x578>
 8002b26:	e03f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002b2e:	4924      	ldr	r1, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x630>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe f916 	bl	8000d64 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe f911 	bl	8000d64 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e02c      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	049b      	lsls	r3, r3, #18
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x5ae>
 8002b5c:	e024      	b.n	8002ba8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e01f      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x624>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	025b      	lsls	r3, r3, #9
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d10e      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	220f      	movs	r2, #15
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	23f0      	movs	r3, #240	; 0xf0
 8002b98:	039b      	lsls	r3, r3, #14
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b008      	add	sp, #32
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	efffffff 	.word	0xefffffff
 8002bc0:	feffffff 	.word	0xfeffffff
 8002bc4:	ffc2ffff 	.word	0xffc2ffff

08002bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0b3      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b5b      	ldr	r3, [pc, #364]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d911      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09a      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d015      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d006      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c28:	21e0      	movs	r1, #224	; 0xe0
 8002c2a:	00c9      	lsls	r1, r1, #3
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	22f0      	movs	r2, #240	; 0xf0
 8002c36:	4393      	bics	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d114      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06e      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	049b      	lsls	r3, r3, #18
 8002c76:	4013      	ands	r3, r2
 8002c78:	d108      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e062      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2202      	movs	r2, #2
 8002c84:	4013      	ands	r3, r2
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e05b      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2203      	movs	r2, #3
 8002c92:	4393      	bics	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f860 	bl	8000d64 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca8:	e009      	b.n	8002cbe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7fe f85b 	bl	8000d64 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_RCC_ClockConfig+0x18c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e042      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1ec      	bne.n	8002caa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d211      	bcs.n	8002d02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_RCC_ClockConfig+0x184>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e020      	b.n	8002d44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d009      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_RCC_ClockConfig+0x190>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d20:	f000 f820 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d24:	0001      	movs	r1, r0
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x188>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	4013      	ands	r3, r2
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x194>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	000a      	movs	r2, r1
 8002d36:	40da      	lsrs	r2, r3
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x198>)
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fd ffcb 	bl	8000cd8 <HAL_InitTick>
  
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	00001388 	.word	0x00001388
 8002d58:	fffff8ff 	.word	0xfffff8ff
 8002d5c:	08003794 	.word	0x08003794
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b08f      	sub	sp, #60	; 0x3c
 8002d68:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d72:	c313      	stmia	r3!, {r0, r1, r4}
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d7e:	c313      	stmia	r3!, {r0, r1, r4}
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002d98:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	220c      	movs	r2, #12
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d002      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x4a>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d003      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x50>
 8002dac:	e02d      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002db2:	e02d      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	0c9b      	lsrs	r3, r3, #18
 8002db8:	220f      	movs	r2, #15
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2214      	movs	r2, #20
 8002dbe:	18ba      	adds	r2, r7, r2
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	220f      	movs	r2, #15
 8002dca:	4013      	ands	r3, r2
 8002dcc:	1d3a      	adds	r2, r7, #4
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002de0:	f7fd f992 	bl	8000108 <__udivsi3>
 8002de4:	0003      	movs	r3, r0
 8002de6:	001a      	movs	r2, r3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	4353      	muls	r3, r2
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
 8002dee:	e009      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	000a      	movs	r2, r1
 8002df4:	0152      	lsls	r2, r2, #5
 8002df6:	1a52      	subs	r2, r2, r1
 8002df8:	0193      	lsls	r3, r2, #6
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	185b      	adds	r3, r3, r1
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b00f      	add	sp, #60	; 0x3c
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	08003774 	.word	0x08003774
 8002e20:	08003784 	.word	0x08003784
 8002e24:	40021000 	.word	0x40021000
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	025b      	lsls	r3, r3, #9
 8002e44:	4013      	ands	r3, r2
 8002e46:	d100      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e48:	e08f      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2317      	movs	r3, #23
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	055b      	lsls	r3, r3, #21
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0549      	lsls	r1, r1, #21
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]
 8002e6c:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	055b      	lsls	r3, r3, #21
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2317      	movs	r3, #23
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	0049      	lsls	r1, r1, #1
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9c:	f7fd ff62 	bl	8000d64 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fd ff5d 	bl	8000d64 <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	; 0x64
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e077      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	23c0      	movs	r3, #192	; 0xc0
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d034      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d02c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ef0:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0249      	lsls	r1, r1, #9
 8002efa:	430a      	orrs	r2, r1
 8002efc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f04:	492d      	ldr	r1, [pc, #180]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	d013      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd ff24 	bl	8000d64 <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e009      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd ff1f 	bl	8000d64 <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e038      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f54:	2317      	movs	r3, #23
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f64:	4917      	ldr	r1, [pc, #92]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002f66:	400a      	ands	r2, r1
 8002f68:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4013      	ands	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	2203      	movs	r2, #3
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	2210      	movs	r2, #16
 8002f98:	4393      	bics	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b006      	add	sp, #24
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	fffffcff 	.word	0xfffffcff
 8002fbc:	fffeffff 	.word	0xfffeffff
 8002fc0:	00001388 	.word	0x00001388
 8002fc4:	efffffff 	.word	0xefffffff

08002fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e042      	b.n	8003060 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	223d      	movs	r2, #61	; 0x3d
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	223c      	movs	r2, #60	; 0x3c
 8002fea:	2100      	movs	r1, #0
 8002fec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fd fd87 	bl	8000b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223d      	movs	r2, #61	; 0x3d
 8002ffa:	2102      	movs	r1, #2
 8002ffc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	0019      	movs	r1, r3
 8003008:	0010      	movs	r0, r2
 800300a:	f000 f8dd 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2246      	movs	r2, #70	; 0x46
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223e      	movs	r2, #62	; 0x3e
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	223f      	movs	r2, #63	; 0x3f
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	2101      	movs	r1, #1
 800302c:	5499      	strb	r1, [r3, r2]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2241      	movs	r2, #65	; 0x41
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2242      	movs	r2, #66	; 0x42
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2243      	movs	r2, #67	; 0x43
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2244      	movs	r2, #68	; 0x44
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2245      	movs	r2, #69	; 0x45
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223d      	movs	r2, #61	; 0x3d
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	223c      	movs	r2, #60	; 0x3c
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800307e:	2302      	movs	r3, #2
 8003080:	e09c      	b.n	80031bc <HAL_TIM_PWM_ConfigChannel+0x154>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	223c      	movs	r2, #60	; 0x3c
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d029      	beq.n	80030e4 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8003090:	d802      	bhi.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x30>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003096:	e08c      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 8003098:	2b08      	cmp	r3, #8
 800309a:	d046      	beq.n	800312a <HAL_TIM_PWM_ConfigChannel+0xc2>
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d065      	beq.n	800316c <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 80030a0:	e087      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	0011      	movs	r1, r2
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f8f8 	bl	80032a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2108      	movs	r1, #8
 80030bc:	430a      	orrs	r2, r1
 80030be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2104      	movs	r1, #4
 80030cc:	438a      	bics	r2, r1
 80030ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6999      	ldr	r1, [r3, #24]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	619a      	str	r2, [r3, #24]
      break;
 80030e2:	e066      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	0011      	movs	r1, r2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 f955 	bl	800339c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0109      	lsls	r1, r1, #4
 8003100:	430a      	orrs	r2, r1
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	492d      	ldr	r1, [pc, #180]	; (80031c4 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8003110:	400a      	ands	r2, r1
 8003112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6999      	ldr	r1, [r3, #24]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	021a      	lsls	r2, r3, #8
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	619a      	str	r2, [r3, #24]
      break;
 8003128:	e043      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f000 f9b0 	bl	8003498 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2108      	movs	r1, #8
 8003144:	430a      	orrs	r2, r1
 8003146:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2104      	movs	r1, #4
 8003154:	438a      	bics	r2, r1
 8003156:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69d9      	ldr	r1, [r3, #28]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	61da      	str	r2, [r3, #28]
      break;
 800316a:	e022      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fa0f 	bl	8003598 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	0109      	lsls	r1, r1, #4
 8003188:	430a      	orrs	r2, r1
 800318a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	490b      	ldr	r1, [pc, #44]	; (80031c4 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8003198:	400a      	ands	r2, r1
 800319a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69d9      	ldr	r1, [r3, #28]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	021a      	lsls	r2, r3, #8
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	61da      	str	r2, [r3, #28]
      break;
 80031b0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	223c      	movs	r2, #60	; 0x3c
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b004      	add	sp, #16
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	fffffbff 	.word	0xfffffbff

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <TIM_Base_SetConfig+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0x20>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <TIM_Base_SetConfig+0xc4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2270      	movs	r2, #112	; 0x70
 80031ec:	4393      	bics	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <TIM_Base_SetConfig+0xc0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_Base_SetConfig+0x5a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a21      	ldr	r2, [pc, #132]	; (800328c <TIM_Base_SetConfig+0xc4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0x5a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a20      	ldr	r2, [pc, #128]	; (8003290 <TIM_Base_SetConfig+0xc8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x5a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <TIM_Base_SetConfig+0xcc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x5a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <TIM_Base_SetConfig+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <TIM_Base_SetConfig+0xd4>)
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	4393      	bics	r3, r2
 800323a:	001a      	movs	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <TIM_Base_SetConfig+0xc0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0xaa>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <TIM_Base_SetConfig+0xcc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0xaa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <TIM_Base_SetConfig+0xd0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d103      	bne.n	800327a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	615a      	str	r2, [r3, #20]
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b004      	add	sp, #16
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400
 8003290:	40002000 	.word	0x40002000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	fffffcff 	.word	0xfffffcff

080032a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4393      	bics	r3, r2
 80032b2:	001a      	movs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2270      	movs	r2, #112	; 0x70
 80032ce:	4393      	bics	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4393      	bics	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4393      	bics	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <TIM_OC1_SetConfig+0xe8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <TIM_OC1_SetConfig+0x6e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <TIM_OC1_SetConfig+0xec>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_OC1_SetConfig+0x6e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <TIM_OC1_SetConfig+0xf0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10c      	bne.n	8003328 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2208      	movs	r2, #8
 8003312:	4393      	bics	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2204      	movs	r2, #4
 8003324:	4393      	bics	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <TIM_OC1_SetConfig+0xe8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_OC1_SetConfig+0xa0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <TIM_OC1_SetConfig+0xec>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_OC1_SetConfig+0xa0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <TIM_OC1_SetConfig+0xf0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d111      	bne.n	8003364 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <TIM_OC1_SetConfig+0xf4>)
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <TIM_OC1_SetConfig+0xf8>)
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b006      	add	sp, #24
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800
 8003394:	fffffeff 	.word	0xfffffeff
 8003398:	fffffdff 	.word	0xfffffdff

0800339c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	2210      	movs	r2, #16
 80033ac:	4393      	bics	r3, r2
 80033ae:	001a      	movs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a2c      	ldr	r2, [pc, #176]	; (800347c <TIM_OC2_SetConfig+0xe0>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <TIM_OC2_SetConfig+0xe4>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2220      	movs	r2, #32
 80033e6:	4393      	bics	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a22      	ldr	r2, [pc, #136]	; (8003484 <TIM_OC2_SetConfig+0xe8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	4393      	bics	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	4393      	bics	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <TIM_OC2_SetConfig+0xe8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_OC2_SetConfig+0x96>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <TIM_OC2_SetConfig+0xec>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_OC2_SetConfig+0x96>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a17      	ldr	r2, [pc, #92]	; (800348c <TIM_OC2_SetConfig+0xf0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d113      	bne.n	800345a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <TIM_OC2_SetConfig+0xf4>)
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <TIM_OC2_SetConfig+0xf8>)
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b006      	add	sp, #24
 800347a:	bd80      	pop	{r7, pc}
 800347c:	ffff8fff 	.word	0xffff8fff
 8003480:	fffffcff 	.word	0xfffffcff
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	fffffbff 	.word	0xfffffbff
 8003494:	fffff7ff 	.word	0xfffff7ff

08003498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a33      	ldr	r2, [pc, #204]	; (8003574 <TIM_OC3_SetConfig+0xdc>)
 80034a8:	401a      	ands	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2270      	movs	r2, #112	; 0x70
 80034c4:	4393      	bics	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2203      	movs	r2, #3
 80034cc:	4393      	bics	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <TIM_OC3_SetConfig+0xe0>)
 80034de:	4013      	ands	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <TIM_OC3_SetConfig+0xe4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10d      	bne.n	8003512 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_OC3_SetConfig+0xe8>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <TIM_OC3_SetConfig+0xec>)
 800350e:	4013      	ands	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <TIM_OC3_SetConfig+0xe4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <TIM_OC3_SetConfig+0x92>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <TIM_OC3_SetConfig+0xf0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_OC3_SetConfig+0x92>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <TIM_OC3_SetConfig+0xf4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d113      	bne.n	8003552 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <TIM_OC3_SetConfig+0xf8>)
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <TIM_OC3_SetConfig+0xfc>)
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b006      	add	sp, #24
 8003572:	bd80      	pop	{r7, pc}
 8003574:	fffffeff 	.word	0xfffffeff
 8003578:	fffffdff 	.word	0xfffffdff
 800357c:	40012c00 	.word	0x40012c00
 8003580:	fffff7ff 	.word	0xfffff7ff
 8003584:	fffffbff 	.word	0xfffffbff
 8003588:	40014400 	.word	0x40014400
 800358c:	40014800 	.word	0x40014800
 8003590:	ffffefff 	.word	0xffffefff
 8003594:	ffffdfff 	.word	0xffffdfff

08003598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a26      	ldr	r2, [pc, #152]	; (8003640 <TIM_OC4_SetConfig+0xa8>)
 80035a8:	401a      	ands	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a20      	ldr	r2, [pc, #128]	; (8003644 <TIM_OC4_SetConfig+0xac>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <TIM_OC4_SetConfig+0xb0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4a1b      	ldr	r2, [pc, #108]	; (800364c <TIM_OC4_SetConfig+0xb4>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a17      	ldr	r2, [pc, #92]	; (8003650 <TIM_OC4_SetConfig+0xb8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_OC4_SetConfig+0x70>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <TIM_OC4_SetConfig+0xbc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_OC4_SetConfig+0x70>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a15      	ldr	r2, [pc, #84]	; (8003658 <TIM_OC4_SetConfig+0xc0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d109      	bne.n	800361c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a14      	ldr	r2, [pc, #80]	; (800365c <TIM_OC4_SetConfig+0xc4>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b006      	add	sp, #24
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	ffffefff 	.word	0xffffefff
 8003644:	ffff8fff 	.word	0xffff8fff
 8003648:	fffffcff 	.word	0xfffffcff
 800364c:	ffffdfff 	.word	0xffffdfff
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	ffffbfff 	.word	0xffffbfff

08003660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	223c      	movs	r2, #60	; 0x3c
 800366e:	5c9b      	ldrb	r3, [r3, r2]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003674:	2302      	movs	r3, #2
 8003676:	e03c      	b.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	223c      	movs	r2, #60	; 0x3c
 800367c:	2101      	movs	r1, #1
 800367e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	223d      	movs	r2, #61	; 0x3d
 8003684:	2102      	movs	r1, #2
 8003686:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2270      	movs	r2, #112	; 0x70
 800369c:	4393      	bics	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a11      	ldr	r2, [pc, #68]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10c      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	4393      	bics	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	223d      	movs	r2, #61	; 0x3d
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	223c      	movs	r2, #60	; 0x3c
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	2600      	movs	r6, #0
 8003708:	4d0c      	ldr	r5, [pc, #48]	; (800373c <__libc_init_array+0x38>)
 800370a:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	2600      	movs	r6, #0
 8003716:	f000 f821 	bl	800375c <_init>
 800371a:	4d0a      	ldr	r5, [pc, #40]	; (8003744 <__libc_init_array+0x40>)
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <__libc_init_array+0x44>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	00b3      	lsls	r3, r6, #2
 800372a:	58eb      	ldr	r3, [r5, r3]
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	00b3      	lsls	r3, r6, #2
 8003734:	58eb      	ldr	r3, [r5, r3]
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	080037a4 	.word	0x080037a4
 8003740:	080037a4 	.word	0x080037a4
 8003744:	080037a4 	.word	0x080037a4
 8003748:	080037a8 	.word	0x080037a8

0800374c <memset>:
 800374c:	0003      	movs	r3, r0
 800374e:	1812      	adds	r2, r2, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	7019      	strb	r1, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
